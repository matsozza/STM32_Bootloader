
STM32_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800577c  0800577c  0001577c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800581c  0800581c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800581c  0800581c  0001581c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005824  08005824  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005824  08005824  00015824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800582c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000128  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000134  20000134  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f54f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b9e  00000000  00000000  0002f58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  00032130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  00032e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230ed  00000000  00000000  000339f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b42  00000000  00000000  00056add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c91d7  00000000  00000000  0006761f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001307f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000327c  00000000  00000000  00130848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005764 	.word	0x08005764

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005764 	.word	0x08005764

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <bootloader_init>:
inline static void _bootloader_loadApplication(void);
inline static uint8_t _checkPacket(uint8_t* packet, uint8_t expectedPacket[4],  uint8_t significance);

/* Functions implementation --------------------------------------------------*/
void bootloader_init()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0
	// Turn board LEDs off - Visual feedback about data transmission
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d8:	482f      	ldr	r0, [pc, #188]	; (8000598 <bootloader_init+0xcc>)
 80004da:	f001 fadd 	bl	8001a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e4:	482c      	ldr	r0, [pc, #176]	; (8000598 <bootloader_init+0xcc>)
 80004e6:	f001 fad7 	bl	8001a98 <HAL_GPIO_WritePin>

	// 1_(0x80) Try to open communication with OTA serial interface 
	COMM_UART_SendData((uint8_t[4]) {0x80,0xFF,0xFF,0xFF}, 4, SERIAL_TIMEOUT);
 80004ea:	4b2c      	ldr	r3, [pc, #176]	; (800059c <bootloader_init+0xd0>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004f8:	2104      	movs	r1, #4
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 f9e4 	bl	80008c8 <COMM_UART_SendData>
	
	// 2_(0xC0) Check if MCU answered via OTA serial interface 
	COMM_UART_ReceiveData(rx, 4, SERIAL_TIMEOUT);
 8000500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000504:	2104      	movs	r1, #4
 8000506:	4826      	ldr	r0, [pc, #152]	; (80005a0 <bootloader_init+0xd4>)
 8000508:	f000 f9c6 	bl	8000898 <COMM_UART_ReceiveData>
	if(_checkPacket(rx, (uint8_t[4]){0xC0,0xFF,0xFF,0xFF}, (uint8_t) 0b1000))
 800050c:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <bootloader_init+0xd8>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	2208      	movs	r2, #8
 8000518:	4619      	mov	r1, r3
 800051a:	4821      	ldr	r0, [pc, #132]	; (80005a0 <bootloader_init+0xd4>)
 800051c:	f000 f964 	bl	80007e8 <_checkPacket>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d027      	beq.n	8000576 <bootloader_init+0xaa>
	{
		// --------------- a_ Unlock memory + clear error flags ---------------
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 8000526:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <bootloader_init+0xdc>)
 8000528:	22b3      	movs	r2, #179	; 0xb3
 800052a:	60da      	str	r2, [r3, #12]
		HAL_FLASH_Unlock();
 800052c:	f000 ff66 	bl	80013fc <HAL_FLASH_Unlock>

		// --------------- b_(0x81) Erase memory dedicated to appl. sw + send feedback to OTA interface  ---------------
		_bootloader_eraseApplicationSectors();
 8000530:	f000 f842 	bl	80005b8 <_bootloader_eraseApplicationSectors>

		// --------------- c_(0x82) Send data to OTA serial interface to confirm it's ready to receive 'nOfPackets' of data  ---------------
		uint32_t nOfPackets = _bootloader_acknowledgePackets();
 8000534:	f000 f872 	bl	800061c <_bootloader_acknowledgePackets>
 8000538:	61f8      	str	r0, [r7, #28]

		// --------------- d_ Start receiving data + flashing MCU sectors (dummy flashing) ---------------
		uint32_t nOfFlashed = _bootloader_receiveAndFlashPackets(nOfPackets);
 800053a:	69f8      	ldr	r0, [r7, #28]
 800053c:	f000 f89e 	bl	800067c <_bootloader_receiveAndFlashPackets>
 8000540:	61b8      	str	r0, [r7, #24]

		// --------------- e_ Transmit feedback about flash process ---------------
		if(nOfFlashed == nOfPackets)
 8000542:	69ba      	ldr	r2, [r7, #24]
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	429a      	cmp	r2, r3
 8000548:	d10b      	bne.n	8000562 <bootloader_init+0x96>
		{
			COMM_UART_SendData((uint8_t[4]) {0x84, 0xFF, 0xFF, 0xFF}, 4, SERIAL_TIMEOUT); // OK
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <bootloader_init+0xe0>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	f107 0308 	add.w	r3, r7, #8
 8000554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000558:	2104      	movs	r1, #4
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f9b4 	bl	80008c8 <COMM_UART_SendData>
 8000560:	e009      	b.n	8000576 <bootloader_init+0xaa>
		}
		else
		{
			COMM_UART_SendData((uint8_t[4]) {0x8F, 0xFF, 0xFF, 0xFF}, 4, SERIAL_TIMEOUT); // NOK
 8000562:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <bootloader_init+0xe4>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800056e:	2104      	movs	r1, #4
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f9a9 	bl	80008c8 <COMM_UART_SendData>
		}
	}
	
	COMM_UART_SendData((uint8_t[4]){0x85,0xFF,0xFF,0xFF}, 4, SERIAL_TIMEOUT); // Jump to application
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <bootloader_init+0xe8>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000584:	2104      	movs	r1, #4
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f99e 	bl	80008c8 <COMM_UART_SendData>
	_bootloader_loadApplication(); // Load application file
 800058c:	f000 f8e2 	bl	8000754 <_bootloader_loadApplication>
}
 8000590:	bf00      	nop
 8000592:	3720      	adds	r7, #32
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40021400 	.word	0x40021400
 800059c:	0800577c 	.word	0x0800577c
 80005a0:	20000028 	.word	0x20000028
 80005a4:	08005780 	.word	0x08005780
 80005a8:	40023c00 	.word	0x40023c00
 80005ac:	08005784 	.word	0x08005784
 80005b0:	08005788 	.word	0x08005788
 80005b4:	0800578c 	.word	0x0800578c

080005b8 <_bootloader_eraseApplicationSectors>:

inline static void _bootloader_eraseApplicationSectors()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
	for(uint8_t idxS=APP_FLASH_SECINI; idxS <= APP_FLASH_SECFIN; idxS++ )
 80005be:	2306      	movs	r3, #6
 80005c0:	71fb      	strb	r3, [r7, #7]
 80005c2:	e01b      	b.n	80005fc <_bootloader_eraseApplicationSectors+0x44>
	{
		FLASH_Erase_Sector(idxS,FLASH_VOLTAGE_RANGE_3);
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2102      	movs	r1, #2
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 f869 	bl	80016a0 <FLASH_Erase_Sector>
		COMM_UART_SendData((uint8_t[4]){0x81,idxS,0xFF,0xFF}, 4, SERIAL_TIMEOUT);
 80005ce:	2381      	movs	r3, #129	; 0x81
 80005d0:	703b      	strb	r3, [r7, #0]
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	707b      	strb	r3, [r7, #1]
 80005d6:	23ff      	movs	r3, #255	; 0xff
 80005d8:	70bb      	strb	r3, [r7, #2]
 80005da:	23ff      	movs	r3, #255	; 0xff
 80005dc:	70fb      	strb	r3, [r7, #3]
 80005de:	463b      	mov	r3, r7
 80005e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005e4:	2104      	movs	r1, #4
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f96e 	bl	80008c8 <COMM_UART_SendData>
		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_9);
 80005ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f0:	4809      	ldr	r0, [pc, #36]	; (8000618 <_bootloader_eraseApplicationSectors+0x60>)
 80005f2:	f001 fa6a 	bl	8001aca <HAL_GPIO_TogglePin>
	for(uint8_t idxS=APP_FLASH_SECINI; idxS <= APP_FLASH_SECFIN; idxS++ )
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	3301      	adds	r3, #1
 80005fa:	71fb      	strb	r3, [r7, #7]
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b0b      	cmp	r3, #11
 8000600:	d9e0      	bls.n	80005c4 <_bootloader_eraseApplicationSectors+0xc>
	}
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET); // Turn-off LED
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <_bootloader_eraseApplicationSectors+0x60>)
 800060a:	f001 fa45 	bl	8001a98 <HAL_GPIO_WritePin>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021400 	.word	0x40021400

0800061c <_bootloader_acknowledgePackets>:

inline static uint32_t _bootloader_acknowledgePackets()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	COMM_UART_ReceiveData(rx, 4, SERIAL_TIMEOUT); // Receive packets data
 8000622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000626:	2104      	movs	r1, #4
 8000628:	4813      	ldr	r0, [pc, #76]	; (8000678 <_bootloader_acknowledgePackets+0x5c>)
 800062a:	f000 f935 	bl	8000898 <COMM_UART_ReceiveData>

	uint32_t nOfPackets = (uint32_t) ((rx[3]<<0) + (rx[2]<<8) + (rx[1]<<16)); // Parse packets data
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <_bootloader_acknowledgePackets+0x5c>)
 8000630:	78db      	ldrb	r3, [r3, #3]
 8000632:	461a      	mov	r2, r3
 8000634:	4b10      	ldr	r3, [pc, #64]	; (8000678 <_bootloader_acknowledgePackets+0x5c>)
 8000636:	789b      	ldrb	r3, [r3, #2]
 8000638:	021b      	lsls	r3, r3, #8
 800063a:	441a      	add	r2, r3
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <_bootloader_acknowledgePackets+0x5c>)
 800063e:	785b      	ldrb	r3, [r3, #1]
 8000640:	041b      	lsls	r3, r3, #16
 8000642:	4413      	add	r3, r2
 8000644:	607b      	str	r3, [r7, #4]
	COMM_UART_SendData((uint8_t[4]) {0x82,
 8000646:	2382      	movs	r3, #130	; 0x82
 8000648:	703b      	strb	r3, [r7, #0]
		(uint8_t) ((nOfPackets & 0x00FF0000) >> 16),
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	0c1b      	lsrs	r3, r3, #16
 800064e:	b2db      	uxtb	r3, r3
	COMM_UART_SendData((uint8_t[4]) {0x82,
 8000650:	707b      	strb	r3, [r7, #1]
		(uint8_t) ((nOfPackets & 0x0000FF00) >> 8),
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	b2db      	uxtb	r3, r3
	COMM_UART_SendData((uint8_t[4]) {0x82,
 8000658:	70bb      	strb	r3, [r7, #2]
		(uint8_t) ((nOfPackets & 0x000000FF) >> 0)},
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	b2db      	uxtb	r3, r3
	COMM_UART_SendData((uint8_t[4]) {0x82,
 800065e:	70fb      	strb	r3, [r7, #3]
 8000660:	463b      	mov	r3, r7
 8000662:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000666:	2104      	movs	r1, #4
 8000668:	4618      	mov	r0, r3
 800066a:	f000 f92d 	bl	80008c8 <COMM_UART_SendData>
		 4, SERIAL_TIMEOUT); // Answer back acknowledging the received 'nOfPackets' value

	return nOfPackets;
 800066e:	687b      	ldr	r3, [r7, #4]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000028 	.word	0x20000028

0800067c <_bootloader_receiveAndFlashPackets>:

inline static uint32_t _bootloader_receiveAndFlashPackets(uint32_t nOfPackets)
{
 800067c:	b5b0      	push	{r4, r5, r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef halStatus;
	uint32_t nOfFlashed = 0; // Counter to track progress of flashed packets
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
	for(uint8_t nSector = APP_FLASH_SECINI; nSector<= APP_FLASH_SECFIN; nSector++)
 8000688:	2306      	movs	r3, #6
 800068a:	76fb      	strb	r3, [r7, #27]
 800068c:	e04e      	b.n	800072c <_bootloader_receiveAndFlashPackets+0xb0>
	{
		// Write all the addresses contained in the current flash sector
		for(uint32_t addr=sectorAddr[nSector]; addr<(sectorAddr[nSector]+sectorSize[nSector]); addr+=0x04)
 800068e:	7efb      	ldrb	r3, [r7, #27]
 8000690:	4a2c      	ldr	r2, [pc, #176]	; (8000744 <_bootloader_receiveAndFlashPackets+0xc8>)
 8000692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	e039      	b.n	800070e <_bootloader_receiveAndFlashPackets+0x92>
		{
			// Receive a SW packet via serial + parse it (little-endian) + write it to flash memory
			COMM_UART_ReceiveData(rx, 4, SERIAL_TIMEOUT);
 800069a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800069e:	2104      	movs	r1, #4
 80006a0:	4829      	ldr	r0, [pc, #164]	; (8000748 <_bootloader_receiveAndFlashPackets+0xcc>)
 80006a2:	f000 f8f9 	bl	8000898 <COMM_UART_ReceiveData>
			uint32_t packetData = (rx[3] << 24) + (rx[2] << 16) + (rx[1] << 8) + (rx[0] << 0);
 80006a6:	4b28      	ldr	r3, [pc, #160]	; (8000748 <_bootloader_receiveAndFlashPackets+0xcc>)
 80006a8:	78db      	ldrb	r3, [r3, #3]
 80006aa:	061a      	lsls	r2, r3, #24
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <_bootloader_receiveAndFlashPackets+0xcc>)
 80006ae:	789b      	ldrb	r3, [r3, #2]
 80006b0:	041b      	lsls	r3, r3, #16
 80006b2:	441a      	add	r2, r3
 80006b4:	4b24      	ldr	r3, [pc, #144]	; (8000748 <_bootloader_receiveAndFlashPackets+0xcc>)
 80006b6:	785b      	ldrb	r3, [r3, #1]
 80006b8:	021b      	lsls	r3, r3, #8
 80006ba:	4413      	add	r3, r2
 80006bc:	4a22      	ldr	r2, [pc, #136]	; (8000748 <_bootloader_receiveAndFlashPackets+0xcc>)
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	4413      	add	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
			halStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, (uint64_t) packetData);
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	2200      	movs	r2, #0
 80006c8:	461c      	mov	r4, r3
 80006ca:	4615      	mov	r5, r2
 80006cc:	4622      	mov	r2, r4
 80006ce:	462b      	mov	r3, r5
 80006d0:	6979      	ldr	r1, [r7, #20]
 80006d2:	2002      	movs	r0, #2
 80006d4:	f000 fe3e 	bl	8001354 <HAL_FLASH_Program>
 80006d8:	4603      	mov	r3, r0
 80006da:	73fb      	strb	r3, [r7, #15]

			// TODO improve check robustness
			uint32_t* dataFlashed;
			dataFlashed = addr;
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	60bb      	str	r3, [r7, #8]

			if((*dataFlashed) != packetData)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	693a      	ldr	r2, [r7, #16]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d124      	bne.n	8000734 <_bootloader_receiveAndFlashPackets+0xb8>
			{
				goto END_PROGRAMMING; // Check for unflashed data
			}
			if(halStatus != HAL_OK || ++nOfFlashed == nOfPackets) goto END_PROGRAMMING; // Check for errors or end of binary flashing
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d123      	bne.n	8000738 <_bootloader_receiveAndFlashPackets+0xbc>
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	3301      	adds	r3, #1
 80006f4:	61fb      	str	r3, [r7, #28]
 80006f6:	69fa      	ldr	r2, [r7, #28]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d01c      	beq.n	8000738 <_bootloader_receiveAndFlashPackets+0xbc>
			HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);
 80006fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000702:	4812      	ldr	r0, [pc, #72]	; (800074c <_bootloader_receiveAndFlashPackets+0xd0>)
 8000704:	f001 f9e1 	bl	8001aca <HAL_GPIO_TogglePin>
		for(uint32_t addr=sectorAddr[nSector]; addr<(sectorAddr[nSector]+sectorSize[nSector]); addr+=0x04)
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	3304      	adds	r3, #4
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	7efb      	ldrb	r3, [r7, #27]
 8000710:	4a0c      	ldr	r2, [pc, #48]	; (8000744 <_bootloader_receiveAndFlashPackets+0xc8>)
 8000712:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000716:	7efb      	ldrb	r3, [r7, #27]
 8000718:	490d      	ldr	r1, [pc, #52]	; (8000750 <_bootloader_receiveAndFlashPackets+0xd4>)
 800071a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800071e:	4413      	add	r3, r2
 8000720:	697a      	ldr	r2, [r7, #20]
 8000722:	429a      	cmp	r2, r3
 8000724:	d3b9      	bcc.n	800069a <_bootloader_receiveAndFlashPackets+0x1e>
	for(uint8_t nSector = APP_FLASH_SECINI; nSector<= APP_FLASH_SECFIN; nSector++)
 8000726:	7efb      	ldrb	r3, [r7, #27]
 8000728:	3301      	adds	r3, #1
 800072a:	76fb      	strb	r3, [r7, #27]
 800072c:	7efb      	ldrb	r3, [r7, #27]
 800072e:	2b0b      	cmp	r3, #11
 8000730:	d9ad      	bls.n	800068e <_bootloader_receiveAndFlashPackets+0x12>
		}
		//COMM_UART_SendData((uint8_t[4]) {0x83, nSector, 0xFF, 0xFF}, 4, SERIAL_TIMEOUT); // TODO check if needed
	}

	END_PROGRAMMING:
 8000732:	e002      	b.n	800073a <_bootloader_receiveAndFlashPackets+0xbe>
				goto END_PROGRAMMING; // Check for unflashed data
 8000734:	bf00      	nop
 8000736:	e000      	b.n	800073a <_bootloader_receiveAndFlashPackets+0xbe>
			if(halStatus != HAL_OK || ++nOfFlashed == nOfPackets) goto END_PROGRAMMING; // Check for errors or end of binary flashing
 8000738:	bf00      	nop

	return nOfFlashed;
 800073a:	69fb      	ldr	r3, [r7, #28]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3720      	adds	r7, #32
 8000740:	46bd      	mov	sp, r7
 8000742:	bdb0      	pop	{r4, r5, r7, pc}
 8000744:	08005790 	.word	0x08005790
 8000748:	20000028 	.word	0x20000028
 800074c:	40021400 	.word	0x40021400
 8000750:	080057c0 	.word	0x080057c0

08000754 <_bootloader_loadApplication>:

/**
 * @brief This function ensures a 'clean-state' jump to the application code
 */
inline static void _bootloader_loadApplication()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075a:	b672      	cpsid	i
}
 800075c:	bf00      	nop
	// Disable all interrupts to perform all steps before loading application code
	__disable_irq();

	// Function pointer to application's reset handler
	void (*app_Reset_Handler)(void) =	(void*)(*(volatile uint32_t*)(sectorAddr[APP_FLASH_SECINI] + 0x04));
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <_bootloader_loadApplication+0x80>)
 8000760:	3304      	adds	r3, #4
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	607b      	str	r3, [r7, #4]

	// Reset SCB parameters
    SCB -> ICSR = 0x00000000;   // reset value;
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <_bootloader_loadApplication+0x84>)
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
    SCB -> SCR = 0;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <_bootloader_loadApplication+0x84>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
    SCB -> CCR = 0x00000200;    // reset value
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <_bootloader_loadApplication+0x84>)
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	615a      	str	r2, [r3, #20]
    SCB -> SHP[0] = 0;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <_bootloader_loadApplication+0x84>)
 800077c:	2200      	movs	r2, #0
 800077e:	761a      	strb	r2, [r3, #24]
    SCB -> SHCSR = 0;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <_bootloader_loadApplication+0x84>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
    SCB -> CFSR = (SCB_CFSR_DIVBYZERO_Msk | SCB_CFSR_UNALIGNED_Msk | SCB_CFSR_UNDEFINSTR_Msk | SCB_CFSR_NOCP_Msk | SCB_CFSR_INVPC_Msk | SCB_CFSR_INVSTATE_Msk);
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <_bootloader_loadApplication+0x84>)
 8000788:	4a14      	ldr	r2, [pc, #80]	; (80007dc <_bootloader_loadApplication+0x88>)
 800078a:	629a      	str	r2, [r3, #40]	; 0x28
    SCB -> HFSR = (SCB_HFSR_DEBUGEVT_Msk | SCB_HFSR_FORCED_Msk | SCB_HFSR_VECTTBL_Msk);
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <_bootloader_loadApplication+0x84>)
 800078e:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <_bootloader_loadApplication+0x8c>)
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set the Vector Table Offset Register (VTOR) to the application vector table
	SCB -> VTOR = sectorAddr[APP_FLASH_SECINI];
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <_bootloader_loadApplication+0x84>)
 8000794:	4a0f      	ldr	r2, [pc, #60]	; (80007d4 <_bootloader_loadApplication+0x80>)
 8000796:	609a      	str	r2, [r3, #8]

    // Set the Main Stack Pointer (MSP) to the value at the beginning of the application's flash section
	__set_MSP(*(volatile uint32_t *) sectorAddr[APP_FLASH_SECINI]);
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <_bootloader_loadApplication+0x80>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	f383 8808 	msr	MSP, r3
}
 80007a4:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007a6:	f3bf 8f4f 	dsb	sy
}
 80007aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007ac:	f3bf 8f6f 	isb	sy
}
 80007b0:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80007b2:	b662      	cpsie	i
}
 80007b4:	bf00      	nop

	// Re-enable all interrupts
	__enable_irq();

    // Disable / Reset SysTick before jumping to application
    SysTick -> CTRL = 0;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <_bootloader_loadApplication+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
    SysTick -> LOAD = 0;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <_bootloader_loadApplication+0x90>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
    SysTick -> VAL  = 0;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <_bootloader_loadApplication+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]

	// Call application's reset handler (starting point)
	app_Reset_Handler();
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4798      	blx	r3
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	08040000 	.word	0x08040000
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	030f0000 	.word	0x030f0000
 80007e0:	c0000002 	.word	0xc0000002
 80007e4:	e000e010 	.word	0xe000e010

080007e8 <_checkPacket>:

/*
 * @brief: Method to check if the contents of a packet meet the required content according to the significance.
 */
inline static uint8_t _checkPacket(uint8_t* packet, uint8_t expectedPacket[4],  uint8_t significance)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b087      	sub	sp, #28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	4613      	mov	r3, r2
 80007f4:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	75fb      	strb	r3, [r7, #23]

	if(*packet	   == expectedPacket[0] || ((significance & 0b1000) == 0)) result |= (result | 0b1000);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	781a      	ldrb	r2, [r3, #0]
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	429a      	cmp	r2, r3
 8000804:	d004      	beq.n	8000810 <_checkPacket+0x28>
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	f003 0308 	and.w	r3, r3, #8
 800080c:	2b00      	cmp	r3, #0
 800080e:	d103      	bne.n	8000818 <_checkPacket+0x30>
 8000810:	7dfb      	ldrb	r3, [r7, #23]
 8000812:	f043 0308 	orr.w	r3, r3, #8
 8000816:	75fb      	strb	r3, [r7, #23]
	if(*(packet+1) == expectedPacket[1] || ((significance & 0b0100) == 0)) result |= (result | 0b0100);
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	3301      	adds	r3, #1
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	3301      	adds	r3, #1
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	429a      	cmp	r2, r3
 8000826:	d004      	beq.n	8000832 <_checkPacket+0x4a>
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	2b00      	cmp	r3, #0
 8000830:	d103      	bne.n	800083a <_checkPacket+0x52>
 8000832:	7dfb      	ldrb	r3, [r7, #23]
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	75fb      	strb	r3, [r7, #23]
	if(*(packet+2) == expectedPacket[2] || ((significance & 0b0010) == 0)) result |= (result | 0b0010);
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	3302      	adds	r3, #2
 800083e:	781a      	ldrb	r2, [r3, #0]
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	3302      	adds	r3, #2
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	429a      	cmp	r2, r3
 8000848:	d004      	beq.n	8000854 <_checkPacket+0x6c>
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	f003 0302 	and.w	r3, r3, #2
 8000850:	2b00      	cmp	r3, #0
 8000852:	d103      	bne.n	800085c <_checkPacket+0x74>
 8000854:	7dfb      	ldrb	r3, [r7, #23]
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	75fb      	strb	r3, [r7, #23]
	if(*(packet+3) == expectedPacket[3] || ((significance & 0b0001) == 0)) result |= (result | 0b0001);
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	3303      	adds	r3, #3
 8000860:	781a      	ldrb	r2, [r3, #0]
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	3303      	adds	r3, #3
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	429a      	cmp	r2, r3
 800086a:	d004      	beq.n	8000876 <_checkPacket+0x8e>
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	2b00      	cmp	r3, #0
 8000874:	d103      	bne.n	800087e <_checkPacket+0x96>
 8000876:	7dfb      	ldrb	r3, [r7, #23]
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	75fb      	strb	r3, [r7, #23]

	return (result == 0b1111);
 800087e:	7dfb      	ldrb	r3, [r7, #23]
 8000880:	2b0f      	cmp	r3, #15
 8000882:	bf0c      	ite	eq
 8000884:	2301      	moveq	r3, #1
 8000886:	2300      	movne	r3, #0
 8000888:	b2db      	uxtb	r3, r3
}
 800088a:	4618      	mov	r0, r3
 800088c:	371c      	adds	r7, #28
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <COMM_UART_ReceiveData>:
static uint32_t _ticToc(void);

/* Functions implementation --------------------------------------------------*/

HAL_StatusTypeDef COMM_UART_ReceiveData(uint8_t* dataPtr, uint8_t size, uint32_t delay)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	460b      	mov	r3, r1
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef halStatus;
  halStatus = HAL_UART_Receive(&UART_DEVICE_HANDLER , dataPtr, size, delay);
 80008a6:	7afb      	ldrb	r3, [r7, #11]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	68f9      	ldr	r1, [r7, #12]
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <COMM_UART_ReceiveData+0x2c>)
 80008b0:	f002 ffe8 	bl	8003884 <HAL_UART_Receive>
 80008b4:	4603      	mov	r3, r0
 80008b6:	75fb      	strb	r3, [r7, #23]
  return halStatus;
 80008b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000b8 	.word	0x200000b8

080008c8 <COMM_UART_SendData>:

// Transmit string via UART in blocking mode
HAL_StatusTypeDef COMM_UART_SendData(uint8_t* dataPtr, uint8_t size, uint32_t delay)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	460b      	mov	r3, r1
 80008d2:	607a      	str	r2, [r7, #4]
 80008d4:	72fb      	strb	r3, [r7, #11]
  // Ensure constant minimum latency between transmissions
  uint32_t dly = _ticToc();
 80008d6:	f000 f81f 	bl	8000918 <_ticToc>
 80008da:	6178      	str	r0, [r7, #20]
  if(dly<100) HAL_Delay(100 - dly);
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	2b63      	cmp	r3, #99	; 0x63
 80008e0:	d805      	bhi.n	80008ee <COMM_UART_SendData+0x26>
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 fb51 	bl	8000f90 <HAL_Delay>
  
  // Start data transmission
  HAL_StatusTypeDef halStatus;
  do{
    halStatus = HAL_UART_Transmit(&UART_DEVICE_HANDLER, dataPtr , size, delay);
 80008ee:	7afb      	ldrb	r3, [r7, #11]
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68f9      	ldr	r1, [r7, #12]
 80008f6:	4807      	ldr	r0, [pc, #28]	; (8000914 <COMM_UART_SendData+0x4c>)
 80008f8:	f002 ff32 	bl	8003760 <HAL_UART_Transmit>
 80008fc:	4603      	mov	r3, r0
 80008fe:	74fb      	strb	r3, [r7, #19]
  }
  while(halStatus == HAL_BUSY);
 8000900:	7cfb      	ldrb	r3, [r7, #19]
 8000902:	2b02      	cmp	r3, #2
 8000904:	d0f3      	beq.n	80008ee <COMM_UART_SendData+0x26>

  _ticToc(); // Counter for latency for next run
 8000906:	f000 f807 	bl	8000918 <_ticToc>

  return halStatus;
 800090a:	7cfb      	ldrb	r3, [r7, #19]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200000b8 	.word	0x200000b8

08000918 <_ticToc>:

static uint32_t _ticToc()
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
	static uint8_t tickRunning=0;
	static uint32_t lastTick;

	if(!tickRunning) // First trigger
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <_ticToc+0x5c>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d109      	bne.n	800093a <_ticToc+0x22>
	{
		tickRunning=1;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <_ticToc+0x5c>)
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]
		lastTick = HAL_GetTick();
 800092c:	f000 fb24 	bl	8000f78 <HAL_GetTick>
 8000930:	4603      	mov	r3, r0
 8000932:	4a11      	ldr	r2, [pc, #68]	; (8000978 <_ticToc+0x60>)
 8000934:	6013      	str	r3, [r2, #0]
		return 0;
 8000936:	2300      	movs	r3, #0
 8000938:	e017      	b.n	800096a <_ticToc+0x52>
	}
	else // Count the delta
	{
		uint32_t currTick = HAL_GetTick();
 800093a:	f000 fb1d 	bl	8000f78 <HAL_GetTick>
 800093e:	6038      	str	r0, [r7, #0]
		uint32_t delta;
		if(currTick >= lastTick)
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <_ticToc+0x60>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	683a      	ldr	r2, [r7, #0]
 8000946:	429a      	cmp	r2, r3
 8000948:	d305      	bcc.n	8000956 <_ticToc+0x3e>
		{	
			delta =  currTick - lastTick;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <_ticToc+0x60>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	e005      	b.n	8000962 <_ticToc+0x4a>
		}
		else
		{
			delta = currTick + (0xFFFFFFFF - lastTick);
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <_ticToc+0x60>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	3b01      	subs	r3, #1
 8000960:	607b      	str	r3, [r7, #4]
		}

		lastTick=currTick;
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <_ticToc+0x60>)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	6013      	str	r3, [r2, #0]
		return delta;
 8000968:	687b      	ldr	r3, [r7, #4]
	}

}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000002c 	.word	0x2000002c
 8000978:	20000030 	.word	0x20000030

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000980:	f000 fa94 	bl	8000eac <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000984:	f000 f80c 	bl	80009a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000988:	f000 f8bc 	bl	8000b04 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 800098c:	f000 f870 	bl	8000a70 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000990:	f004 fcc2 	bl	8005318 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8000994:	f000 f88c 	bl	8000ab0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  //initialise_monitor_handles(); // Semi-hosting

  bootloader_init(); // Start bootloader
 8000998:	f7ff fd98 	bl	80004cc <bootloader_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800099c:	e7fe      	b.n	800099c <main+0x20>
	...

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b094      	sub	sp, #80	; 0x50
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 0320 	add.w	r3, r7, #32
 80009aa:	2230      	movs	r2, #48	; 0x30
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f004 fed0 	bl	8005754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <SystemClock_Config+0xc8>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	4a26      	ldr	r2, [pc, #152]	; (8000a68 <SystemClock_Config+0xc8>)
 80009ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d2:	6413      	str	r3, [r2, #64]	; 0x40
 80009d4:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <SystemClock_Config+0xc8>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <SystemClock_Config+0xcc>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a20      	ldr	r2, [pc, #128]	; (8000a6c <SystemClock_Config+0xcc>)
 80009ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <SystemClock_Config+0xcc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009fc:	2302      	movs	r3, #2
 80009fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a00:	2301      	movs	r3, #1
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a04:	2310      	movs	r3, #16
 8000a06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a10:	2310      	movs	r3, #16
 8000a12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a14:	23c0      	movs	r3, #192	; 0xc0
 8000a16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a20:	f107 0320 	add.w	r3, r7, #32
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 f86b 	bl	8001b00 <HAL_RCC_OscConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a30:	f000 f8e4 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a34:	230f      	movs	r3, #15
 8000a36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 face 	bl	8001ff0 <HAL_RCC_ClockConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000a5a:	f000 f8cf 	bl	8000bfc <Error_Handler>
  }
}
 8000a5e:	bf00      	nop
 8000a60:	3750      	adds	r7, #80	; 0x50
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40007000 	.word	0x40007000

08000a70 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_SDIO_SD_Init+0x38>)
 8000a76:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <MX_SDIO_SD_Init+0x3c>)
 8000a78:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_SDIO_SD_Init+0x38>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_SDIO_SD_Init+0x38>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_SDIO_SD_Init+0x38>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_SDIO_SD_Init+0x38>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MX_SDIO_SD_Init+0x38>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <MX_SDIO_SD_Init+0x38>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	20000034 	.word	0x20000034
 8000aac:	40012c00 	.word	0x40012c00

08000ab0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <MX_USART2_UART_Init+0x50>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ae8:	f002 fded 	bl	80036c6 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000af2:	f000 f883 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000b8 	.word	0x200000b8
 8000b00:	40004400 	.word	0x40004400

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b34      	ldr	r3, [pc, #208]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a33      	ldr	r2, [pc, #204]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b24:	f043 0310 	orr.w	r3, r3, #16
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b31      	ldr	r3, [pc, #196]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0310 	and.w	r3, r3, #16
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b2d      	ldr	r3, [pc, #180]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a2c      	ldr	r2, [pc, #176]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b40:	f043 0320 	orr.w	r3, r3, #32
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0320 	and.w	r3, r3, #32
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a25      	ldr	r2, [pc, #148]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000bac:	4811      	ldr	r0, [pc, #68]	; (8000bf4 <MX_GPIO_Init+0xf0>)
 8000bae:	f000 ff73 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bb2:	2310      	movs	r3, #16
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_GPIO_Init+0xf4>)
 8000bc6:	f000 fdb3 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000bca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_GPIO_Init+0xf0>)
 8000be4:	f000 fda4 	bl	8001730 <HAL_GPIO_Init>

}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40021400 	.word	0x40021400
 8000bf8:	40021000 	.word	0x40021000

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a28      	ldr	r2, [pc, #160]	; (8000d18 <HAL_SD_MspInit+0xc0>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d14a      	bne.n	8000d10 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <HAL_SD_MspInit+0xc4>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a26      	ldr	r2, [pc, #152]	; (8000d1c <HAL_SD_MspInit+0xc4>)
 8000c84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <HAL_SD_MspInit+0xc4>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <HAL_SD_MspInit+0xc4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a1f      	ldr	r2, [pc, #124]	; (8000d1c <HAL_SD_MspInit+0xc4>)
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <HAL_SD_MspInit+0xc4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0304 	and.w	r3, r3, #4
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_SD_MspInit+0xc4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <HAL_SD_MspInit+0xc4>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_SD_MspInit+0xc4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000cce:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000cd2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <HAL_SD_MspInit+0xc8>)
 8000cec:	f000 fd20 	bl	8001730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d00:	230c      	movs	r3, #12
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <HAL_SD_MspInit+0xcc>)
 8000d0c:	f000 fd10 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	; 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40012c00 	.word	0x40012c00
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020800 	.word	0x40020800
 8000d24:	40020c00 	.word	0x40020c00

08000d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a1d      	ldr	r2, [pc, #116]	; (8000dbc <HAL_UART_MspInit+0x94>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d133      	bne.n	8000db2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <HAL_UART_MspInit+0x98>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a1b      	ldr	r2, [pc, #108]	; (8000dc0 <HAL_UART_MspInit+0x98>)
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_UART_MspInit+0x98>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_UART_MspInit+0x98>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <HAL_UART_MspInit+0x98>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_UART_MspInit+0x98>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d82:	230c      	movs	r3, #12
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d92:	2307      	movs	r3, #7
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <HAL_UART_MspInit+0x9c>)
 8000d9e:	f000 fcc7 	bl	8001730 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	2026      	movs	r0, #38	; 0x26
 8000da8:	f000 fa07 	bl	80011ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dac:	2026      	movs	r0, #38	; 0x26
 8000dae:	f000 fa20 	bl	80011f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40004400 	.word	0x40004400
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8000dd2:	f000 fa1c 	bl	800120e <HAL_NVIC_SystemReset>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x8>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e18:	f000 f89a 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <USART2_IRQHandler+0x10>)
 8000e26:	f002 fdcf 	bl	80039c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200000b8 	.word	0x200000b8

08000e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <SystemInit+0x20>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <SystemInit+0x20>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e5e:	490e      	ldr	r1, [pc, #56]	; (8000e98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e74:	4c0b      	ldr	r4, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e82:	f7ff ffd7 	bl	8000e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e86:	f004 fc41 	bl	800570c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff fd77 	bl	800097c <main>
  bx  lr    
 8000e8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e9c:	0800582c 	.word	0x0800582c
  ldr r2, =_sbss
 8000ea0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ea4:	20000134 	.word	0x20000134

08000ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC_IRQHandler>
	...

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <HAL_Init+0x40>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_Init+0x40>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_Init+0x40>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 f965 	bl	80011a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	200f      	movs	r0, #15
 8000edc:	f000 f808 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fe92 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f981 	bl	8001216 <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f945 	bl	80011ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000004 	.word	0x20000004

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	200000fc 	.word	0x200000fc

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200000fc 	.word	0x200000fc

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	; (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	; (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001138:	f3bf 8f4f 	dsb	sy
}
 800113c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <__NVIC_SystemReset+0x24>)
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001146:	4904      	ldr	r1, [pc, #16]	; (8001158 <__NVIC_SystemReset+0x24>)
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <__NVIC_SystemReset+0x28>)
 800114a:	4313      	orrs	r3, r2
 800114c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800114e:	f3bf 8f4f 	dsb	sy
}
 8001152:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <__NVIC_SystemReset+0x20>
 8001158:	e000ed00 	.word	0xe000ed00
 800115c:	05fa0004 	.word	0x05fa0004

08001160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001170:	d301      	bcc.n	8001176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001172:	2301      	movs	r3, #1
 8001174:	e00f      	b.n	8001196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <SysTick_Config+0x40>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117e:	210f      	movs	r1, #15
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f7ff ff78 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <SysTick_Config+0x40>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <SysTick_Config+0x40>)
 8001190:	2207      	movs	r2, #7
 8001192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	e000e010 	.word	0xe000e010

080011a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff13 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011cc:	f7ff ff28 	bl	8001020 <__NVIC_GetPriorityGrouping>
 80011d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	6978      	ldr	r0, [r7, #20]
 80011d8:	f7ff ff78 	bl	80010cc <NVIC_EncodePriority>
 80011dc:	4602      	mov	r2, r0
 80011de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff47 	bl	8001078 <__NVIC_SetPriority>
}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff1b 	bl	800103c <__NVIC_EnableIRQ>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001212:	f7ff ff8f 	bl	8001134 <__NVIC_SystemReset>

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ff9e 	bl	8001160 <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800123c:	f7ff fe9c 	bl	8000f78 <HAL_GetTick>
 8001240:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d008      	beq.n	8001260 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e052      	b.n	8001306 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0216 	bic.w	r2, r2, #22
 800126e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	695a      	ldr	r2, [r3, #20]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800127e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	2b00      	cmp	r3, #0
 8001286:	d103      	bne.n	8001290 <HAL_DMA_Abort+0x62>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800128c:	2b00      	cmp	r3, #0
 800128e:	d007      	beq.n	80012a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0208 	bic.w	r2, r2, #8
 800129e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0201 	bic.w	r2, r2, #1
 80012ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012b0:	e013      	b.n	80012da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012b2:	f7ff fe61 	bl	8000f78 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b05      	cmp	r3, #5
 80012be:	d90c      	bls.n	80012da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2220      	movs	r2, #32
 80012c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2203      	movs	r2, #3
 80012ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e015      	b.n	8001306 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1e4      	bne.n	80012b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ec:	223f      	movs	r2, #63	; 0x3f
 80012ee:	409a      	lsls	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d004      	beq.n	800132c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2280      	movs	r2, #128	; 0x80
 8001326:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e00c      	b.n	8001346 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2205      	movs	r2, #5
 8001330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0201 	bic.w	r2, r2, #1
 8001342:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <HAL_FLASH_Program+0xa0>)
 8001368:	7e1b      	ldrb	r3, [r3, #24]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d101      	bne.n	8001372 <HAL_FLASH_Program+0x1e>
 800136e:	2302      	movs	r3, #2
 8001370:	e03b      	b.n	80013ea <HAL_FLASH_Program+0x96>
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <HAL_FLASH_Program+0xa0>)
 8001374:	2201      	movs	r2, #1
 8001376:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001378:	f24c 3050 	movw	r0, #50000	; 0xc350
 800137c:	f000 f860 	bl	8001440 <FLASH_WaitForLastOperation>
 8001380:	4603      	mov	r3, r0
 8001382:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001384:	7dfb      	ldrb	r3, [r7, #23]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d12b      	bne.n	80013e2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d105      	bne.n	800139c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001390:	783b      	ldrb	r3, [r7, #0]
 8001392:	4619      	mov	r1, r3
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f000 f90b 	bl	80015b0 <FLASH_Program_Byte>
 800139a:	e016      	b.n	80013ca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d105      	bne.n	80013ae <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80013a2:	883b      	ldrh	r3, [r7, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	68b8      	ldr	r0, [r7, #8]
 80013a8:	f000 f8de 	bl	8001568 <FLASH_Program_HalfWord>
 80013ac:	e00d      	b.n	80013ca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d105      	bne.n	80013c0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	4619      	mov	r1, r3
 80013b8:	68b8      	ldr	r0, [r7, #8]
 80013ba:	f000 f8b3 	bl	8001524 <FLASH_Program_Word>
 80013be:	e004      	b.n	80013ca <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80013c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013c4:	68b8      	ldr	r0, [r7, #8]
 80013c6:	f000 f87b 	bl	80014c0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013ce:	f000 f837 	bl	8001440 <FLASH_WaitForLastOperation>
 80013d2:	4603      	mov	r3, r0
 80013d4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_FLASH_Program+0xa4>)
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_FLASH_Program+0xa4>)
 80013dc:	f023 0301 	bic.w	r3, r3, #1
 80013e0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <HAL_FLASH_Program+0xa0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80013e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000100 	.word	0x20000100
 80013f8:	40023c00 	.word	0x40023c00

080013fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_FLASH_Unlock+0x38>)
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	2b00      	cmp	r3, #0
 800140c:	da0b      	bge.n	8001426 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_FLASH_Unlock+0x38>)
 8001410:	4a09      	ldr	r2, [pc, #36]	; (8001438 <HAL_FLASH_Unlock+0x3c>)
 8001412:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <HAL_FLASH_Unlock+0x38>)
 8001416:	4a09      	ldr	r2, [pc, #36]	; (800143c <HAL_FLASH_Unlock+0x40>)
 8001418:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_FLASH_Unlock+0x38>)
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	2b00      	cmp	r3, #0
 8001420:	da01      	bge.n	8001426 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001426:	79fb      	ldrb	r3, [r7, #7]
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	40023c00 	.word	0x40023c00
 8001438:	45670123 	.word	0x45670123
 800143c:	cdef89ab 	.word	0xcdef89ab

08001440 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <FLASH_WaitForLastOperation+0x78>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001452:	f7ff fd91 	bl	8000f78 <HAL_GetTick>
 8001456:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001458:	e010      	b.n	800147c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001460:	d00c      	beq.n	800147c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d007      	beq.n	8001478 <FLASH_WaitForLastOperation+0x38>
 8001468:	f7ff fd86 	bl	8000f78 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	d201      	bcs.n	800147c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e019      	b.n	80014b0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <FLASH_WaitForLastOperation+0x7c>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1e8      	bne.n	800145a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <FLASH_WaitForLastOperation+0x7c>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <FLASH_WaitForLastOperation+0x7c>)
 8001496:	2201      	movs	r2, #1
 8001498:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <FLASH_WaitForLastOperation+0x7c>)
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80014a6:	f000 f8a5 	bl	80015f4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
  
}  
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000100 	.word	0x20000100
 80014bc:	40023c00 	.word	0x40023c00

080014c0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <FLASH_Program_DoubleWord+0x60>)
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	4a13      	ldr	r2, [pc, #76]	; (8001520 <FLASH_Program_DoubleWord+0x60>)
 80014d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <FLASH_Program_DoubleWord+0x60>)
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	4a10      	ldr	r2, [pc, #64]	; (8001520 <FLASH_Program_DoubleWord+0x60>)
 80014de:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80014e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <FLASH_Program_DoubleWord+0x60>)
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <FLASH_Program_DoubleWord+0x60>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80014f6:	f3bf 8f6f 	isb	sy
}
 80014fa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80014fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	000a      	movs	r2, r1
 800150a:	2300      	movs	r3, #0
 800150c:	68f9      	ldr	r1, [r7, #12]
 800150e:	3104      	adds	r1, #4
 8001510:	4613      	mov	r3, r2
 8001512:	600b      	str	r3, [r1, #0]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	40023c00 	.word	0x40023c00

08001524 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800152e:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <FLASH_Program_Word+0x40>)
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	4a0c      	ldr	r2, [pc, #48]	; (8001564 <FLASH_Program_Word+0x40>)
 8001534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001538:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <FLASH_Program_Word+0x40>)
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	4a09      	ldr	r2, [pc, #36]	; (8001564 <FLASH_Program_Word+0x40>)
 8001540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001544:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <FLASH_Program_Word+0x40>)
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	4a06      	ldr	r2, [pc, #24]	; (8001564 <FLASH_Program_Word+0x40>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	601a      	str	r2, [r3, #0]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40023c00 	.word	0x40023c00

08001568 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <FLASH_Program_HalfWord+0x44>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <FLASH_Program_HalfWord+0x44>)
 800157a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800157e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <FLASH_Program_HalfWord+0x44>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	4a09      	ldr	r2, [pc, #36]	; (80015ac <FLASH_Program_HalfWord+0x44>)
 8001586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <FLASH_Program_HalfWord+0x44>)
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	4a06      	ldr	r2, [pc, #24]	; (80015ac <FLASH_Program_HalfWord+0x44>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	801a      	strh	r2, [r3, #0]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40023c00 	.word	0x40023c00

080015b0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <FLASH_Program_Byte+0x40>)
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <FLASH_Program_Byte+0x40>)
 80015c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <FLASH_Program_Byte+0x40>)
 80015ca:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <FLASH_Program_Byte+0x40>)
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <FLASH_Program_Byte+0x40>)
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <FLASH_Program_Byte+0x40>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	78fa      	ldrb	r2, [r7, #3]
 80015e0:	701a      	strb	r2, [r3, #0]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40023c00 	.word	0x40023c00

080015f4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80015f8:	4b27      	ldr	r3, [pc, #156]	; (8001698 <FLASH_SetErrorCode+0xa4>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	f003 0310 	and.w	r3, r3, #16
 8001600:	2b00      	cmp	r3, #0
 8001602:	d008      	beq.n	8001616 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001604:	4b25      	ldr	r3, [pc, #148]	; (800169c <FLASH_SetErrorCode+0xa8>)
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	f043 0310 	orr.w	r3, r3, #16
 800160c:	4a23      	ldr	r2, [pc, #140]	; (800169c <FLASH_SetErrorCode+0xa8>)
 800160e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001610:	4b21      	ldr	r3, [pc, #132]	; (8001698 <FLASH_SetErrorCode+0xa4>)
 8001612:	2210      	movs	r2, #16
 8001614:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <FLASH_SetErrorCode+0xa4>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f003 0320 	and.w	r3, r3, #32
 800161e:	2b00      	cmp	r3, #0
 8001620:	d008      	beq.n	8001634 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001622:	4b1e      	ldr	r3, [pc, #120]	; (800169c <FLASH_SetErrorCode+0xa8>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	4a1c      	ldr	r2, [pc, #112]	; (800169c <FLASH_SetErrorCode+0xa8>)
 800162c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <FLASH_SetErrorCode+0xa4>)
 8001630:	2220      	movs	r2, #32
 8001632:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <FLASH_SetErrorCode+0xa4>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <FLASH_SetErrorCode+0xa8>)
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	4a14      	ldr	r2, [pc, #80]	; (800169c <FLASH_SetErrorCode+0xa8>)
 800164a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <FLASH_SetErrorCode+0xa4>)
 800164e:	2240      	movs	r2, #64	; 0x40
 8001650:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <FLASH_SetErrorCode+0xa4>)
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165a:	2b00      	cmp	r3, #0
 800165c:	d008      	beq.n	8001670 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <FLASH_SetErrorCode+0xa8>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	4a0d      	ldr	r2, [pc, #52]	; (800169c <FLASH_SetErrorCode+0xa8>)
 8001668:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <FLASH_SetErrorCode+0xa4>)
 800166c:	2280      	movs	r2, #128	; 0x80
 800166e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <FLASH_SetErrorCode+0xa4>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <FLASH_SetErrorCode+0xa8>)
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	f043 0320 	orr.w	r3, r3, #32
 8001684:	4a05      	ldr	r2, [pc, #20]	; (800169c <FLASH_SetErrorCode+0xa8>)
 8001686:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <FLASH_SetErrorCode+0xa4>)
 800168a:	2202      	movs	r2, #2
 800168c:	60da      	str	r2, [r3, #12]
  }
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40023c00 	.word	0x40023c00
 800169c:	20000100 	.word	0x20000100

080016a0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	e010      	b.n	80016de <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d103      	bne.n	80016ca <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80016c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	e009      	b.n	80016de <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d103      	bne.n	80016d8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80016d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	e002      	b.n	80016de <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80016d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016dc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <FLASH_Erase_Sector+0x8c>)
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	4a12      	ldr	r2, [pc, #72]	; (800172c <FLASH_Erase_Sector+0x8c>)
 80016e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <FLASH_Erase_Sector+0x8c>)
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	490f      	ldr	r1, [pc, #60]	; (800172c <FLASH_Erase_Sector+0x8c>)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <FLASH_Erase_Sector+0x8c>)
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	4a0c      	ldr	r2, [pc, #48]	; (800172c <FLASH_Erase_Sector+0x8c>)
 80016fc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001700:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <FLASH_Erase_Sector+0x8c>)
 8001704:	691a      	ldr	r2, [r3, #16]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4313      	orrs	r3, r2
 800170c:	4a07      	ldr	r2, [pc, #28]	; (800172c <FLASH_Erase_Sector+0x8c>)
 800170e:	f043 0302 	orr.w	r3, r3, #2
 8001712:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <FLASH_Erase_Sector+0x8c>)
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <FLASH_Erase_Sector+0x8c>)
 800171a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171e:	6113      	str	r3, [r2, #16]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40023c00 	.word	0x40023c00

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	e16b      	b.n	8001a24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800174c:	2201      	movs	r2, #1
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	429a      	cmp	r2, r3
 8001766:	f040 815a 	bne.w	8001a1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b01      	cmp	r3, #1
 8001774:	d005      	beq.n	8001782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177e:	2b02      	cmp	r3, #2
 8001780:	d130      	bne.n	80017e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b8:	2201      	movs	r2, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	f003 0201 	and.w	r2, r3, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d017      	beq.n	8001820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d123      	bne.n	8001874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	08da      	lsrs	r2, r3, #3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3208      	adds	r2, #8
 8001834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	220f      	movs	r2, #15
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	08da      	lsrs	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3208      	adds	r2, #8
 800186e:	69b9      	ldr	r1, [r7, #24]
 8001870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0203 	and.w	r2, r3, #3
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80b4 	beq.w	8001a1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b60      	ldr	r3, [pc, #384]	; (8001a3c <HAL_GPIO_Init+0x30c>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	4a5f      	ldr	r2, [pc, #380]	; (8001a3c <HAL_GPIO_Init+0x30c>)
 80018c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c4:	6453      	str	r3, [r2, #68]	; 0x44
 80018c6:	4b5d      	ldr	r3, [pc, #372]	; (8001a3c <HAL_GPIO_Init+0x30c>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018d2:	4a5b      	ldr	r2, [pc, #364]	; (8001a40 <HAL_GPIO_Init+0x310>)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a52      	ldr	r2, [pc, #328]	; (8001a44 <HAL_GPIO_Init+0x314>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d02b      	beq.n	8001956 <HAL_GPIO_Init+0x226>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a51      	ldr	r2, [pc, #324]	; (8001a48 <HAL_GPIO_Init+0x318>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d025      	beq.n	8001952 <HAL_GPIO_Init+0x222>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a50      	ldr	r2, [pc, #320]	; (8001a4c <HAL_GPIO_Init+0x31c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d01f      	beq.n	800194e <HAL_GPIO_Init+0x21e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4f      	ldr	r2, [pc, #316]	; (8001a50 <HAL_GPIO_Init+0x320>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d019      	beq.n	800194a <HAL_GPIO_Init+0x21a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4e      	ldr	r2, [pc, #312]	; (8001a54 <HAL_GPIO_Init+0x324>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_GPIO_Init+0x216>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4d      	ldr	r2, [pc, #308]	; (8001a58 <HAL_GPIO_Init+0x328>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d00d      	beq.n	8001942 <HAL_GPIO_Init+0x212>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4c      	ldr	r2, [pc, #304]	; (8001a5c <HAL_GPIO_Init+0x32c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d007      	beq.n	800193e <HAL_GPIO_Init+0x20e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4b      	ldr	r2, [pc, #300]	; (8001a60 <HAL_GPIO_Init+0x330>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d101      	bne.n	800193a <HAL_GPIO_Init+0x20a>
 8001936:	2307      	movs	r3, #7
 8001938:	e00e      	b.n	8001958 <HAL_GPIO_Init+0x228>
 800193a:	2308      	movs	r3, #8
 800193c:	e00c      	b.n	8001958 <HAL_GPIO_Init+0x228>
 800193e:	2306      	movs	r3, #6
 8001940:	e00a      	b.n	8001958 <HAL_GPIO_Init+0x228>
 8001942:	2305      	movs	r3, #5
 8001944:	e008      	b.n	8001958 <HAL_GPIO_Init+0x228>
 8001946:	2304      	movs	r3, #4
 8001948:	e006      	b.n	8001958 <HAL_GPIO_Init+0x228>
 800194a:	2303      	movs	r3, #3
 800194c:	e004      	b.n	8001958 <HAL_GPIO_Init+0x228>
 800194e:	2302      	movs	r3, #2
 8001950:	e002      	b.n	8001958 <HAL_GPIO_Init+0x228>
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <HAL_GPIO_Init+0x228>
 8001956:	2300      	movs	r3, #0
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	f002 0203 	and.w	r2, r2, #3
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	4093      	lsls	r3, r2
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001968:	4935      	ldr	r1, [pc, #212]	; (8001a40 <HAL_GPIO_Init+0x310>)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	3302      	adds	r3, #2
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001976:	4b3b      	ldr	r3, [pc, #236]	; (8001a64 <HAL_GPIO_Init+0x334>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800199a:	4a32      	ldr	r2, [pc, #200]	; (8001a64 <HAL_GPIO_Init+0x334>)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a0:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <HAL_GPIO_Init+0x334>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c4:	4a27      	ldr	r2, [pc, #156]	; (8001a64 <HAL_GPIO_Init+0x334>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <HAL_GPIO_Init+0x334>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ee:	4a1d      	ldr	r2, [pc, #116]	; (8001a64 <HAL_GPIO_Init+0x334>)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_GPIO_Init+0x334>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a18:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <HAL_GPIO_Init+0x334>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3301      	adds	r3, #1
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	2b0f      	cmp	r3, #15
 8001a28:	f67f ae90 	bls.w	800174c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40013800 	.word	0x40013800
 8001a44:	40020000 	.word	0x40020000
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40020800 	.word	0x40020800
 8001a50:	40020c00 	.word	0x40020c00
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40021400 	.word	0x40021400
 8001a5c:	40021800 	.word	0x40021800
 8001a60:	40021c00 	.word	0x40021c00
 8001a64:	40013c00 	.word	0x40013c00

08001a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	887b      	ldrh	r3, [r7, #2]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e001      	b.n	8001a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa8:	787b      	ldrb	r3, [r7, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ab4:	e003      	b.n	8001abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	041a      	lsls	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	619a      	str	r2, [r3, #24]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001adc:	887a      	ldrh	r2, [r7, #2]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	041a      	lsls	r2, r3, #16
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	400b      	ands	r3, r1
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	619a      	str	r2, [r3, #24]
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e267      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d075      	beq.n	8001c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b1e:	4b88      	ldr	r3, [pc, #544]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d00c      	beq.n	8001b44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b2a:	4b85      	ldr	r3, [pc, #532]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d112      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b36:	4b82      	ldr	r3, [pc, #520]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b42:	d10b      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	4b7e      	ldr	r3, [pc, #504]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d05b      	beq.n	8001c08 <HAL_RCC_OscConfig+0x108>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d157      	bne.n	8001c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e242      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b64:	d106      	bne.n	8001b74 <HAL_RCC_OscConfig+0x74>
 8001b66:	4b76      	ldr	r3, [pc, #472]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a75      	ldr	r2, [pc, #468]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e01d      	b.n	8001bb0 <HAL_RCC_OscConfig+0xb0>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x98>
 8001b7e:	4b70      	ldr	r3, [pc, #448]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a6f      	ldr	r2, [pc, #444]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b6d      	ldr	r3, [pc, #436]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a6c      	ldr	r2, [pc, #432]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e00b      	b.n	8001bb0 <HAL_RCC_OscConfig+0xb0>
 8001b98:	4b69      	ldr	r3, [pc, #420]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a68      	ldr	r2, [pc, #416]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b66      	ldr	r3, [pc, #408]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a65      	ldr	r2, [pc, #404]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d013      	beq.n	8001be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff f9de 	bl	8000f78 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff f9da 	bl	8000f78 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e207      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	4b5b      	ldr	r3, [pc, #364]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xc0>
 8001bde:	e014      	b.n	8001c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff f9ca 	bl	8000f78 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff f9c6 	bl	8000f78 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1f3      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	4b51      	ldr	r3, [pc, #324]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0xe8>
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d063      	beq.n	8001cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c16:	4b4a      	ldr	r3, [pc, #296]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c22:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d11c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c2e:	4b44      	ldr	r3, [pc, #272]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d116      	bne.n	8001c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3a:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_RCC_OscConfig+0x152>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e1c7      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c52:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4937      	ldr	r1, [pc, #220]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	e03a      	b.n	8001cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d020      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c70:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <HAL_RCC_OscConfig+0x244>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7ff f97f 	bl	8000f78 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff f97b 	bl	8000f78 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e1a8      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9c:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4925      	ldr	r1, [pc, #148]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
 8001cb0:	e015      	b.n	8001cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb2:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <HAL_RCC_OscConfig+0x244>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff f95e 	bl	8000f78 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc0:	f7ff f95a 	bl	8000f78 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e187      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d036      	beq.n	8001d58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d016      	beq.n	8001d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_RCC_OscConfig+0x248>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7ff f93e 	bl	8000f78 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d00:	f7ff f93a 	bl	8000f78 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e167      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x200>
 8001d1e:	e01b      	b.n	8001d58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_OscConfig+0x248>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7ff f927 	bl	8000f78 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	e00e      	b.n	8001d4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2e:	f7ff f923 	bl	8000f78 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d907      	bls.n	8001d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e150      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
 8001d40:	40023800 	.word	0x40023800
 8001d44:	42470000 	.word	0x42470000
 8001d48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4c:	4b88      	ldr	r3, [pc, #544]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1ea      	bne.n	8001d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 8097 	beq.w	8001e94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6a:	4b81      	ldr	r3, [pc, #516]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10f      	bne.n	8001d96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	4b7d      	ldr	r3, [pc, #500]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a7c      	ldr	r2, [pc, #496]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b7a      	ldr	r3, [pc, #488]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d92:	2301      	movs	r3, #1
 8001d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d96:	4b77      	ldr	r3, [pc, #476]	; (8001f74 <HAL_RCC_OscConfig+0x474>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d118      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da2:	4b74      	ldr	r3, [pc, #464]	; (8001f74 <HAL_RCC_OscConfig+0x474>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a73      	ldr	r2, [pc, #460]	; (8001f74 <HAL_RCC_OscConfig+0x474>)
 8001da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dae:	f7ff f8e3 	bl	8000f78 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db6:	f7ff f8df 	bl	8000f78 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e10c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <HAL_RCC_OscConfig+0x474>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d106      	bne.n	8001dea <HAL_RCC_OscConfig+0x2ea>
 8001ddc:	4b64      	ldr	r3, [pc, #400]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de0:	4a63      	ldr	r2, [pc, #396]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6713      	str	r3, [r2, #112]	; 0x70
 8001de8:	e01c      	b.n	8001e24 <HAL_RCC_OscConfig+0x324>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x30c>
 8001df2:	4b5f      	ldr	r3, [pc, #380]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	4a5e      	ldr	r2, [pc, #376]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfe:	4b5c      	ldr	r3, [pc, #368]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e02:	4a5b      	ldr	r2, [pc, #364]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0a:	e00b      	b.n	8001e24 <HAL_RCC_OscConfig+0x324>
 8001e0c:	4b58      	ldr	r3, [pc, #352]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e10:	4a57      	ldr	r2, [pc, #348]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e12:	f023 0301 	bic.w	r3, r3, #1
 8001e16:	6713      	str	r3, [r2, #112]	; 0x70
 8001e18:	4b55      	ldr	r3, [pc, #340]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	4a54      	ldr	r2, [pc, #336]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e1e:	f023 0304 	bic.w	r3, r3, #4
 8001e22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d015      	beq.n	8001e58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2c:	f7ff f8a4 	bl	8000f78 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e34:	f7ff f8a0 	bl	8000f78 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e0cb      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4a:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0ee      	beq.n	8001e34 <HAL_RCC_OscConfig+0x334>
 8001e56:	e014      	b.n	8001e82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7ff f88e 	bl	8000f78 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e60:	f7ff f88a 	bl	8000f78 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e0b5      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e76:	4b3e      	ldr	r3, [pc, #248]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1ee      	bne.n	8001e60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d105      	bne.n	8001e94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e88:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	4a38      	ldr	r2, [pc, #224]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80a1 	beq.w	8001fe0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e9e:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d05c      	beq.n	8001f64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d141      	bne.n	8001f36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_RCC_OscConfig+0x478>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f85e 	bl	8000f78 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7ff f85a 	bl	8000f78 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e087      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed2:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	019b      	lsls	r3, r3, #6
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	085b      	lsrs	r3, r3, #1
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	041b      	lsls	r3, r3, #16
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	061b      	lsls	r3, r3, #24
 8001f02:	491b      	ldr	r1, [pc, #108]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_RCC_OscConfig+0x478>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7ff f833 	bl	8000f78 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f16:	f7ff f82f 	bl	8000f78 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e05c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x416>
 8001f34:	e054      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_RCC_OscConfig+0x478>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff f81c 	bl	8000f78 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f44:	f7ff f818 	bl	8000f78 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e045      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x444>
 8001f62:	e03d      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e038      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40007000 	.word	0x40007000
 8001f78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCC_OscConfig+0x4ec>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d028      	beq.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d121      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d11a      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fac:	4013      	ands	r3, r2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d111      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800

08001ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0cc      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002004:	4b68      	ldr	r3, [pc, #416]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d90c      	bls.n	800202c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b65      	ldr	r3, [pc, #404]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b63      	ldr	r3, [pc, #396]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0b8      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d020      	beq.n	800207a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002044:	4b59      	ldr	r3, [pc, #356]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a58      	ldr	r2, [pc, #352]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800204e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800205c:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a52      	ldr	r2, [pc, #328]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4b50      	ldr	r3, [pc, #320]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	494d      	ldr	r1, [pc, #308]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d044      	beq.n	8002110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b47      	ldr	r3, [pc, #284]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d119      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e07f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d003      	beq.n	80020ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ae:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e06f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e067      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f023 0203 	bic.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4934      	ldr	r1, [pc, #208]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e0:	f7fe ff4a 	bl	8000f78 <HAL_GetTick>
 80020e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f7fe ff46 	bl	8000f78 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e04f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 020c 	and.w	r2, r3, #12
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	429a      	cmp	r2, r3
 800210e:	d1eb      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d20c      	bcs.n	8002138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e032      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4916      	ldr	r1, [pc, #88]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	490e      	ldr	r1, [pc, #56]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002176:	f000 f821 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 800217a:	4602      	mov	r2, r0
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	490a      	ldr	r1, [pc, #40]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	5ccb      	ldrb	r3, [r1, r3]
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe feaa 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023c00 	.word	0x40023c00
 80021ac:	40023800 	.word	0x40023800
 80021b0:	080057f0 	.word	0x080057f0
 80021b4:	20000000 	.word	0x20000000
 80021b8:	20000004 	.word	0x20000004

080021bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c0:	b090      	sub	sp, #64	; 0x40
 80021c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	637b      	str	r3, [r7, #52]	; 0x34
 80021c8:	2300      	movs	r3, #0
 80021ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021cc:	2300      	movs	r3, #0
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d4:	4b59      	ldr	r3, [pc, #356]	; (800233c <HAL_RCC_GetSysClockFreq+0x180>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d00d      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x40>
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	f200 80a1 	bhi.w	8002328 <HAL_RCC_GetSysClockFreq+0x16c>
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x34>
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ee:	e09b      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021f0:	4b53      	ldr	r3, [pc, #332]	; (8002340 <HAL_RCC_GetSysClockFreq+0x184>)
 80021f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80021f4:	e09b      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021f6:	4b53      	ldr	r3, [pc, #332]	; (8002344 <HAL_RCC_GetSysClockFreq+0x188>)
 80021f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021fa:	e098      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021fc:	4b4f      	ldr	r3, [pc, #316]	; (800233c <HAL_RCC_GetSysClockFreq+0x180>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002204:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002206:	4b4d      	ldr	r3, [pc, #308]	; (800233c <HAL_RCC_GetSysClockFreq+0x180>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d028      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002212:	4b4a      	ldr	r3, [pc, #296]	; (800233c <HAL_RCC_GetSysClockFreq+0x180>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	099b      	lsrs	r3, r3, #6
 8002218:	2200      	movs	r2, #0
 800221a:	623b      	str	r3, [r7, #32]
 800221c:	627a      	str	r2, [r7, #36]	; 0x24
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002224:	2100      	movs	r1, #0
 8002226:	4b47      	ldr	r3, [pc, #284]	; (8002344 <HAL_RCC_GetSysClockFreq+0x188>)
 8002228:	fb03 f201 	mul.w	r2, r3, r1
 800222c:	2300      	movs	r3, #0
 800222e:	fb00 f303 	mul.w	r3, r0, r3
 8002232:	4413      	add	r3, r2
 8002234:	4a43      	ldr	r2, [pc, #268]	; (8002344 <HAL_RCC_GetSysClockFreq+0x188>)
 8002236:	fba0 1202 	umull	r1, r2, r0, r2
 800223a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800223c:	460a      	mov	r2, r1
 800223e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002242:	4413      	add	r3, r2
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002248:	2200      	movs	r2, #0
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	61fa      	str	r2, [r7, #28]
 800224e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002252:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002256:	f7fd ffb7 	bl	80001c8 <__aeabi_uldivmod>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4613      	mov	r3, r2
 8002260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002262:	e053      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002264:	4b35      	ldr	r3, [pc, #212]	; (800233c <HAL_RCC_GetSysClockFreq+0x180>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	099b      	lsrs	r3, r3, #6
 800226a:	2200      	movs	r2, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	617a      	str	r2, [r7, #20]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002276:	f04f 0b00 	mov.w	fp, #0
 800227a:	4652      	mov	r2, sl
 800227c:	465b      	mov	r3, fp
 800227e:	f04f 0000 	mov.w	r0, #0
 8002282:	f04f 0100 	mov.w	r1, #0
 8002286:	0159      	lsls	r1, r3, #5
 8002288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800228c:	0150      	lsls	r0, r2, #5
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	ebb2 080a 	subs.w	r8, r2, sl
 8002296:	eb63 090b 	sbc.w	r9, r3, fp
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022ae:	ebb2 0408 	subs.w	r4, r2, r8
 80022b2:	eb63 0509 	sbc.w	r5, r3, r9
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	00eb      	lsls	r3, r5, #3
 80022c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022c4:	00e2      	lsls	r2, r4, #3
 80022c6:	4614      	mov	r4, r2
 80022c8:	461d      	mov	r5, r3
 80022ca:	eb14 030a 	adds.w	r3, r4, sl
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	eb45 030b 	adc.w	r3, r5, fp
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022e2:	4629      	mov	r1, r5
 80022e4:	028b      	lsls	r3, r1, #10
 80022e6:	4621      	mov	r1, r4
 80022e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022ec:	4621      	mov	r1, r4
 80022ee:	028a      	lsls	r2, r1, #10
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f6:	2200      	movs	r2, #0
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	60fa      	str	r2, [r7, #12]
 80022fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002300:	f7fd ff62 	bl	80001c8 <__aeabi_uldivmod>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4613      	mov	r3, r2
 800230a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_RCC_GetSysClockFreq+0x180>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	3301      	adds	r3, #1
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800231c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002326:	e002      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_RCC_GetSysClockFreq+0x184>)
 800232a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800232c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002330:	4618      	mov	r0, r3
 8002332:	3740      	adds	r7, #64	; 0x40
 8002334:	46bd      	mov	sp, r7
 8002336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800
 8002340:	00f42400 	.word	0x00f42400
 8002344:	017d7840 	.word	0x017d7840

08002348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_RCC_GetHCLKFreq+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000000 	.word	0x20000000

08002360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002364:	f7ff fff0 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 8002368:	4602      	mov	r2, r0
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	0a9b      	lsrs	r3, r3, #10
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	4903      	ldr	r1, [pc, #12]	; (8002384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002376:	5ccb      	ldrb	r3, [r1, r3]
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800237c:	4618      	mov	r0, r3
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800
 8002384:	08005800 	.word	0x08005800

08002388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800238c:	f7ff ffdc 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	0b5b      	lsrs	r3, r3, #13
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	4903      	ldr	r1, [pc, #12]	; (80023ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800239e:	5ccb      	ldrb	r3, [r1, r3]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40023800 	.word	0x40023800
 80023ac:	08005800 	.word	0x08005800

080023b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e022      	b.n	8002408 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d105      	bne.n	80023da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7fe fc3f 	bl	8000c58 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2203      	movs	r2, #3
 80023de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f814 	bl	8002410 <HAL_SD_InitCard>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00a      	b.n	8002408 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002410:	b5b0      	push	{r4, r5, r7, lr}
 8002412:	b08e      	sub	sp, #56	; 0x38
 8002414:	af04      	add	r7, sp, #16
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800242c:	2376      	movs	r3, #118	; 0x76
 800242e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681d      	ldr	r5, [r3, #0]
 8002434:	466c      	mov	r4, sp
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800243e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002442:	f107 0308 	add.w	r3, r7, #8
 8002446:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002448:	4628      	mov	r0, r5
 800244a:	f002 f9f1 	bl	8004830 <SDIO_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e04f      	b.n	8002500 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002460:	4b29      	ldr	r3, [pc, #164]	; (8002508 <HAL_SD_InitCard+0xf8>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f002 fa29 	bl	80048c2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <HAL_SD_InitCard+0xf8>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002476:	2002      	movs	r0, #2
 8002478:	f7fe fd8a 	bl	8000f90 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 ff03 	bl	8003288 <SD_PowerON>
 8002482:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e02e      	b.n	8002500 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fe22 	bl	80030ec <SD_InitCard>
 80024a8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00b      	beq.n	80024c8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e01b      	b.n	8002500 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024d0:	4618      	mov	r0, r3
 80024d2:	f002 fa88 	bl	80049e6 <SDMMC_CmdBlockLength>
 80024d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00f      	beq.n	80024fe <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a0a      	ldr	r2, [pc, #40]	; (800250c <HAL_SD_InitCard+0xfc>)
 80024e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3728      	adds	r7, #40	; 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bdb0      	pop	{r4, r5, r7, pc}
 8002508:	422580a0 	.word	0x422580a0
 800250c:	004005ff 	.word	0x004005ff

08002510 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b092      	sub	sp, #72	; 0x48
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800251e:	f7fe fd2b 	bl	8000f78 <HAL_GetTick>
 8002522:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d107      	bne.n	8002542 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002536:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e1bd      	b.n	80028be <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	f040 81b0 	bne.w	80028b0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	441a      	add	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	429a      	cmp	r2, r3
 8002562:	d907      	bls.n	8002574 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e1a4      	b.n	80028be <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2203      	movs	r2, #3
 8002578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2200      	movs	r2, #0
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002588:	2b01      	cmp	r3, #1
 800258a:	d002      	beq.n	8002592 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258e:	025b      	lsls	r3, r3, #9
 8002590:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	025b      	lsls	r3, r3, #9
 800259c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800259e:	2390      	movs	r3, #144	; 0x90
 80025a0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80025a2:	2302      	movs	r3, #2
 80025a4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80025aa:	2301      	movs	r3, #1
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f107 0214 	add.w	r2, r7, #20
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f002 f9e8 	bl	800498e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d90a      	bls.n	80025da <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2202      	movs	r2, #2
 80025c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025d0:	4618      	mov	r0, r3
 80025d2:	f002 fa4c 	bl	8004a6e <SDMMC_CmdReadMultiBlock>
 80025d6:	6478      	str	r0, [r7, #68]	; 0x44
 80025d8:	e009      	b.n	80025ee <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 fa1f 	bl	8004a2a <SDMMC_CmdReadSingleBlock>
 80025ec:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80025ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d012      	beq.n	800261a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a7a      	ldr	r2, [pc, #488]	; (80027e4 <HAL_SD_ReadBlocks+0x2d4>)
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002602:	431a      	orrs	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e151      	b.n	80028be <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800261e:	e061      	b.n	80026e4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d03c      	beq.n	80026a8 <HAL_SD_ReadBlocks+0x198>
 800262e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002630:	2b00      	cmp	r3, #0
 8002632:	d039      	beq.n	80026a8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002634:	2300      	movs	r3, #0
 8002636:	643b      	str	r3, [r7, #64]	; 0x40
 8002638:	e033      	b.n	80026a2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f002 f921 	bl	8004886 <SDIO_ReadFIFO>
 8002644:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	b2da      	uxtb	r2, r3
 800264a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800264e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002650:	3301      	adds	r3, #1
 8002652:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002656:	3b01      	subs	r3, #1
 8002658:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	b2da      	uxtb	r2, r3
 8002660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002662:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002666:	3301      	adds	r3, #1
 8002668:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800266a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800266c:	3b01      	subs	r3, #1
 800266e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002672:	0c1b      	lsrs	r3, r3, #16
 8002674:	b2da      	uxtb	r2, r3
 8002676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002678:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800267a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267c:	3301      	adds	r3, #1
 800267e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002682:	3b01      	subs	r3, #1
 8002684:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	0e1b      	lsrs	r3, r3, #24
 800268a:	b2da      	uxtb	r2, r3
 800268c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002692:	3301      	adds	r3, #1
 8002694:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002698:	3b01      	subs	r3, #1
 800269a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800269c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800269e:	3301      	adds	r3, #1
 80026a0:	643b      	str	r3, [r7, #64]	; 0x40
 80026a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a4:	2b07      	cmp	r3, #7
 80026a6:	d9c8      	bls.n	800263a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80026a8:	f7fe fc66 	bl	8000f78 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d902      	bls.n	80026be <HAL_SD_ReadBlocks+0x1ae>
 80026b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d112      	bne.n	80026e4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a48      	ldr	r2, [pc, #288]	; (80027e4 <HAL_SD_ReadBlocks+0x2d4>)
 80026c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0ec      	b.n	80028be <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ea:	f240 332a 	movw	r3, #810	; 0x32a
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d095      	beq.n	8002620 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d022      	beq.n	8002748 <HAL_SD_ReadBlocks+0x238>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d91f      	bls.n	8002748 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	2b03      	cmp	r3, #3
 800270e:	d01b      	beq.n	8002748 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f002 fa11 	bl	8004b3c <SDMMC_CmdStopTransfer>
 800271a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800271c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800271e:	2b00      	cmp	r3, #0
 8002720:	d012      	beq.n	8002748 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a2f      	ldr	r2, [pc, #188]	; (80027e4 <HAL_SD_ReadBlocks+0x2d4>)
 8002728:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800272e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002730:	431a      	orrs	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0ba      	b.n	80028be <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d012      	beq.n	800277c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a22      	ldr	r2, [pc, #136]	; (80027e4 <HAL_SD_ReadBlocks+0x2d4>)
 800275c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	f043 0208 	orr.w	r2, r3, #8
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0a0      	b.n	80028be <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d012      	beq.n	80027b0 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a15      	ldr	r2, [pc, #84]	; (80027e4 <HAL_SD_ReadBlocks+0x2d4>)
 8002790:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002796:	f043 0202 	orr.w	r2, r3, #2
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e086      	b.n	80028be <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d063      	beq.n	8002886 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a08      	ldr	r2, [pc, #32]	; (80027e4 <HAL_SD_ReadBlocks+0x2d4>)
 80027c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ca:	f043 0220 	orr.w	r2, r3, #32
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e06c      	b.n	80028be <HAL_SD_ReadBlocks+0x3ae>
 80027e4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f002 f84a 	bl	8004886 <SDIO_ReadFIFO>
 80027f2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80027f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80027fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fe:	3301      	adds	r3, #1
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002804:	3b01      	subs	r3, #1
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	b2da      	uxtb	r2, r3
 800280e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002810:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002814:	3301      	adds	r3, #1
 8002816:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281a:	3b01      	subs	r3, #1
 800281c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	0c1b      	lsrs	r3, r3, #16
 8002822:	b2da      	uxtb	r2, r3
 8002824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002826:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282a:	3301      	adds	r3, #1
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800282e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002830:	3b01      	subs	r3, #1
 8002832:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	0e1b      	lsrs	r3, r3, #24
 8002838:	b2da      	uxtb	r2, r3
 800283a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800283c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800283e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002840:	3301      	adds	r3, #1
 8002842:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002846:	3b01      	subs	r3, #1
 8002848:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800284a:	f7fe fb95 	bl	8000f78 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002856:	429a      	cmp	r2, r3
 8002858:	d902      	bls.n	8002860 <HAL_SD_ReadBlocks+0x350>
 800285a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800285c:	2b00      	cmp	r3, #0
 800285e:	d112      	bne.n	8002886 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a18      	ldr	r2, [pc, #96]	; (80028c8 <HAL_SD_ReadBlocks+0x3b8>)
 8002866:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e01b      	b.n	80028be <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <HAL_SD_ReadBlocks+0x38a>
 8002894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1a6      	bne.n	80027e8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f240 523a 	movw	r2, #1338	; 0x53a
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e006      	b.n	80028be <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
  }
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3748      	adds	r7, #72	; 0x48
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	004005ff 	.word	0x004005ff

080028cc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b092      	sub	sp, #72	; 0x48
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80028da:	f7fe fb4d 	bl	8000f78 <HAL_GetTick>
 80028de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d107      	bne.n	80028fe <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e166      	b.n	8002bcc <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b01      	cmp	r3, #1
 8002908:	f040 8159 	bne.w	8002bbe <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	441a      	add	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	429a      	cmp	r2, r3
 800291e:	d907      	bls.n	8002930 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e14d      	b.n	8002bcc <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2203      	movs	r2, #3
 8002934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2200      	movs	r2, #0
 800293e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	2b01      	cmp	r3, #1
 8002946:	d002      	beq.n	800294e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294a:	025b      	lsls	r3, r3, #9
 800294c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
 8002952:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	025b      	lsls	r3, r3, #9
 8002958:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800295a:	2390      	movs	r3, #144	; 0x90
 800295c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800295e:	2300      	movs	r3, #0
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002962:	2300      	movs	r3, #0
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002966:	2301      	movs	r3, #1
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f107 0218 	add.w	r2, r7, #24
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f002 f80a 	bl	800498e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d90a      	bls.n	8002996 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800298c:	4618      	mov	r0, r3
 800298e:	f002 f8b2 	bl	8004af6 <SDMMC_CmdWriteMultiBlock>
 8002992:	6478      	str	r0, [r7, #68]	; 0x44
 8002994:	e009      	b.n	80029aa <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2210      	movs	r2, #16
 800299a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029a2:	4618      	mov	r0, r3
 80029a4:	f002 f885 	bl	8004ab2 <SDMMC_CmdWriteSingleBlock>
 80029a8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80029aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d012      	beq.n	80029d6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a87      	ldr	r2, [pc, #540]	; (8002bd4 <HAL_SD_WriteBlocks+0x308>)
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029be:	431a      	orrs	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0fa      	b.n	8002bcc <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80029da:	e065      	b.n	8002aa8 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d040      	beq.n	8002a6c <HAL_SD_WriteBlocks+0x1a0>
 80029ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d03d      	beq.n	8002a6c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80029f0:	2300      	movs	r3, #0
 80029f2:	643b      	str	r3, [r7, #64]	; 0x40
 80029f4:	e037      	b.n	8002a66 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80029f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80029fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fe:	3301      	adds	r3, #1
 8002a00:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a04:	3b01      	subs	r3, #1
 8002a06:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	021a      	lsls	r2, r3, #8
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a16:	3301      	adds	r3, #1
 8002a18:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	041a      	lsls	r2, r3, #16
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2e:	3301      	adds	r3, #1
 8002a30:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a34:	3b01      	subs	r3, #1
 8002a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	061a      	lsls	r2, r3, #24
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a46:	3301      	adds	r3, #1
 8002a48:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f107 0214 	add.w	r2, r7, #20
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 ff20 	bl	80048a0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a62:	3301      	adds	r3, #1
 8002a64:	643b      	str	r3, [r7, #64]	; 0x40
 8002a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a68:	2b07      	cmp	r3, #7
 8002a6a:	d9c4      	bls.n	80029f6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002a6c:	f7fe fa84 	bl	8000f78 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d902      	bls.n	8002a82 <HAL_SD_WriteBlocks+0x1b6>
 8002a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d112      	bne.n	8002aa8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a53      	ldr	r2, [pc, #332]	; (8002bd4 <HAL_SD_WriteBlocks+0x308>)
 8002a88:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a90:	431a      	orrs	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e091      	b.n	8002bcc <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aae:	f240 331a 	movw	r3, #794	; 0x31a
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d091      	beq.n	80029dc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d022      	beq.n	8002b0c <HAL_SD_WriteBlocks+0x240>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d91f      	bls.n	8002b0c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d01b      	beq.n	8002b0c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f002 f82f 	bl	8004b3c <SDMMC_CmdStopTransfer>
 8002ade:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d012      	beq.n	8002b0c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a3a      	ldr	r2, [pc, #232]	; (8002bd4 <HAL_SD_WriteBlocks+0x308>)
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e05f      	b.n	8002bcc <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d012      	beq.n	8002b40 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a2d      	ldr	r2, [pc, #180]	; (8002bd4 <HAL_SD_WriteBlocks+0x308>)
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b26:	f043 0208 	orr.w	r2, r3, #8
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e045      	b.n	8002bcc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d012      	beq.n	8002b74 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a20      	ldr	r2, [pc, #128]	; (8002bd4 <HAL_SD_WriteBlocks+0x308>)
 8002b54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5a:	f043 0202 	orr.w	r2, r3, #2
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e02b      	b.n	8002bcc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d012      	beq.n	8002ba8 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <HAL_SD_WriteBlocks+0x308>)
 8002b88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	f043 0210 	orr.w	r2, r3, #16
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e011      	b.n	8002bcc <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f240 523a 	movw	r2, #1338	; 0x53a
 8002bb0:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e006      	b.n	8002bcc <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
  }
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3748      	adds	r7, #72	; 0x48
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	004005ff 	.word	0x004005ff

08002bd8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002be6:	0f9b      	lsrs	r3, r3, #30
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bf2:	0e9b      	lsrs	r3, r3, #26
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c04:	0e1b      	lsrs	r3, r3, #24
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c16:	0c1b      	lsrs	r3, r3, #16
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c22:	0a1b      	lsrs	r3, r3, #8
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c38:	0d1b      	lsrs	r3, r3, #20
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c44:	0c1b      	lsrs	r3, r3, #16
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c56:	0bdb      	lsrs	r3, r3, #15
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c68:	0b9b      	lsrs	r3, r3, #14
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c7a:	0b5b      	lsrs	r3, r3, #13
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c8c:	0b1b      	lsrs	r3, r3, #12
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d163      	bne.n	8002d70 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cac:	009a      	lsls	r2, r3, #2
 8002cae:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002cb8:	0f92      	lsrs	r2, r2, #30
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc4:	0edb      	lsrs	r3, r3, #27
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd6:	0e1b      	lsrs	r3, r3, #24
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce8:	0d5b      	lsrs	r3, r3, #21
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cfa:	0c9b      	lsrs	r3, r3, #18
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d0c:	0bdb      	lsrs	r3, r3, #15
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	7e1b      	ldrb	r3, [r3, #24]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	3302      	adds	r3, #2
 8002d30:	2201      	movs	r2, #1
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002d3a:	fb03 f202 	mul.w	r2, r3, r2
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	7a1b      	ldrb	r3, [r3, #8]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002d5c:	0a52      	lsrs	r2, r2, #9
 8002d5e:	fb03 f202 	mul.w	r2, r3, r2
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d6c:	661a      	str	r2, [r3, #96]	; 0x60
 8002d6e:	e031      	b.n	8002dd4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d11d      	bne.n	8002db4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d7c:	041b      	lsls	r3, r3, #16
 8002d7e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d86:	0c1b      	lsrs	r3, r3, #16
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	3301      	adds	r3, #1
 8002d94:	029a      	lsls	r2, r3, #10
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002da8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	661a      	str	r2, [r3, #96]	; 0x60
 8002db2:	e00f      	b.n	8002dd4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a58      	ldr	r2, [pc, #352]	; (8002f1c <HAL_SD_GetCardCSD+0x344>)
 8002dba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e09d      	b.n	8002f10 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dd8:	0b9b      	lsrs	r3, r3, #14
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dea:	09db      	lsrs	r3, r3, #7
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0c:	0fdb      	lsrs	r3, r3, #31
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e18:	0f5b      	lsrs	r3, r3, #29
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	0e9b      	lsrs	r3, r3, #26
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	0d9b      	lsrs	r3, r3, #22
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	0d5b      	lsrs	r3, r3, #21
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	0c1b      	lsrs	r3, r3, #16
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	0bdb      	lsrs	r3, r3, #15
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e92:	0b9b      	lsrs	r3, r3, #14
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	0b5b      	lsrs	r3, r3, #13
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	0b1b      	lsrs	r3, r3, #12
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	0a9b      	lsrs	r3, r3, #10
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	004005ff 	.word	0x004005ff

08002f20 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002f78:	b5b0      	push	{r4, r5, r7, lr}
 8002f7a:	b08e      	sub	sp, #56	; 0x38
 8002f7c:	af04      	add	r7, sp, #16
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d02e      	beq.n	8002ff6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9e:	d106      	bne.n	8002fae <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	639a      	str	r2, [r3, #56]	; 0x38
 8002fac:	e029      	b.n	8003002 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fb4:	d10a      	bne.n	8002fcc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fa1c 	bl	80033f4 <SD_WideBus_Enable>
 8002fbc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	639a      	str	r2, [r3, #56]	; 0x38
 8002fca:	e01a      	b.n	8003002 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10a      	bne.n	8002fe8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fa59 	bl	800348a <SD_WideBus_Disable>
 8002fd8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38
 8002fe6:	e00c      	b.n	8003002 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ff4:	e005      	b.n	8003002 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a26      	ldr	r2, [pc, #152]	; (80030a8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003010:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003020:	e01f      	b.n	8003062 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681d      	ldr	r5, [r3, #0]
 8003048:	466c      	mov	r4, sp
 800304a:	f107 0314 	add.w	r3, r7, #20
 800304e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003052:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003056:	f107 0308 	add.w	r3, r7, #8
 800305a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800305c:	4628      	mov	r0, r5
 800305e:	f001 fbe7 	bl	8004830 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800306a:	4618      	mov	r0, r3
 800306c:	f001 fcbb 	bl	80049e6 <SDMMC_CmdBlockLength>
 8003070:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00c      	beq.n	8003092 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800307e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800309a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3728      	adds	r7, #40	; 0x28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bdb0      	pop	{r4, r5, r7, pc}
 80030a6:	bf00      	nop
 80030a8:	004005ff 	.word	0x004005ff

080030ac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80030b8:	f107 030c 	add.w	r3, r7, #12
 80030bc:	4619      	mov	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f970 	bl	80033a4 <SD_SendStatus>
 80030c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	0a5b      	lsrs	r3, r3, #9
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80030e2:	693b      	ldr	r3, [r7, #16]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80030ec:	b5b0      	push	{r4, r5, r7, lr}
 80030ee:	b094      	sub	sp, #80	; 0x50
 80030f0:	af04      	add	r7, sp, #16
 80030f2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80030f4:	2301      	movs	r3, #1
 80030f6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f001 fbee 	bl	80048de <SDIO_GetPowerState>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003108:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800310c:	e0b8      	b.n	8003280 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	2b03      	cmp	r3, #3
 8003114:	d02f      	beq.n	8003176 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f001 fe18 	bl	8004d50 <SDMMC_CmdSendCID>
 8003120:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <SD_InitCard+0x40>
    {
      return errorstate;
 8003128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800312a:	e0a9      	b.n	8003280 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2100      	movs	r1, #0
 8003132:	4618      	mov	r0, r3
 8003134:	f001 fc18 	bl	8004968 <SDIO_GetResponse>
 8003138:	4602      	mov	r2, r0
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2104      	movs	r1, #4
 8003144:	4618      	mov	r0, r3
 8003146:	f001 fc0f 	bl	8004968 <SDIO_GetResponse>
 800314a:	4602      	mov	r2, r0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2108      	movs	r1, #8
 8003156:	4618      	mov	r0, r3
 8003158:	f001 fc06 	bl	8004968 <SDIO_GetResponse>
 800315c:	4602      	mov	r2, r0
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	210c      	movs	r1, #12
 8003168:	4618      	mov	r0, r3
 800316a:	f001 fbfd 	bl	8004968 <SDIO_GetResponse>
 800316e:	4602      	mov	r2, r0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	2b03      	cmp	r3, #3
 800317c:	d00d      	beq.n	800319a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f107 020e 	add.w	r2, r7, #14
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f001 fe1e 	bl	8004dca <SDMMC_CmdSetRelAdd>
 800318e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <SD_InitCard+0xae>
    {
      return errorstate;
 8003196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003198:	e072      	b.n	8003280 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d036      	beq.n	8003210 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80031a2:	89fb      	ldrh	r3, [r7, #14]
 80031a4:	461a      	mov	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b2:	041b      	lsls	r3, r3, #16
 80031b4:	4619      	mov	r1, r3
 80031b6:	4610      	mov	r0, r2
 80031b8:	f001 fde8 	bl	8004d8c <SDMMC_CmdSendCSD>
 80031bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80031be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80031c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c6:	e05b      	b.n	8003280 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f001 fbca 	bl	8004968 <SDIO_GetResponse>
 80031d4:	4602      	mov	r2, r0
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2104      	movs	r1, #4
 80031e0:	4618      	mov	r0, r3
 80031e2:	f001 fbc1 	bl	8004968 <SDIO_GetResponse>
 80031e6:	4602      	mov	r2, r0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2108      	movs	r1, #8
 80031f2:	4618      	mov	r0, r3
 80031f4:	f001 fbb8 	bl	8004968 <SDIO_GetResponse>
 80031f8:	4602      	mov	r2, r0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	210c      	movs	r1, #12
 8003204:	4618      	mov	r0, r3
 8003206:	f001 fbaf 	bl	8004968 <SDIO_GetResponse>
 800320a:	4602      	mov	r2, r0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2104      	movs	r1, #4
 8003216:	4618      	mov	r0, r3
 8003218:	f001 fba6 	bl	8004968 <SDIO_GetResponse>
 800321c:	4603      	mov	r3, r0
 800321e:	0d1a      	lsrs	r2, r3, #20
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003224:	f107 0310 	add.w	r3, r7, #16
 8003228:	4619      	mov	r1, r3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fcd4 	bl	8002bd8 <HAL_SD_GetCardCSD>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003236:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800323a:	e021      	b.n	8003280 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6819      	ldr	r1, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003244:	041b      	lsls	r3, r3, #16
 8003246:	2200      	movs	r2, #0
 8003248:	461c      	mov	r4, r3
 800324a:	4615      	mov	r5, r2
 800324c:	4622      	mov	r2, r4
 800324e:	462b      	mov	r3, r5
 8003250:	4608      	mov	r0, r1
 8003252:	f001 fc95 	bl	8004b80 <SDMMC_CmdSelDesel>
 8003256:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <SD_InitCard+0x176>
  {
    return errorstate;
 800325e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003260:	e00e      	b.n	8003280 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681d      	ldr	r5, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	466c      	mov	r4, sp
 800326a:	f103 0210 	add.w	r2, r3, #16
 800326e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003274:	3304      	adds	r3, #4
 8003276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003278:	4628      	mov	r0, r5
 800327a:	f001 fad9 	bl	8004830 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3740      	adds	r7, #64	; 0x40
 8003284:	46bd      	mov	sp, r7
 8003286:	bdb0      	pop	{r4, r5, r7, pc}

08003288 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f001 fc90 	bl	8004bc6 <SDMMC_CmdGoIdleState>
 80032a6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	e072      	b.n	8003398 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 fca3 	bl	8004c02 <SDMMC_CmdOperCond>
 80032bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00d      	beq.n	80032e0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f001 fc79 	bl	8004bc6 <SDMMC_CmdGoIdleState>
 80032d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d004      	beq.n	80032e6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	e05b      	b.n	8003398 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d137      	bne.n	800335e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 fca3 	bl	8004c40 <SDMMC_CmdAppCommand>
 80032fa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d02d      	beq.n	800335e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003302:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003306:	e047      	b.n	8003398 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f001 fc96 	bl	8004c40 <SDMMC_CmdAppCommand>
 8003314:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <SD_PowerON+0x98>
    {
      return errorstate;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	e03b      	b.n	8003398 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	491e      	ldr	r1, [pc, #120]	; (80033a0 <SD_PowerON+0x118>)
 8003326:	4618      	mov	r0, r3
 8003328:	f001 fcac 	bl	8004c84 <SDMMC_CmdAppOperCommand>
 800332c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003334:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003338:	e02e      	b.n	8003398 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f001 fb11 	bl	8004968 <SDIO_GetResponse>
 8003346:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	0fdb      	lsrs	r3, r3, #31
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <SD_PowerON+0xcc>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <SD_PowerON+0xce>
 8003354:	2300      	movs	r3, #0
 8003356:	613b      	str	r3, [r7, #16]

    count++;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	3301      	adds	r3, #1
 800335c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003364:	4293      	cmp	r3, r2
 8003366:	d802      	bhi.n	800336e <SD_PowerON+0xe6>
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0cc      	beq.n	8003308 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003374:	4293      	cmp	r3, r2
 8003376:	d902      	bls.n	800337e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800337c:	e00c      	b.n	8003398 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
 800338e:	e002      	b.n	8003396 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	c1100000 	.word	0xc1100000

080033a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d102      	bne.n	80033ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80033b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033b8:	e018      	b.n	80033ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c2:	041b      	lsls	r3, r3, #16
 80033c4:	4619      	mov	r1, r3
 80033c6:	4610      	mov	r0, r2
 80033c8:	f001 fd20 	bl	8004e0c <SDMMC_CmdSendStatus>
 80033cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	e009      	b.n	80033ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f001 fac2 	bl	8004968 <SDIO_GetResponse>
 80033e4:	4602      	mov	r2, r0
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80033fc:	2300      	movs	r3, #0
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	2300      	movs	r3, #0
 8003402:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2100      	movs	r1, #0
 800340a:	4618      	mov	r0, r3
 800340c:	f001 faac 	bl	8004968 <SDIO_GetResponse>
 8003410:	4603      	mov	r3, r0
 8003412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003416:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800341a:	d102      	bne.n	8003422 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800341c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003420:	e02f      	b.n	8003482 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003422:	f107 030c 	add.w	r3, r7, #12
 8003426:	4619      	mov	r1, r3
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f879 	bl	8003520 <SD_FindSCR>
 800342e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	e023      	b.n	8003482 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01c      	beq.n	800347e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344c:	041b      	lsls	r3, r3, #16
 800344e:	4619      	mov	r1, r3
 8003450:	4610      	mov	r0, r2
 8003452:	f001 fbf5 	bl	8004c40 <SDMMC_CmdAppCommand>
 8003456:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	e00f      	b.n	8003482 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2102      	movs	r1, #2
 8003468:	4618      	mov	r0, r3
 800346a:	f001 fc2e 	bl	8004cca <SDMMC_CmdBusWidth>
 800346e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	e003      	b.n	8003482 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800347a:	2300      	movs	r3, #0
 800347c:	e001      	b.n	8003482 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800347e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b086      	sub	sp, #24
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2100      	movs	r1, #0
 80034a0:	4618      	mov	r0, r3
 80034a2:	f001 fa61 	bl	8004968 <SDIO_GetResponse>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034b0:	d102      	bne.n	80034b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80034b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034b6:	e02f      	b.n	8003518 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80034b8:	f107 030c 	add.w	r3, r7, #12
 80034bc:	4619      	mov	r1, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f82e 	bl	8003520 <SD_FindSCR>
 80034c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	e023      	b.n	8003518 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01c      	beq.n	8003514 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e2:	041b      	lsls	r3, r3, #16
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f001 fbaa 	bl	8004c40 <SDMMC_CmdAppCommand>
 80034ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	e00f      	b.n	8003518 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 fbe3 	bl	8004cca <SDMMC_CmdBusWidth>
 8003504:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	e003      	b.n	8003518 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003510:	2300      	movs	r3, #0
 8003512:	e001      	b.n	8003518 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003514:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b08f      	sub	sp, #60	; 0x3c
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800352a:	f7fd fd25 	bl	8000f78 <HAL_GetTick>
 800352e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003534:	2300      	movs	r3, #0
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2108      	movs	r1, #8
 8003546:	4618      	mov	r0, r3
 8003548:	f001 fa4d 	bl	80049e6 <SDMMC_CmdBlockLength>
 800354c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003556:	e0b2      	b.n	80036be <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003560:	041b      	lsls	r3, r3, #16
 8003562:	4619      	mov	r1, r3
 8003564:	4610      	mov	r0, r2
 8003566:	f001 fb6b 	bl	8004c40 <SDMMC_CmdAppCommand>
 800356a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800356c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	e0a3      	b.n	80036be <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003576:	f04f 33ff 	mov.w	r3, #4294967295
 800357a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800357c:	2308      	movs	r3, #8
 800357e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003580:	2330      	movs	r3, #48	; 0x30
 8003582:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003584:	2302      	movs	r3, #2
 8003586:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003588:	2300      	movs	r3, #0
 800358a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800358c:	2301      	movs	r3, #1
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f107 0210 	add.w	r2, r7, #16
 8003598:	4611      	mov	r1, r2
 800359a:	4618      	mov	r0, r3
 800359c:	f001 f9f7 	bl	800498e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f001 fbb2 	bl	8004d0e <SDMMC_CmdSendSCR>
 80035aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d02a      	beq.n	8003608 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	e083      	b.n	80036be <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00f      	beq.n	80035e4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6819      	ldr	r1, [r3, #0]
 80035c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	f107 0208 	add.w	r2, r7, #8
 80035d0:	18d4      	adds	r4, r2, r3
 80035d2:	4608      	mov	r0, r1
 80035d4:	f001 f957 	bl	8004886 <SDIO_ReadFIFO>
 80035d8:	4603      	mov	r3, r0
 80035da:	6023      	str	r3, [r4, #0]
      index++;
 80035dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035de:	3301      	adds	r3, #1
 80035e0:	637b      	str	r3, [r7, #52]	; 0x34
 80035e2:	e006      	b.n	80035f2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d012      	beq.n	8003618 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80035f2:	f7fd fcc1 	bl	8000f78 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d102      	bne.n	8003608 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003602:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003606:	e05a      	b.n	80036be <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0cf      	beq.n	80035b6 <SD_FindSCR+0x96>
 8003616:	e000      	b.n	800361a <SD_FindSCR+0xfa>
      break;
 8003618:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2208      	movs	r2, #8
 800362e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003630:	2308      	movs	r3, #8
 8003632:	e044      	b.n	80036be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2202      	movs	r2, #2
 8003648:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800364a:	2302      	movs	r3, #2
 800364c:	e037      	b.n	80036be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2220      	movs	r2, #32
 8003662:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003664:	2320      	movs	r3, #32
 8003666:	e02a      	b.n	80036be <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003670:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	061a      	lsls	r2, r3, #24
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800367e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	0a1b      	lsrs	r3, r3, #8
 8003684:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003688:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	0e1b      	lsrs	r3, r3, #24
 800368e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	601a      	str	r2, [r3, #0]
    scr++;
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	3304      	adds	r3, #4
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	061a      	lsls	r2, r3, #24
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80036a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80036b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	0e1b      	lsrs	r3, r3, #24
 80036b6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80036b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ba:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	373c      	adds	r7, #60	; 0x3c
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd90      	pop	{r4, r7, pc}

080036c6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e03f      	b.n	8003758 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d106      	bne.n	80036f2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7fd fb1b 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2224      	movs	r2, #36	; 0x24
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003708:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fe1c 	bl	8004348 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800371e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800372e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800373e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	; 0x28
 8003764:	af02      	add	r7, sp, #8
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	4613      	mov	r3, r2
 800376e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b20      	cmp	r3, #32
 800377e:	d17c      	bne.n	800387a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_UART_Transmit+0x2c>
 8003786:	88fb      	ldrh	r3, [r7, #6]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e075      	b.n	800387c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_UART_Transmit+0x3e>
 800379a:	2302      	movs	r3, #2
 800379c:	e06e      	b.n	800387c <HAL_UART_Transmit+0x11c>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2221      	movs	r2, #33	; 0x21
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037b4:	f7fd fbe0 	bl	8000f78 <HAL_GetTick>
 80037b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	88fa      	ldrh	r2, [r7, #6]
 80037be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	88fa      	ldrh	r2, [r7, #6]
 80037c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ce:	d108      	bne.n	80037e2 <HAL_UART_Transmit+0x82>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d104      	bne.n	80037e2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	e003      	b.n	80037ea <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037f2:	e02a      	b.n	800384a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2200      	movs	r2, #0
 80037fc:	2180      	movs	r1, #128	; 0x80
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fb9a 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e036      	b.n	800387c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10b      	bne.n	800382c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	461a      	mov	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003822:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	3302      	adds	r3, #2
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	e007      	b.n	800383c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	781a      	ldrb	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3301      	adds	r3, #1
 800383a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1cf      	bne.n	80037f4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2200      	movs	r2, #0
 800385c:	2140      	movs	r1, #64	; 0x40
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fb6a 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e006      	b.n	800387c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	e000      	b.n	800387c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800387a:	2302      	movs	r3, #2
  }
}
 800387c:	4618      	mov	r0, r3
 800387e:	3720      	adds	r7, #32
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08a      	sub	sp, #40	; 0x28
 8003888:	af02      	add	r7, sp, #8
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	f040 808c 	bne.w	80039be <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <HAL_UART_Receive+0x2e>
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e084      	b.n	80039c0 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_UART_Receive+0x40>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e07d      	b.n	80039c0 <HAL_UART_Receive+0x13c>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2222      	movs	r2, #34	; 0x22
 80038d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038e0:	f7fd fb4a 	bl	8000f78 <HAL_GetTick>
 80038e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	88fa      	ldrh	r2, [r7, #6]
 80038ea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fa:	d108      	bne.n	800390e <HAL_UART_Receive+0x8a>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d104      	bne.n	800390e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003904:	2300      	movs	r3, #0
 8003906:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	e003      	b.n	8003916 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800391e:	e043      	b.n	80039a8 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2200      	movs	r2, #0
 8003928:	2120      	movs	r1, #32
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fb04 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e042      	b.n	80039c0 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10c      	bne.n	800395a <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	b29b      	uxth	r3, r3
 8003948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394c:	b29a      	uxth	r2, r3
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	3302      	adds	r3, #2
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	e01f      	b.n	800399a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003962:	d007      	beq.n	8003974 <HAL_UART_Receive+0xf0>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <HAL_UART_Receive+0xfe>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d106      	bne.n	8003982 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	b2da      	uxtb	r2, r3
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	e008      	b.n	8003994 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800398e:	b2da      	uxtb	r2, r3
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	3301      	adds	r3, #1
 8003998:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1b6      	bne.n	8003920 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e000      	b.n	80039c0 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80039be:	2302      	movs	r3, #2
  }
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3720      	adds	r7, #32
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b0ba      	sub	sp, #232	; 0xe8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10f      	bne.n	8003a2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d009      	beq.n	8003a2e <HAL_UART_IRQHandler+0x66>
 8003a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fbd3 	bl	80041d2 <UART_Receive_IT>
      return;
 8003a2c:	e256      	b.n	8003edc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 80de 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x22c>
 8003a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d106      	bne.n	8003a52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 80d1 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_UART_IRQHandler+0xae>
 8003a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	f043 0201 	orr.w	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <HAL_UART_IRQHandler+0xd2>
 8003a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f043 0202 	orr.w	r2, r3, #2
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <HAL_UART_IRQHandler+0xf6>
 8003aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f043 0204 	orr.w	r2, r3, #4
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d011      	beq.n	8003aee <HAL_UART_IRQHandler+0x126>
 8003aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d105      	bne.n	8003ae2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f043 0208 	orr.w	r2, r3, #8
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 81ed 	beq.w	8003ed2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_UART_IRQHandler+0x14e>
 8003b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fb5e 	bl	80041d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <HAL_UART_IRQHandler+0x17a>
 8003b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d04f      	beq.n	8003be2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa66 	bl	8004014 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b52:	2b40      	cmp	r3, #64	; 0x40
 8003b54:	d141      	bne.n	8003bda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3314      	adds	r3, #20
 8003b5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3314      	adds	r3, #20
 8003b7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b92:	e841 2300 	strex	r3, r2, [r1]
 8003b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1d9      	bne.n	8003b56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d013      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	4a7d      	ldr	r2, [pc, #500]	; (8003da4 <HAL_UART_IRQHandler+0x3dc>)
 8003bb0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd fba9 	bl	800130e <HAL_DMA_Abort_IT>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d016      	beq.n	8003bf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd0:	e00e      	b.n	8003bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f99a 	bl	8003f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd8:	e00a      	b.n	8003bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f996 	bl	8003f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be0:	e006      	b.n	8003bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f992 	bl	8003f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bee:	e170      	b.n	8003ed2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf0:	bf00      	nop
    return;
 8003bf2:	e16e      	b.n	8003ed2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	f040 814a 	bne.w	8003e92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 8143 	beq.w	8003e92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 813c 	beq.w	8003e92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b40      	cmp	r3, #64	; 0x40
 8003c3c:	f040 80b4 	bne.w	8003da8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 8140 	beq.w	8003ed6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	f080 8139 	bcs.w	8003ed6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c76:	f000 8088 	beq.w	8003d8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	330c      	adds	r3, #12
 8003ca2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ca6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003caa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1d9      	bne.n	8003c7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3314      	adds	r3, #20
 8003ccc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3314      	adds	r3, #20
 8003ce6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cf6:	e841 2300 	strex	r3, r2, [r1]
 8003cfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e1      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3314      	adds	r3, #20
 8003d08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3314      	adds	r3, #20
 8003d22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e3      	bne.n	8003d02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d5a:	f023 0310 	bic.w	r3, r3, #16
 8003d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	330c      	adds	r3, #12
 8003d68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e3      	bne.n	8003d48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fd fa52 	bl	800122e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	4619      	mov	r1, r3
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f8c0 	bl	8003f20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003da0:	e099      	b.n	8003ed6 <HAL_UART_IRQHandler+0x50e>
 8003da2:	bf00      	nop
 8003da4:	080040db 	.word	0x080040db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 808b 	beq.w	8003eda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003dc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 8086 	beq.w	8003eda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003df2:	647a      	str	r2, [r7, #68]	; 0x44
 8003df4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003df8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e3      	bne.n	8003dce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3314      	adds	r3, #20
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	623b      	str	r3, [r7, #32]
   return(result);
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3314      	adds	r3, #20
 8003e26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e2a:	633a      	str	r2, [r7, #48]	; 0x30
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e3      	bne.n	8003e06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	330c      	adds	r3, #12
 8003e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0310 	bic.w	r3, r3, #16
 8003e62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e70:	61fa      	str	r2, [r7, #28]
 8003e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	69b9      	ldr	r1, [r7, #24]
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	e841 2300 	strex	r3, r2, [r1]
 8003e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e3      	bne.n	8003e4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e88:	4619      	mov	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f848 	bl	8003f20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e90:	e023      	b.n	8003eda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x4ea>
 8003e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f929 	bl	8004102 <UART_Transmit_IT>
    return;
 8003eb0:	e014      	b.n	8003edc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00e      	beq.n	8003edc <HAL_UART_IRQHandler+0x514>
 8003ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f969 	bl	80041a2 <UART_EndTransmit_IT>
    return;
 8003ed0:	e004      	b.n	8003edc <HAL_UART_IRQHandler+0x514>
    return;
 8003ed2:	bf00      	nop
 8003ed4:	e002      	b.n	8003edc <HAL_UART_IRQHandler+0x514>
      return;
 8003ed6:	bf00      	nop
 8003ed8:	e000      	b.n	8003edc <HAL_UART_IRQHandler+0x514>
      return;
 8003eda:	bf00      	nop
  }
}
 8003edc:	37e8      	adds	r7, #232	; 0xe8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop

08003ee4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b090      	sub	sp, #64	; 0x40
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f48:	e050      	b.n	8003fec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d04c      	beq.n	8003fec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f58:	f7fd f80e 	bl	8000f78 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d241      	bcs.n	8003fec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f88:	637a      	str	r2, [r7, #52]	; 0x34
 8003f8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f90:	e841 2300 	strex	r3, r2, [r1]
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e5      	bne.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3314      	adds	r3, #20
 8003fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	613b      	str	r3, [r7, #16]
   return(result);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f023 0301 	bic.w	r3, r3, #1
 8003fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3314      	adds	r3, #20
 8003fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fbc:	623a      	str	r2, [r7, #32]
 8003fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	69f9      	ldr	r1, [r7, #28]
 8003fc2:	6a3a      	ldr	r2, [r7, #32]
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e5      	bne.n	8003f9c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e00f      	b.n	800400c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	461a      	mov	r2, r3
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	429a      	cmp	r2, r3
 8004008:	d09f      	beq.n	8003f4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3740      	adds	r7, #64	; 0x40
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004014:	b480      	push	{r7}
 8004016:	b095      	sub	sp, #84	; 0x54
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	330c      	adds	r3, #12
 8004022:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800403c:	643a      	str	r2, [r7, #64]	; 0x40
 800403e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004042:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e5      	bne.n	800401c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3314      	adds	r3, #20
 8004056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	64bb      	str	r3, [r7, #72]	; 0x48
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3314      	adds	r3, #20
 800406e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004070:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004072:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e5      	bne.n	8004050 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	2b01      	cmp	r3, #1
 800408a:	d119      	bne.n	80040c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	330c      	adds	r3, #12
 8004092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	e853 3f00 	ldrex	r3, [r3]
 800409a:	60bb      	str	r3, [r7, #8]
   return(result);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f023 0310 	bic.w	r3, r3, #16
 80040a2:	647b      	str	r3, [r7, #68]	; 0x44
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	330c      	adds	r3, #12
 80040aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040ac:	61ba      	str	r2, [r7, #24]
 80040ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	6979      	ldr	r1, [r7, #20]
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	e841 2300 	strex	r3, r2, [r1]
 80040b8:	613b      	str	r3, [r7, #16]
   return(result);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e5      	bne.n	800408c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040ce:	bf00      	nop
 80040d0:	3754      	adds	r7, #84	; 0x54
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f7ff ff09 	bl	8003f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040fa:	bf00      	nop
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b21      	cmp	r3, #33	; 0x21
 8004114:	d13e      	bne.n	8004194 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411e:	d114      	bne.n	800414a <UART_Transmit_IT+0x48>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d110      	bne.n	800414a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800413c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	1c9a      	adds	r2, r3, #2
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	621a      	str	r2, [r3, #32]
 8004148:	e008      	b.n	800415c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	1c59      	adds	r1, r3, #1
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6211      	str	r1, [r2, #32]
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29b      	uxth	r3, r3
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	4619      	mov	r1, r3
 800416a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10f      	bne.n	8004190 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800417e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800418e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	e000      	b.n	8004196 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004194:	2302      	movs	r3, #2
  }
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff fe8e 	bl	8003ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b08c      	sub	sp, #48	; 0x30
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b22      	cmp	r3, #34	; 0x22
 80041e4:	f040 80ab 	bne.w	800433e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f0:	d117      	bne.n	8004222 <UART_Receive_IT+0x50>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d113      	bne.n	8004222 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004210:	b29a      	uxth	r2, r3
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421a:	1c9a      	adds	r2, r3, #2
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	629a      	str	r2, [r3, #40]	; 0x28
 8004220:	e026      	b.n	8004270 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004228:	2300      	movs	r3, #0
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004234:	d007      	beq.n	8004246 <UART_Receive_IT+0x74>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10a      	bne.n	8004254 <UART_Receive_IT+0x82>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	b2da      	uxtb	r2, r3
 800424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004250:	701a      	strb	r2, [r3, #0]
 8004252:	e008      	b.n	8004266 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004260:	b2da      	uxtb	r2, r3
 8004262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004264:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29b      	uxth	r3, r3
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4619      	mov	r1, r3
 800427e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004280:	2b00      	cmp	r3, #0
 8004282:	d15a      	bne.n	800433a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0220 	bic.w	r2, r2, #32
 8004292:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d135      	bne.n	8004330 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	330c      	adds	r3, #12
 80042d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	613b      	str	r3, [r7, #16]
   return(result);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f023 0310 	bic.w	r3, r3, #16
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ea:	623a      	str	r2, [r7, #32]
 80042ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	69f9      	ldr	r1, [r7, #28]
 80042f0:	6a3a      	ldr	r2, [r7, #32]
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e5      	bne.n	80042ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0310 	and.w	r3, r3, #16
 8004308:	2b10      	cmp	r3, #16
 800430a:	d10a      	bne.n	8004322 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff fdf9 	bl	8003f20 <HAL_UARTEx_RxEventCallback>
 800432e:	e002      	b.n	8004336 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff fde1 	bl	8003ef8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	e002      	b.n	8004340 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	e000      	b.n	8004340 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800433e:	2302      	movs	r3, #2
  }
}
 8004340:	4618      	mov	r0, r3
 8004342:	3730      	adds	r7, #48	; 0x30
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800434c:	b0c0      	sub	sp, #256	; 0x100
 800434e:	af00      	add	r7, sp, #0
 8004350:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004364:	68d9      	ldr	r1, [r3, #12]
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	ea40 0301 	orr.w	r3, r0, r1
 8004370:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	431a      	orrs	r2, r3
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	431a      	orrs	r2, r3
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043a0:	f021 010c 	bic.w	r1, r1, #12
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043ae:	430b      	orrs	r3, r1
 80043b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c2:	6999      	ldr	r1, [r3, #24]
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	ea40 0301 	orr.w	r3, r0, r1
 80043ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b8f      	ldr	r3, [pc, #572]	; (8004614 <UART_SetConfig+0x2cc>)
 80043d8:	429a      	cmp	r2, r3
 80043da:	d005      	beq.n	80043e8 <UART_SetConfig+0xa0>
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4b8d      	ldr	r3, [pc, #564]	; (8004618 <UART_SetConfig+0x2d0>)
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d104      	bne.n	80043f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043e8:	f7fd ffce 	bl	8002388 <HAL_RCC_GetPCLK2Freq>
 80043ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043f0:	e003      	b.n	80043fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043f2:	f7fd ffb5 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 80043f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004404:	f040 810c 	bne.w	8004620 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800440c:	2200      	movs	r2, #0
 800440e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004412:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004416:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800441a:	4622      	mov	r2, r4
 800441c:	462b      	mov	r3, r5
 800441e:	1891      	adds	r1, r2, r2
 8004420:	65b9      	str	r1, [r7, #88]	; 0x58
 8004422:	415b      	adcs	r3, r3
 8004424:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004426:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800442a:	4621      	mov	r1, r4
 800442c:	eb12 0801 	adds.w	r8, r2, r1
 8004430:	4629      	mov	r1, r5
 8004432:	eb43 0901 	adc.w	r9, r3, r1
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800444a:	4690      	mov	r8, r2
 800444c:	4699      	mov	r9, r3
 800444e:	4623      	mov	r3, r4
 8004450:	eb18 0303 	adds.w	r3, r8, r3
 8004454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004458:	462b      	mov	r3, r5
 800445a:	eb49 0303 	adc.w	r3, r9, r3
 800445e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800446e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004472:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004476:	460b      	mov	r3, r1
 8004478:	18db      	adds	r3, r3, r3
 800447a:	653b      	str	r3, [r7, #80]	; 0x50
 800447c:	4613      	mov	r3, r2
 800447e:	eb42 0303 	adc.w	r3, r2, r3
 8004482:	657b      	str	r3, [r7, #84]	; 0x54
 8004484:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004488:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800448c:	f7fb fe9c 	bl	80001c8 <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4b61      	ldr	r3, [pc, #388]	; (800461c <UART_SetConfig+0x2d4>)
 8004496:	fba3 2302 	umull	r2, r3, r3, r2
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	011c      	lsls	r4, r3, #4
 800449e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044b0:	4642      	mov	r2, r8
 80044b2:	464b      	mov	r3, r9
 80044b4:	1891      	adds	r1, r2, r2
 80044b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80044b8:	415b      	adcs	r3, r3
 80044ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044c0:	4641      	mov	r1, r8
 80044c2:	eb12 0a01 	adds.w	sl, r2, r1
 80044c6:	4649      	mov	r1, r9
 80044c8:	eb43 0b01 	adc.w	fp, r3, r1
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044e0:	4692      	mov	sl, r2
 80044e2:	469b      	mov	fp, r3
 80044e4:	4643      	mov	r3, r8
 80044e6:	eb1a 0303 	adds.w	r3, sl, r3
 80044ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044ee:	464b      	mov	r3, r9
 80044f0:	eb4b 0303 	adc.w	r3, fp, r3
 80044f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004504:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004508:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800450c:	460b      	mov	r3, r1
 800450e:	18db      	adds	r3, r3, r3
 8004510:	643b      	str	r3, [r7, #64]	; 0x40
 8004512:	4613      	mov	r3, r2
 8004514:	eb42 0303 	adc.w	r3, r2, r3
 8004518:	647b      	str	r3, [r7, #68]	; 0x44
 800451a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800451e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004522:	f7fb fe51 	bl	80001c8 <__aeabi_uldivmod>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	4611      	mov	r1, r2
 800452c:	4b3b      	ldr	r3, [pc, #236]	; (800461c <UART_SetConfig+0x2d4>)
 800452e:	fba3 2301 	umull	r2, r3, r3, r1
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	2264      	movs	r2, #100	; 0x64
 8004536:	fb02 f303 	mul.w	r3, r2, r3
 800453a:	1acb      	subs	r3, r1, r3
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004542:	4b36      	ldr	r3, [pc, #216]	; (800461c <UART_SetConfig+0x2d4>)
 8004544:	fba3 2302 	umull	r2, r3, r3, r2
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004550:	441c      	add	r4, r3
 8004552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004556:	2200      	movs	r2, #0
 8004558:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800455c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004560:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004564:	4642      	mov	r2, r8
 8004566:	464b      	mov	r3, r9
 8004568:	1891      	adds	r1, r2, r2
 800456a:	63b9      	str	r1, [r7, #56]	; 0x38
 800456c:	415b      	adcs	r3, r3
 800456e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004570:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004574:	4641      	mov	r1, r8
 8004576:	1851      	adds	r1, r2, r1
 8004578:	6339      	str	r1, [r7, #48]	; 0x30
 800457a:	4649      	mov	r1, r9
 800457c:	414b      	adcs	r3, r1
 800457e:	637b      	str	r3, [r7, #52]	; 0x34
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800458c:	4659      	mov	r1, fp
 800458e:	00cb      	lsls	r3, r1, #3
 8004590:	4651      	mov	r1, sl
 8004592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004596:	4651      	mov	r1, sl
 8004598:	00ca      	lsls	r2, r1, #3
 800459a:	4610      	mov	r0, r2
 800459c:	4619      	mov	r1, r3
 800459e:	4603      	mov	r3, r0
 80045a0:	4642      	mov	r2, r8
 80045a2:	189b      	adds	r3, r3, r2
 80045a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045a8:	464b      	mov	r3, r9
 80045aa:	460a      	mov	r2, r1
 80045ac:	eb42 0303 	adc.w	r3, r2, r3
 80045b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045c8:	460b      	mov	r3, r1
 80045ca:	18db      	adds	r3, r3, r3
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ce:	4613      	mov	r3, r2
 80045d0:	eb42 0303 	adc.w	r3, r2, r3
 80045d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045de:	f7fb fdf3 	bl	80001c8 <__aeabi_uldivmod>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4b0d      	ldr	r3, [pc, #52]	; (800461c <UART_SetConfig+0x2d4>)
 80045e8:	fba3 1302 	umull	r1, r3, r3, r2
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	2164      	movs	r1, #100	; 0x64
 80045f0:	fb01 f303 	mul.w	r3, r1, r3
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	3332      	adds	r3, #50	; 0x32
 80045fa:	4a08      	ldr	r2, [pc, #32]	; (800461c <UART_SetConfig+0x2d4>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	f003 0207 	and.w	r2, r3, #7
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4422      	add	r2, r4
 800460e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004610:	e105      	b.n	800481e <UART_SetConfig+0x4d6>
 8004612:	bf00      	nop
 8004614:	40011000 	.word	0x40011000
 8004618:	40011400 	.word	0x40011400
 800461c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004624:	2200      	movs	r2, #0
 8004626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800462a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800462e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004632:	4642      	mov	r2, r8
 8004634:	464b      	mov	r3, r9
 8004636:	1891      	adds	r1, r2, r2
 8004638:	6239      	str	r1, [r7, #32]
 800463a:	415b      	adcs	r3, r3
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
 800463e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004642:	4641      	mov	r1, r8
 8004644:	1854      	adds	r4, r2, r1
 8004646:	4649      	mov	r1, r9
 8004648:	eb43 0501 	adc.w	r5, r3, r1
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	00eb      	lsls	r3, r5, #3
 8004656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800465a:	00e2      	lsls	r2, r4, #3
 800465c:	4614      	mov	r4, r2
 800465e:	461d      	mov	r5, r3
 8004660:	4643      	mov	r3, r8
 8004662:	18e3      	adds	r3, r4, r3
 8004664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004668:	464b      	mov	r3, r9
 800466a:	eb45 0303 	adc.w	r3, r5, r3
 800466e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800467e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800468e:	4629      	mov	r1, r5
 8004690:	008b      	lsls	r3, r1, #2
 8004692:	4621      	mov	r1, r4
 8004694:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004698:	4621      	mov	r1, r4
 800469a:	008a      	lsls	r2, r1, #2
 800469c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046a0:	f7fb fd92 	bl	80001c8 <__aeabi_uldivmod>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4b60      	ldr	r3, [pc, #384]	; (800482c <UART_SetConfig+0x4e4>)
 80046aa:	fba3 2302 	umull	r2, r3, r3, r2
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	011c      	lsls	r4, r3, #4
 80046b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046c4:	4642      	mov	r2, r8
 80046c6:	464b      	mov	r3, r9
 80046c8:	1891      	adds	r1, r2, r2
 80046ca:	61b9      	str	r1, [r7, #24]
 80046cc:	415b      	adcs	r3, r3
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d4:	4641      	mov	r1, r8
 80046d6:	1851      	adds	r1, r2, r1
 80046d8:	6139      	str	r1, [r7, #16]
 80046da:	4649      	mov	r1, r9
 80046dc:	414b      	adcs	r3, r1
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046ec:	4659      	mov	r1, fp
 80046ee:	00cb      	lsls	r3, r1, #3
 80046f0:	4651      	mov	r1, sl
 80046f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046f6:	4651      	mov	r1, sl
 80046f8:	00ca      	lsls	r2, r1, #3
 80046fa:	4610      	mov	r0, r2
 80046fc:	4619      	mov	r1, r3
 80046fe:	4603      	mov	r3, r0
 8004700:	4642      	mov	r2, r8
 8004702:	189b      	adds	r3, r3, r2
 8004704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004708:	464b      	mov	r3, r9
 800470a:	460a      	mov	r2, r1
 800470c:	eb42 0303 	adc.w	r3, r2, r3
 8004710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	67bb      	str	r3, [r7, #120]	; 0x78
 800471e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800472c:	4649      	mov	r1, r9
 800472e:	008b      	lsls	r3, r1, #2
 8004730:	4641      	mov	r1, r8
 8004732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004736:	4641      	mov	r1, r8
 8004738:	008a      	lsls	r2, r1, #2
 800473a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800473e:	f7fb fd43 	bl	80001c8 <__aeabi_uldivmod>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4b39      	ldr	r3, [pc, #228]	; (800482c <UART_SetConfig+0x4e4>)
 8004748:	fba3 1302 	umull	r1, r3, r3, r2
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	2164      	movs	r1, #100	; 0x64
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	3332      	adds	r3, #50	; 0x32
 800475a:	4a34      	ldr	r2, [pc, #208]	; (800482c <UART_SetConfig+0x4e4>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004766:	441c      	add	r4, r3
 8004768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800476c:	2200      	movs	r2, #0
 800476e:	673b      	str	r3, [r7, #112]	; 0x70
 8004770:	677a      	str	r2, [r7, #116]	; 0x74
 8004772:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004776:	4642      	mov	r2, r8
 8004778:	464b      	mov	r3, r9
 800477a:	1891      	adds	r1, r2, r2
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	415b      	adcs	r3, r3
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004786:	4641      	mov	r1, r8
 8004788:	1851      	adds	r1, r2, r1
 800478a:	6039      	str	r1, [r7, #0]
 800478c:	4649      	mov	r1, r9
 800478e:	414b      	adcs	r3, r1
 8004790:	607b      	str	r3, [r7, #4]
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800479e:	4659      	mov	r1, fp
 80047a0:	00cb      	lsls	r3, r1, #3
 80047a2:	4651      	mov	r1, sl
 80047a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047a8:	4651      	mov	r1, sl
 80047aa:	00ca      	lsls	r2, r1, #3
 80047ac:	4610      	mov	r0, r2
 80047ae:	4619      	mov	r1, r3
 80047b0:	4603      	mov	r3, r0
 80047b2:	4642      	mov	r2, r8
 80047b4:	189b      	adds	r3, r3, r2
 80047b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80047b8:	464b      	mov	r3, r9
 80047ba:	460a      	mov	r2, r1
 80047bc:	eb42 0303 	adc.w	r3, r2, r3
 80047c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	663b      	str	r3, [r7, #96]	; 0x60
 80047cc:	667a      	str	r2, [r7, #100]	; 0x64
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047da:	4649      	mov	r1, r9
 80047dc:	008b      	lsls	r3, r1, #2
 80047de:	4641      	mov	r1, r8
 80047e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047e4:	4641      	mov	r1, r8
 80047e6:	008a      	lsls	r2, r1, #2
 80047e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047ec:	f7fb fcec 	bl	80001c8 <__aeabi_uldivmod>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4b0d      	ldr	r3, [pc, #52]	; (800482c <UART_SetConfig+0x4e4>)
 80047f6:	fba3 1302 	umull	r1, r3, r3, r2
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	2164      	movs	r1, #100	; 0x64
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	3332      	adds	r3, #50	; 0x32
 8004808:	4a08      	ldr	r2, [pc, #32]	; (800482c <UART_SetConfig+0x4e4>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	f003 020f 	and.w	r2, r3, #15
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4422      	add	r2, r4
 800481c:	609a      	str	r2, [r3, #8]
}
 800481e:	bf00      	nop
 8004820:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004824:	46bd      	mov	sp, r7
 8004826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800482a:	bf00      	nop
 800482c:	51eb851f 	.word	0x51eb851f

08004830 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004830:	b084      	sub	sp, #16
 8004832:	b480      	push	{r7}
 8004834:	b085      	sub	sp, #20
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	f107 001c 	add.w	r0, r7, #28
 800483e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004846:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004848:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800484a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800484e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004850:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004852:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004856:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800485a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800486a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	b004      	add	sp, #16
 8004884:	4770      	bx	lr

08004886 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2203      	movs	r2, #3
 80048ce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0303 	and.w	r3, r3, #3
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b085      	sub	sp, #20
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004918:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800491e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004924:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004934:	f023 030f 	bic.w	r3, r3, #15
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	b2db      	uxtb	r3, r3
}
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3314      	adds	r3, #20
 8004976:	461a      	mov	r2, r3
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	4413      	add	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
}  
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80049b4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80049ba:	431a      	orrs	r2, r3
                       Data->DPSM);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80049c0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0

}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b088      	sub	sp, #32
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80049f4:	2310      	movs	r3, #16
 80049f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049f8:	2340      	movs	r3, #64	; 0x40
 80049fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a06:	f107 0308 	add.w	r3, r7, #8
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ff74 	bl	80048fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a16:	2110      	movs	r1, #16
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fa19 	bl	8004e50 <SDMMC_GetCmdResp1>
 8004a1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a20:	69fb      	ldr	r3, [r7, #28]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3720      	adds	r7, #32
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b088      	sub	sp, #32
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004a38:	2311      	movs	r3, #17
 8004a3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a3c:	2340      	movs	r3, #64	; 0x40
 8004a3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a4a:	f107 0308 	add.w	r3, r7, #8
 8004a4e:	4619      	mov	r1, r3
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff ff52 	bl	80048fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5a:	2111      	movs	r1, #17
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f9f7 	bl	8004e50 <SDMMC_GetCmdResp1>
 8004a62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a64:	69fb      	ldr	r3, [r7, #28]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3720      	adds	r7, #32
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b088      	sub	sp, #32
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004a7c:	2312      	movs	r3, #18
 8004a7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a80:	2340      	movs	r3, #64	; 0x40
 8004a82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a8e:	f107 0308 	add.w	r3, r7, #8
 8004a92:	4619      	mov	r1, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff ff30 	bl	80048fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9e:	2112      	movs	r1, #18
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f9d5 	bl	8004e50 <SDMMC_GetCmdResp1>
 8004aa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3720      	adds	r7, #32
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b088      	sub	sp, #32
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004ac0:	2318      	movs	r3, #24
 8004ac2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ac4:	2340      	movs	r3, #64	; 0x40
 8004ac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ad0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ad2:	f107 0308 	add.w	r3, r7, #8
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff ff0e 	bl	80048fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae2:	2118      	movs	r1, #24
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f9b3 	bl	8004e50 <SDMMC_GetCmdResp1>
 8004aea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aec:	69fb      	ldr	r3, [r7, #28]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3720      	adds	r7, #32
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b088      	sub	sp, #32
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004b04:	2319      	movs	r3, #25
 8004b06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b08:	2340      	movs	r3, #64	; 0x40
 8004b0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b16:	f107 0308 	add.w	r3, r7, #8
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff feec 	bl	80048fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b26:	2119      	movs	r1, #25
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f991 	bl	8004e50 <SDMMC_GetCmdResp1>
 8004b2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b30:	69fb      	ldr	r3, [r7, #28]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3720      	adds	r7, #32
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004b48:	230c      	movs	r3, #12
 8004b4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b4c:	2340      	movs	r3, #64	; 0x40
 8004b4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b5a:	f107 0308 	add.w	r3, r7, #8
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff feca 	bl	80048fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004b66:	4a05      	ldr	r2, [pc, #20]	; (8004b7c <SDMMC_CmdStopTransfer+0x40>)
 8004b68:	210c      	movs	r1, #12
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f970 	bl	8004e50 <SDMMC_GetCmdResp1>
 8004b70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b72:	69fb      	ldr	r3, [r7, #28]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	05f5e100 	.word	0x05f5e100

08004b80 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08a      	sub	sp, #40	; 0x28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004b90:	2307      	movs	r3, #7
 8004b92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b94:	2340      	movs	r3, #64	; 0x40
 8004b96:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ba0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ba2:	f107 0310 	add.w	r3, r7, #16
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f7ff fea6 	bl	80048fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb2:	2107      	movs	r1, #7
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f94b 	bl	8004e50 <SDMMC_GetCmdResp1>
 8004bba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3728      	adds	r7, #40	; 0x28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b088      	sub	sp, #32
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004be2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004be4:	f107 0308 	add.w	r3, r7, #8
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fe85 	bl	80048fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fb65 	bl	80052c0 <SDMMC_GetCmdError>
 8004bf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b088      	sub	sp, #32
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004c0a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004c0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004c10:	2308      	movs	r3, #8
 8004c12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c14:	2340      	movs	r3, #64	; 0x40
 8004c16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c22:	f107 0308 	add.w	r3, r7, #8
 8004c26:	4619      	mov	r1, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff fe66 	bl	80048fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 faf8 	bl	8005224 <SDMMC_GetCmdResp7>
 8004c34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c36:	69fb      	ldr	r3, [r7, #28]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3720      	adds	r7, #32
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004c4e:	2337      	movs	r3, #55	; 0x37
 8004c50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c52:	2340      	movs	r3, #64	; 0x40
 8004c54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c60:	f107 0308 	add.w	r3, r7, #8
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7ff fe47 	bl	80048fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c70:	2137      	movs	r1, #55	; 0x37
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f8ec 	bl	8004e50 <SDMMC_GetCmdResp1>
 8004c78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c7a:	69fb      	ldr	r3, [r7, #28]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3720      	adds	r7, #32
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004c9a:	2329      	movs	r3, #41	; 0x29
 8004c9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c9e:	2340      	movs	r3, #64	; 0x40
 8004ca0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004caa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cac:	f107 0308 	add.w	r3, r7, #8
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff fe21 	bl	80048fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f9ff 	bl	80050bc <SDMMC_GetCmdResp3>
 8004cbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3720      	adds	r7, #32
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b088      	sub	sp, #32
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004cd8:	2306      	movs	r3, #6
 8004cda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cdc:	2340      	movs	r3, #64	; 0x40
 8004cde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ce8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cea:	f107 0308 	add.w	r3, r7, #8
 8004cee:	4619      	mov	r1, r3
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff fe02 	bl	80048fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfa:	2106      	movs	r1, #6
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f8a7 	bl	8004e50 <SDMMC_GetCmdResp1>
 8004d02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d04:	69fb      	ldr	r3, [r7, #28]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3720      	adds	r7, #32
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b088      	sub	sp, #32
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004d1a:	2333      	movs	r3, #51	; 0x33
 8004d1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d1e:	2340      	movs	r3, #64	; 0x40
 8004d20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d2c:	f107 0308 	add.w	r3, r7, #8
 8004d30:	4619      	mov	r1, r3
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff fde1 	bl	80048fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3c:	2133      	movs	r1, #51	; 0x33
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f886 	bl	8004e50 <SDMMC_GetCmdResp1>
 8004d44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d46:	69fb      	ldr	r3, [r7, #28]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3720      	adds	r7, #32
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004d60:	23c0      	movs	r3, #192	; 0xc0
 8004d62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d6e:	f107 0308 	add.w	r3, r7, #8
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff fdc0 	bl	80048fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f956 	bl	800502c <SDMMC_GetCmdResp2>
 8004d80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d82:	69fb      	ldr	r3, [r7, #28]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3720      	adds	r7, #32
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004d9a:	2309      	movs	r3, #9
 8004d9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004d9e:	23c0      	movs	r3, #192	; 0xc0
 8004da0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004daa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dac:	f107 0308 	add.w	r3, r7, #8
 8004db0:	4619      	mov	r1, r3
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff fda1 	bl	80048fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f937 	bl	800502c <SDMMC_GetCmdResp2>
 8004dbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b088      	sub	sp, #32
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ddc:	2340      	movs	r3, #64	; 0x40
 8004dde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004de8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dea:	f107 0308 	add.w	r3, r7, #8
 8004dee:	4619      	mov	r1, r3
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff fd82 	bl	80048fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	2103      	movs	r1, #3
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f99c 	bl	8005138 <SDMMC_GetCmdResp6>
 8004e00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e02:	69fb      	ldr	r3, [r7, #28]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004e1a:	230d      	movs	r3, #13
 8004e1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e1e:	2340      	movs	r3, #64	; 0x40
 8004e20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e2c:	f107 0308 	add.w	r3, r7, #8
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff fd61 	bl	80048fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3c:	210d      	movs	r1, #13
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f806 	bl	8004e50 <SDMMC_GetCmdResp1>
 8004e44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e46:	69fb      	ldr	r3, [r7, #28]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3720      	adds	r7, #32
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004e5e:	4b70      	ldr	r3, [pc, #448]	; (8005020 <SDMMC_GetCmdResp1+0x1d0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a70      	ldr	r2, [pc, #448]	; (8005024 <SDMMC_GetCmdResp1+0x1d4>)
 8004e64:	fba2 2303 	umull	r2, r3, r2, r3
 8004e68:	0a5a      	lsrs	r2, r3, #9
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	fb02 f303 	mul.w	r3, r2, r3
 8004e70:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	1e5a      	subs	r2, r3, #1
 8004e76:	61fa      	str	r2, [r7, #28]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d102      	bne.n	8004e82 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e80:	e0c9      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e86:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0ef      	beq.n	8004e72 <SDMMC_GetCmdResp1+0x22>
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1ea      	bne.n	8004e72 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d004      	beq.n	8004eb2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2204      	movs	r2, #4
 8004eac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004eae:	2304      	movs	r3, #4
 8004eb0:	e0b1      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d004      	beq.n	8004ec8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0a6      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	22c5      	movs	r2, #197	; 0xc5
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f7ff fd3d 	bl	800494e <SDIO_GetCommandResponse>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	7afb      	ldrb	r3, [r7, #11]
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d001      	beq.n	8004ee2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e099      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f7ff fd3f 	bl	8004968 <SDIO_GetResponse>
 8004eea:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4b4e      	ldr	r3, [pc, #312]	; (8005028 <SDMMC_GetCmdResp1+0x1d8>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e08d      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	da02      	bge.n	8004f06 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004f00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f04:	e087      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004f10:	2340      	movs	r3, #64	; 0x40
 8004f12:	e080      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004f1e:	2380      	movs	r3, #128	; 0x80
 8004f20:	e079      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f30:	e071      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f40:	e069      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f50:	e061      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004f5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f60:	e059      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f70:	e051      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f80:	e049      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004f8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f90:	e041      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fa0:	e039      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fb0:	e031      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004fbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004fc0:	e029      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004fcc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004fd0:	e021      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004fdc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004fe0:	e019      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004fec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ff0:	e011      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004ffc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005000:	e009      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800500c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005010:	e001      	b.n	8005016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005012:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005016:	4618      	mov	r0, r3
 8005018:	3720      	adds	r7, #32
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000000 	.word	0x20000000
 8005024:	10624dd3 	.word	0x10624dd3
 8005028:	fdffe008 	.word	0xfdffe008

0800502c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005034:	4b1f      	ldr	r3, [pc, #124]	; (80050b4 <SDMMC_GetCmdResp2+0x88>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1f      	ldr	r2, [pc, #124]	; (80050b8 <SDMMC_GetCmdResp2+0x8c>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	0a5b      	lsrs	r3, r3, #9
 8005040:	f241 3288 	movw	r2, #5000	; 0x1388
 8005044:	fb02 f303 	mul.w	r3, r2, r3
 8005048:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1e5a      	subs	r2, r3, #1
 800504e:	60fa      	str	r2, [r7, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d102      	bne.n	800505a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005054:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005058:	e026      	b.n	80050a8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0ef      	beq.n	800504a <SDMMC_GetCmdResp2+0x1e>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1ea      	bne.n	800504a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d004      	beq.n	800508a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2204      	movs	r2, #4
 8005084:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005086:	2304      	movs	r3, #4
 8005088:	e00e      	b.n	80050a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d004      	beq.n	80050a0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800509c:	2301      	movs	r3, #1
 800509e:	e003      	b.n	80050a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	22c5      	movs	r2, #197	; 0xc5
 80050a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	20000000 	.word	0x20000000
 80050b8:	10624dd3 	.word	0x10624dd3

080050bc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050c4:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <SDMMC_GetCmdResp3+0x74>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a1a      	ldr	r2, [pc, #104]	; (8005134 <SDMMC_GetCmdResp3+0x78>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	0a5b      	lsrs	r3, r3, #9
 80050d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d4:	fb02 f303 	mul.w	r3, r2, r3
 80050d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	1e5a      	subs	r2, r3, #1
 80050de:	60fa      	str	r2, [r7, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80050e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050e8:	e01b      	b.n	8005122 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0ef      	beq.n	80050da <SDMMC_GetCmdResp3+0x1e>
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1ea      	bne.n	80050da <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d004      	beq.n	800511a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2204      	movs	r2, #4
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005116:	2304      	movs	r3, #4
 8005118:	e003      	b.n	8005122 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	22c5      	movs	r2, #197	; 0xc5
 800511e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	20000000 	.word	0x20000000
 8005134:	10624dd3 	.word	0x10624dd3

08005138 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	460b      	mov	r3, r1
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005146:	4b35      	ldr	r3, [pc, #212]	; (800521c <SDMMC_GetCmdResp6+0xe4>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a35      	ldr	r2, [pc, #212]	; (8005220 <SDMMC_GetCmdResp6+0xe8>)
 800514c:	fba2 2303 	umull	r2, r3, r2, r3
 8005150:	0a5b      	lsrs	r3, r3, #9
 8005152:	f241 3288 	movw	r2, #5000	; 0x1388
 8005156:	fb02 f303 	mul.w	r3, r2, r3
 800515a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	1e5a      	subs	r2, r3, #1
 8005160:	61fa      	str	r2, [r7, #28]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d102      	bne.n	800516c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005166:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800516a:	e052      	b.n	8005212 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005170:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0ef      	beq.n	800515c <SDMMC_GetCmdResp6+0x24>
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1ea      	bne.n	800515c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d004      	beq.n	800519c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2204      	movs	r2, #4
 8005196:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005198:	2304      	movs	r3, #4
 800519a:	e03a      	b.n	8005212 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d004      	beq.n	80051b2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e02f      	b.n	8005212 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f7ff fbcb 	bl	800494e <SDIO_GetCommandResponse>
 80051b8:	4603      	mov	r3, r0
 80051ba:	461a      	mov	r2, r3
 80051bc:	7afb      	ldrb	r3, [r7, #11]
 80051be:	4293      	cmp	r3, r2
 80051c0:	d001      	beq.n	80051c6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e025      	b.n	8005212 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	22c5      	movs	r2, #197	; 0xc5
 80051ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80051cc:	2100      	movs	r1, #0
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7ff fbca 	bl	8004968 <SDIO_GetResponse>
 80051d4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d106      	bne.n	80051ee <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	0c1b      	lsrs	r3, r3, #16
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	e011      	b.n	8005212 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80051f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051fc:	e009      	b.n	8005212 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800520c:	e001      	b.n	8005212 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800520e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005212:	4618      	mov	r0, r3
 8005214:	3720      	adds	r7, #32
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000000 	.word	0x20000000
 8005220:	10624dd3 	.word	0x10624dd3

08005224 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800522c:	4b22      	ldr	r3, [pc, #136]	; (80052b8 <SDMMC_GetCmdResp7+0x94>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a22      	ldr	r2, [pc, #136]	; (80052bc <SDMMC_GetCmdResp7+0x98>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	0a5b      	lsrs	r3, r3, #9
 8005238:	f241 3288 	movw	r2, #5000	; 0x1388
 800523c:	fb02 f303 	mul.w	r3, r2, r3
 8005240:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	1e5a      	subs	r2, r3, #1
 8005246:	60fa      	str	r2, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800524c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005250:	e02c      	b.n	80052ac <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005256:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0ef      	beq.n	8005242 <SDMMC_GetCmdResp7+0x1e>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1ea      	bne.n	8005242 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	d004      	beq.n	8005282 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2204      	movs	r2, #4
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800527e:	2304      	movs	r3, #4
 8005280:	e014      	b.n	80052ac <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d004      	beq.n	8005298 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005294:	2301      	movs	r3, #1
 8005296:	e009      	b.n	80052ac <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2240      	movs	r2, #64	; 0x40
 80052a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80052aa:	2300      	movs	r3, #0
  
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	20000000 	.word	0x20000000
 80052bc:	10624dd3 	.word	0x10624dd3

080052c0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80052c8:	4b11      	ldr	r3, [pc, #68]	; (8005310 <SDMMC_GetCmdError+0x50>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a11      	ldr	r2, [pc, #68]	; (8005314 <SDMMC_GetCmdError+0x54>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	0a5b      	lsrs	r3, r3, #9
 80052d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d8:	fb02 f303 	mul.w	r3, r2, r3
 80052dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1e5a      	subs	r2, r3, #1
 80052e2:	60fa      	str	r2, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d102      	bne.n	80052ee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052ec:	e009      	b.n	8005302 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0f1      	beq.n	80052de <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	22c5      	movs	r2, #197	; 0xc5
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000000 	.word	0x20000000
 8005314:	10624dd3 	.word	0x10624dd3

08005318 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800531c:	4904      	ldr	r1, [pc, #16]	; (8005330 <MX_FATFS_Init+0x18>)
 800531e:	4805      	ldr	r0, [pc, #20]	; (8005334 <MX_FATFS_Init+0x1c>)
 8005320:	f000 f9e4 	bl	80056ec <FATFS_LinkDriver>
 8005324:	4603      	mov	r3, r0
 8005326:	461a      	mov	r2, r3
 8005328:	4b03      	ldr	r3, [pc, #12]	; (8005338 <MX_FATFS_Init+0x20>)
 800532a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800532c:	bf00      	nop
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20000124 	.word	0x20000124
 8005334:	08005808 	.word	0x08005808
 8005338:	20000120 	.word	0x20000120

0800533c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005346:	f000 f879 	bl	800543c <BSP_SD_IsDetected>
 800534a:	4603      	mov	r3, r0
 800534c:	2b01      	cmp	r3, #1
 800534e:	d001      	beq.n	8005354 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e012      	b.n	800537a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005354:	480b      	ldr	r0, [pc, #44]	; (8005384 <BSP_SD_Init+0x48>)
 8005356:	f7fd f82b 	bl	80023b0 <HAL_SD_Init>
 800535a:	4603      	mov	r3, r0
 800535c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800535e:	79fb      	ldrb	r3, [r7, #7]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d109      	bne.n	8005378 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005364:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005368:	4806      	ldr	r0, [pc, #24]	; (8005384 <BSP_SD_Init+0x48>)
 800536a:	f7fd fe05 	bl	8002f78 <HAL_SD_ConfigWideBusOperation>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005378:	79fb      	ldrb	r3, [r7, #7]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000034 	.word	0x20000034

08005388 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af02      	add	r7, sp, #8
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	68f9      	ldr	r1, [r7, #12]
 80053a4:	4806      	ldr	r0, [pc, #24]	; (80053c0 <BSP_SD_ReadBlocks+0x38>)
 80053a6:	f7fd f8b3 	bl	8002510 <HAL_SD_ReadBlocks>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20000034 	.word	0x20000034

080053c4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	68f9      	ldr	r1, [r7, #12]
 80053e0:	4806      	ldr	r0, [pc, #24]	; (80053fc <BSP_SD_WriteBlocks+0x38>)
 80053e2:	f7fd fa73 	bl	80028cc <HAL_SD_WriteBlocks>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80053f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20000034 	.word	0x20000034

08005400 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005404:	4805      	ldr	r0, [pc, #20]	; (800541c <BSP_SD_GetCardState+0x1c>)
 8005406:	f7fd fe51 	bl	80030ac <HAL_SD_GetCardState>
 800540a:	4603      	mov	r3, r0
 800540c:	2b04      	cmp	r3, #4
 800540e:	bf14      	ite	ne
 8005410:	2301      	movne	r3, #1
 8005412:	2300      	moveq	r3, #0
 8005414:	b2db      	uxtb	r3, r3
}
 8005416:	4618      	mov	r0, r3
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20000034 	.word	0x20000034

08005420 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	4803      	ldr	r0, [pc, #12]	; (8005438 <BSP_SD_GetCardInfo+0x18>)
 800542c:	f7fd fd78 	bl	8002f20 <HAL_SD_GetCardInfo>
}
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20000034 	.word	0x20000034

0800543c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005442:	2301      	movs	r3, #1
 8005444:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005446:	f000 f80b 	bl	8005460 <BSP_PlatformIsDetected>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005450:	2300      	movs	r3, #0
 8005452:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005454:	79fb      	ldrb	r3, [r7, #7]
 8005456:	b2db      	uxtb	r3, r3
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005466:	2301      	movs	r3, #1
 8005468:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800546a:	2110      	movs	r1, #16
 800546c:	4806      	ldr	r0, [pc, #24]	; (8005488 <BSP_PlatformIsDetected+0x28>)
 800546e:	f7fc fafb 	bl	8001a68 <HAL_GPIO_ReadPin>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8005478:	2300      	movs	r3, #0
 800547a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800547c:	79fb      	ldrb	r3, [r7, #7]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40021000 	.word	0x40021000

0800548c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005496:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <SD_CheckStatus+0x38>)
 8005498:	2201      	movs	r2, #1
 800549a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800549c:	f7ff ffb0 	bl	8005400 <BSP_SD_GetCardState>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d107      	bne.n	80054b6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80054a6:	4b07      	ldr	r3, [pc, #28]	; (80054c4 <SD_CheckStatus+0x38>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	f023 0301 	bic.w	r3, r3, #1
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <SD_CheckStatus+0x38>)
 80054b4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80054b6:	4b03      	ldr	r3, [pc, #12]	; (80054c4 <SD_CheckStatus+0x38>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	b2db      	uxtb	r3, r3
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000009 	.word	0x20000009

080054c8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	4603      	mov	r3, r0
 80054d0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80054d2:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <SD_initialize+0x38>)
 80054d4:	2201      	movs	r2, #1
 80054d6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80054d8:	f7ff ff30 	bl	800533c <BSP_SD_Init>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d107      	bne.n	80054f2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff ffd1 	bl	800548c <SD_CheckStatus>
 80054ea:	4603      	mov	r3, r0
 80054ec:	461a      	mov	r2, r3
 80054ee:	4b04      	ldr	r3, [pc, #16]	; (8005500 <SD_initialize+0x38>)
 80054f0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80054f2:	4b03      	ldr	r3, [pc, #12]	; (8005500 <SD_initialize+0x38>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	b2db      	uxtb	r3, r3
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20000009 	.word	0x20000009

08005504 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	4603      	mov	r3, r0
 800550c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800550e:	79fb      	ldrb	r3, [r7, #7]
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff ffbb 	bl	800548c <SD_CheckStatus>
 8005516:	4603      	mov	r3, r0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	607a      	str	r2, [r7, #4]
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	4603      	mov	r3, r0
 800552e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005534:	f04f 33ff 	mov.w	r3, #4294967295
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	68b8      	ldr	r0, [r7, #8]
 800553e:	f7ff ff23 	bl	8005388 <BSP_SD_ReadBlocks>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d107      	bne.n	8005558 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005548:	bf00      	nop
 800554a:	f7ff ff59 	bl	8005400 <BSP_SD_GetCardState>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1fa      	bne.n	800554a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005558:	7dfb      	ldrb	r3, [r7, #23]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b086      	sub	sp, #24
 8005566:	af00      	add	r7, sp, #0
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	603b      	str	r3, [r7, #0]
 800556e:	4603      	mov	r3, r0
 8005570:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005576:	f04f 33ff 	mov.w	r3, #4294967295
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	68b8      	ldr	r0, [r7, #8]
 8005580:	f7ff ff20 	bl	80053c4 <BSP_SD_WriteBlocks>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d107      	bne.n	800559a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800558a:	bf00      	nop
 800558c:	f7ff ff38 	bl	8005400 <BSP_SD_GetCardState>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1fa      	bne.n	800558c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800559a:	7dfb      	ldrb	r3, [r7, #23]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08c      	sub	sp, #48	; 0x30
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	603a      	str	r2, [r7, #0]
 80055ae:	71fb      	strb	r3, [r7, #7]
 80055b0:	460b      	mov	r3, r1
 80055b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80055ba:	4b25      	ldr	r3, [pc, #148]	; (8005650 <SD_ioctl+0xac>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <SD_ioctl+0x28>
 80055c8:	2303      	movs	r3, #3
 80055ca:	e03c      	b.n	8005646 <SD_ioctl+0xa2>

  switch (cmd)
 80055cc:	79bb      	ldrb	r3, [r7, #6]
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d834      	bhi.n	800563c <SD_ioctl+0x98>
 80055d2:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <SD_ioctl+0x34>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	080055e9 	.word	0x080055e9
 80055dc:	080055f1 	.word	0x080055f1
 80055e0:	08005609 	.word	0x08005609
 80055e4:	08005623 	.word	0x08005623
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80055ee:	e028      	b.n	8005642 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80055f0:	f107 030c 	add.w	r3, r7, #12
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff ff13 	bl	8005420 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80055fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005606:	e01c      	b.n	8005642 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005608:	f107 030c 	add.w	r3, r7, #12
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff ff07 	bl	8005420 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005614:	b29a      	uxth	r2, r3
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005620:	e00f      	b.n	8005642 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005622:	f107 030c 	add.w	r3, r7, #12
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff fefa 	bl	8005420 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800562c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562e:	0a5a      	lsrs	r2, r3, #9
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800563a:	e002      	b.n	8005642 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800563c:	2304      	movs	r3, #4
 800563e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005642:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005646:	4618      	mov	r0, r3
 8005648:	3730      	adds	r7, #48	; 0x30
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000009 	.word	0x20000009

08005654 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	4613      	mov	r3, r2
 8005660:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005662:	2301      	movs	r3, #1
 8005664:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800566a:	4b1f      	ldr	r3, [pc, #124]	; (80056e8 <FATFS_LinkDriverEx+0x94>)
 800566c:	7a5b      	ldrb	r3, [r3, #9]
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d131      	bne.n	80056d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005674:	4b1c      	ldr	r3, [pc, #112]	; (80056e8 <FATFS_LinkDriverEx+0x94>)
 8005676:	7a5b      	ldrb	r3, [r3, #9]
 8005678:	b2db      	uxtb	r3, r3
 800567a:	461a      	mov	r2, r3
 800567c:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <FATFS_LinkDriverEx+0x94>)
 800567e:	2100      	movs	r1, #0
 8005680:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005682:	4b19      	ldr	r3, [pc, #100]	; (80056e8 <FATFS_LinkDriverEx+0x94>)
 8005684:	7a5b      	ldrb	r3, [r3, #9]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <FATFS_LinkDriverEx+0x94>)
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <FATFS_LinkDriverEx+0x94>)
 8005694:	7a5b      	ldrb	r3, [r3, #9]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <FATFS_LinkDriverEx+0x94>)
 800569c:	4413      	add	r3, r2
 800569e:	79fa      	ldrb	r2, [r7, #7]
 80056a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80056a2:	4b11      	ldr	r3, [pc, #68]	; (80056e8 <FATFS_LinkDriverEx+0x94>)
 80056a4:	7a5b      	ldrb	r3, [r3, #9]
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	b2d1      	uxtb	r1, r2
 80056ac:	4a0e      	ldr	r2, [pc, #56]	; (80056e8 <FATFS_LinkDriverEx+0x94>)
 80056ae:	7251      	strb	r1, [r2, #9]
 80056b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80056b2:	7dbb      	ldrb	r3, [r7, #22]
 80056b4:	3330      	adds	r3, #48	; 0x30
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	3301      	adds	r3, #1
 80056c0:	223a      	movs	r2, #58	; 0x3a
 80056c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	3302      	adds	r3, #2
 80056c8:	222f      	movs	r2, #47	; 0x2f
 80056ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	3303      	adds	r3, #3
 80056d0:	2200      	movs	r2, #0
 80056d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	20000128 	.word	0x20000128

080056ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80056f6:	2200      	movs	r2, #0
 80056f8:	6839      	ldr	r1, [r7, #0]
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7ff ffaa 	bl	8005654 <FATFS_LinkDriverEx>
 8005700:	4603      	mov	r3, r0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <__libc_init_array>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	4d0d      	ldr	r5, [pc, #52]	; (8005744 <__libc_init_array+0x38>)
 8005710:	4c0d      	ldr	r4, [pc, #52]	; (8005748 <__libc_init_array+0x3c>)
 8005712:	1b64      	subs	r4, r4, r5
 8005714:	10a4      	asrs	r4, r4, #2
 8005716:	2600      	movs	r6, #0
 8005718:	42a6      	cmp	r6, r4
 800571a:	d109      	bne.n	8005730 <__libc_init_array+0x24>
 800571c:	4d0b      	ldr	r5, [pc, #44]	; (800574c <__libc_init_array+0x40>)
 800571e:	4c0c      	ldr	r4, [pc, #48]	; (8005750 <__libc_init_array+0x44>)
 8005720:	f000 f820 	bl	8005764 <_init>
 8005724:	1b64      	subs	r4, r4, r5
 8005726:	10a4      	asrs	r4, r4, #2
 8005728:	2600      	movs	r6, #0
 800572a:	42a6      	cmp	r6, r4
 800572c:	d105      	bne.n	800573a <__libc_init_array+0x2e>
 800572e:	bd70      	pop	{r4, r5, r6, pc}
 8005730:	f855 3b04 	ldr.w	r3, [r5], #4
 8005734:	4798      	blx	r3
 8005736:	3601      	adds	r6, #1
 8005738:	e7ee      	b.n	8005718 <__libc_init_array+0xc>
 800573a:	f855 3b04 	ldr.w	r3, [r5], #4
 800573e:	4798      	blx	r3
 8005740:	3601      	adds	r6, #1
 8005742:	e7f2      	b.n	800572a <__libc_init_array+0x1e>
 8005744:	08005824 	.word	0x08005824
 8005748:	08005824 	.word	0x08005824
 800574c:	08005824 	.word	0x08005824
 8005750:	08005828 	.word	0x08005828

08005754 <memset>:
 8005754:	4402      	add	r2, r0
 8005756:	4603      	mov	r3, r0
 8005758:	4293      	cmp	r3, r2
 800575a:	d100      	bne.n	800575e <memset+0xa>
 800575c:	4770      	bx	lr
 800575e:	f803 1b01 	strb.w	r1, [r3], #1
 8005762:	e7f9      	b.n	8005758 <memset+0x4>

08005764 <_init>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	bf00      	nop
 8005768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576a:	bc08      	pop	{r3}
 800576c:	469e      	mov	lr, r3
 800576e:	4770      	bx	lr

08005770 <_fini>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	bf00      	nop
 8005774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005776:	bc08      	pop	{r3}
 8005778:	469e      	mov	lr, r3
 800577a:	4770      	bx	lr
