
STM32_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005c28  08005c28  00015c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cd0  08005cd0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005cd0  08005cd0  00015cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cd8  08005cd8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cd8  08005cd8  00015cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cdc  08005cdc  00015cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000138  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a8  200001a8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f7e2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c6b  00000000  00000000  0002f882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  000324f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c30  00000000  00000000  000331f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023439  00000000  00000000  00033e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000111b3  00000000  00000000  00057261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c97d5  00000000  00000000  00068414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131be9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003564  00000000  00000000  00131c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005c10 	.word	0x08005c10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005c10 	.word	0x08005c10

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <bootloader_init>:

inline static uint8_t _checkPacket(uint8_t* packet, uint8_t expectedPacket[4],  uint8_t significance);

/* Functions implementation --------------------------------------------------*/
void bootloader_init()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0
	_bootloader_configMemory_initShadow(); // Init. shadow copy of config. memory
 80004d2:	f000 f8c1 	bl	8000658 <_bootloader_configMemory_initShadow>
	uint32_t curr_SW_MAJOR = _bootloader_configMemory_getParameter(CONFIG_MEMORY_SW_MAJOR); 
 80004d6:	2000      	movs	r0, #0
 80004d8:	f000 f928 	bl	800072c <_bootloader_configMemory_getParameter>
 80004dc:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t curr_SW_MINOR = _bootloader_configMemory_getParameter(CONFIG_MEMORY_SW_MINOR); 
 80004de:	2004      	movs	r0, #4
 80004e0:	f000 f924 	bl	800072c <_bootloader_configMemory_getParameter>
 80004e4:	62b8      	str	r0, [r7, #40]	; 0x28

	// 0_ Unlock memory + clear error flags 
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 80004e6:	4b53      	ldr	r3, [pc, #332]	; (8000634 <bootloader_init+0x168>)
 80004e8:	22b3      	movs	r2, #179	; 0xb3
 80004ea:	60da      	str	r2, [r3, #12]
	if(HAL_FLASH_Unlock() != HAL_OK) goto FLASH_ERROR; // Error in step 'a'
 80004ec:	f001 f8b8 	bl	8001660 <HAL_FLASH_Unlock>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d166      	bne.n	80005c4 <bootloader_init+0xf8>

	// 1_(0x80) Try to open communication with OTA serial interface 
	COMM_UART_SendData((uint8_t[4]) {0x80,0xFF,0xFF,0xFF}, 4, SERIAL_TIMEOUT);
 80004f6:	4b50      	ldr	r3, [pc, #320]	; (8000638 <bootloader_init+0x16c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	61fb      	str	r3, [r7, #28]
 80004fc:	f107 031c 	add.w	r3, r7, #28
 8000500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000504:	2104      	movs	r1, #4
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fb1a 	bl	8000b40 <COMM_UART_SendData>
	
	// 2_(0xC0) Check if MCU answered via OTA serial interface 
	if(COMM_UART_ReceiveData(rx, 4, SERIAL_TIMEOUT)!= HAL_OK) goto JUMP_TO_APPLICATION;
 800050c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000510:	2104      	movs	r1, #4
 8000512:	484a      	ldr	r0, [pc, #296]	; (800063c <bootloader_init+0x170>)
 8000514:	f000 fafc 	bl	8000b10 <COMM_UART_ReceiveData>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d170      	bne.n	8000600 <bootloader_init+0x134>
	if(_checkPacket(rx, (uint8_t[4]){0xC0,0xFF,0xFF,0xFF}, (uint8_t) 0b1000))
 800051e:	4b48      	ldr	r3, [pc, #288]	; (8000640 <bootloader_init+0x174>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	2208      	movs	r2, #8
 800052a:	4619      	mov	r1, r3
 800052c:	4843      	ldr	r0, [pc, #268]	; (800063c <bootloader_init+0x170>)
 800052e:	f000 fa97 	bl	8000a60 <_checkPacket>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d064      	beq.n	8000602 <bootloader_init+0x136>
	{
		// Check if the SW to be flashed is a different version from current MCU image
		if(!_checkPacket(rx, (uint8_t[4]){0xFF, (uint8_t)curr_SW_MAJOR, (uint8_t)curr_SW_MINOR, 0xFF}, (uint8_t) 0b0110))
 8000538:	23ff      	movs	r3, #255	; 0xff
 800053a:	743b      	strb	r3, [r7, #16]
 800053c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800053e:	b2db      	uxtb	r3, r3
 8000540:	747b      	strb	r3, [r7, #17]
 8000542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000544:	b2db      	uxtb	r3, r3
 8000546:	74bb      	strb	r3, [r7, #18]
 8000548:	23ff      	movs	r3, #255	; 0xff
 800054a:	74fb      	strb	r3, [r7, #19]
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	2206      	movs	r2, #6
 8000552:	4619      	mov	r1, r3
 8000554:	4839      	ldr	r0, [pc, #228]	; (800063c <bootloader_init+0x170>)
 8000556:	f000 fa83 	bl	8000a60 <_checkPacket>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d144      	bne.n	80005ea <bootloader_init+0x11e>
		{
			// --------------- a_(0x81) Erase memory dedicated to appl. sw + inform serial interface  ---------------
			if(!_bootloader_appMemory_eraseSectors()) goto FLASH_ERROR; // Error in step 'b'
 8000560:	f000 f914 	bl	800078c <_bootloader_appMemory_eraseSectors>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d02e      	beq.n	80005c8 <bootloader_init+0xfc>

			// --------------- b_(0x82) Send to serial interface -> ready to receive 'nOfPackets' of data  ---------------
			uint32_t nOfPackets = _bootloader_appMemory_acknowledgePackets();
 800056a:	f000 f957 	bl	800081c <_bootloader_appMemory_acknowledgePackets>
 800056e:	6278      	str	r0, [r7, #36]	; 0x24
			if(nOfPackets == 0) goto FLASH_ERROR; // Error in step 'c'
 8000570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000572:	2b00      	cmp	r3, #0
 8000574:	d02a      	beq.n	80005cc <bootloader_init+0x100>

			// --------------- c_Start receiving data + flashing MCU sectors (dummy flashing) ---------------
			uint32_t nOfFlashed = _bootloader_appMemory_receiveAndFlash(nOfPackets);
 8000576:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000578:	f000 f99c 	bl	80008b4 <_bootloader_appMemory_receiveAndFlash>
 800057c:	6238      	str	r0, [r7, #32]

			// --------------- d_Update config. memory area (shadow copy) ---------------
			_bootloader_configMemory_setParameter(CONFIG_MEMORY_SW_MAJOR, (uint32_t) *(uint32_t*)(sectorAddr[APP_MEMORY_SECINI] + APP_MEMORY_SW_MAJOR));
 800057e:	4b31      	ldr	r3, [pc, #196]	; (8000644 <bootloader_init+0x178>)
 8000580:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4619      	mov	r1, r3
 8000588:	2000      	movs	r0, #0
 800058a:	f000 f8e3 	bl	8000754 <_bootloader_configMemory_setParameter>
			_bootloader_configMemory_setParameter(CONFIG_MEMORY_SW_MINOR, (uint32_t) *(uint32_t*)(sectorAddr[APP_MEMORY_SECINI] + APP_MEMORY_SW_MINOR));
 800058e:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <bootloader_init+0x178>)
 8000590:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4619      	mov	r1, r3
 8000598:	2004      	movs	r0, #4
 800059a:	f000 f8db 	bl	8000754 <_bootloader_configMemory_setParameter>

			// --------------- e_Transmit feedback about flash process ---------------
			HAL_Delay(50); // Wait last transmission
 800059e:	2032      	movs	r0, #50	; 0x32
 80005a0:	f000 fe28 	bl	80011f4 <HAL_Delay>
			if(nOfFlashed == nOfPackets)
 80005a4:	6a3a      	ldr	r2, [r7, #32]
 80005a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d111      	bne.n	80005d0 <bootloader_init+0x104>
			{
				// TODO implement checksum / CRC in command '0x84'
				COMM_UART_SendData((uint8_t[4]) {0x84, 0xFF, 0xFF, 0xFF}, 4, SERIAL_TIMEOUT); // OK
 80005ac:	4b26      	ldr	r3, [pc, #152]	; (8000648 <bootloader_init+0x17c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ba:	2104      	movs	r1, #4
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fabf 	bl	8000b40 <COMM_UART_SendData>
 80005c2:	e01e      	b.n	8000602 <bootloader_init+0x136>
	if(HAL_FLASH_Unlock() != HAL_OK) goto FLASH_ERROR; // Error in step 'a'
 80005c4:	bf00      	nop
 80005c6:	e004      	b.n	80005d2 <bootloader_init+0x106>
			if(!_bootloader_appMemory_eraseSectors()) goto FLASH_ERROR; // Error in step 'b'
 80005c8:	bf00      	nop
 80005ca:	e002      	b.n	80005d2 <bootloader_init+0x106>
			if(nOfPackets == 0) goto FLASH_ERROR; // Error in step 'c'
 80005cc:	bf00      	nop
 80005ce:	e000      	b.n	80005d2 <bootloader_init+0x106>
			}
			else
			{
				FLASH_ERROR:
 80005d0:	bf00      	nop
				COMM_UART_SendData((uint8_t[4]) {0x8F, 0xFF, 0xFF, 0xFF}, 4, SERIAL_TIMEOUT); // NOK
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <bootloader_init+0x180>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005e0:	2104      	movs	r1, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 faac 	bl	8000b40 <COMM_UART_SendData>
 80005e8:	e00b      	b.n	8000602 <bootloader_init+0x136>
			}
		}
		else
		{
			// --------------- a_(0x8E) Attempt to re-flash the same SW - Abort
			COMM_UART_SendData((uint8_t[4]) {0x8E,0xFF,0xFF,0xFF}, 4, SERIAL_TIMEOUT);
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <bootloader_init+0x184>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f6:	2104      	movs	r1, #4
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 faa1 	bl	8000b40 <COMM_UART_SendData>
 80005fe:	e000      	b.n	8000602 <bootloader_init+0x136>
	if(COMM_UART_ReceiveData(rx, 4, SERIAL_TIMEOUT)!= HAL_OK) goto JUMP_TO_APPLICATION;
 8000600:	bf00      	nop
		}
	}
	
	JUMP_TO_APPLICATION:
	_bootloader_configMemory_deinitShadow();
 8000602:	f000 f853 	bl	80006ac <_bootloader_configMemory_deinitShadow>
	HAL_FLASH_Lock();
 8000606:	f001 f84d 	bl	80016a4 <HAL_FLASH_Lock>

	// 3_(0x85) Jump to application
	HAL_Delay(50); // Wait last transmission
 800060a:	2032      	movs	r0, #50	; 0x32
 800060c:	f000 fdf2 	bl	80011f4 <HAL_Delay>
	COMM_UART_SendData((uint8_t[4]){0x85,0xFF,0xFF,0xFF}, 4, SERIAL_TIMEOUT);
 8000610:	4b10      	ldr	r3, [pc, #64]	; (8000654 <bootloader_init+0x188>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	61bb      	str	r3, [r7, #24]
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800061e:	2104      	movs	r1, #4
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fa8d 	bl	8000b40 <COMM_UART_SendData>
	_bootloader_appMemory_loadApplication(); // Load application file
 8000626:	f000 f9d1 	bl	80009cc <_bootloader_appMemory_loadApplication>
}
 800062a:	bf00      	nop
 800062c:	3730      	adds	r7, #48	; 0x30
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023c00 	.word	0x40023c00
 8000638:	08005c28 	.word	0x08005c28
 800063c:	2000008c 	.word	0x2000008c
 8000640:	08005c2c 	.word	0x08005c2c
 8000644:	08040000 	.word	0x08040000
 8000648:	08005c30 	.word	0x08005c30
 800064c:	08005c34 	.word	0x08005c34
 8000650:	08005c38 	.word	0x08005c38
 8000654:	08005c3c 	.word	0x08005c3c

08000658 <_bootloader_configMemory_initShadow>:

// ********** SW Config management methods **********

// Create a shadow of the Flash memory (SW configuration sector) in the heap for faster access and manipulation
inline static uint32_t* _bootloader_configMemory_initShadow()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	// Allocate shadow memory
	swConfigShadow = malloc(sizeof(uint32_t) * CONFIG_MEMORY_USED_SIZE);
 800065e:	2008      	movs	r0, #8
 8000660:	f005 f9c0 	bl	80059e4 <malloc>
 8000664:	4603      	mov	r3, r0
 8000666:	461a      	mov	r2, r3
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <_bootloader_configMemory_initShadow+0x4c>)
 800066a:	601a      	str	r2, [r3, #0]
	
	// Create shadow copy of parameters
	for(uint32_t idx=0; idx < sizeof(uint32_t) * CONFIG_MEMORY_USED_SIZE; idx+=0x04)
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	e00e      	b.n	8000690 <_bootloader_configMemory_initShadow+0x38>
	{
		*(swConfigShadow + (idx>>2)) = (uint32_t) *(uint32_t*)(sectorAddr[CONFIG_MEMORY_SECINI] + idx);
 8000672:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <_bootloader_configMemory_initShadow+0x50>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4413      	add	r3, r2
 8000678:	4619      	mov	r1, r3
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <_bootloader_configMemory_initShadow+0x4c>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	089b      	lsrs	r3, r3, #2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	680a      	ldr	r2, [r1, #0]
 8000688:	601a      	str	r2, [r3, #0]
	for(uint32_t idx=0; idx < sizeof(uint32_t) * CONFIG_MEMORY_USED_SIZE; idx+=0x04)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3304      	adds	r3, #4
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b07      	cmp	r3, #7
 8000694:	d9ed      	bls.n	8000672 <_bootloader_configMemory_initShadow+0x1a>
	}
	return swConfigShadow;
 8000696:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <_bootloader_configMemory_initShadow+0x4c>)
 8000698:	681b      	ldr	r3, [r3, #0]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000090 	.word	0x20000090
 80006a8:	08008000 	.word	0x08008000

080006ac <_bootloader_configMemory_deinitShadow>:

inline static uint8_t _bootloader_configMemory_deinitShadow()
{
 80006ac:	b5b0      	push	{r4, r5, r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus;

	// Erase config. memory sectors
	for(uint8_t idxS=CONFIG_MEMORY_SECINI; idxS <= CONFIG_MEMORY_SECFIN; idxS++ )
 80006b2:	2302      	movs	r3, #2
 80006b4:	73fb      	strb	r3, [r7, #15]
 80006b6:	e007      	b.n	80006c8 <_bootloader_configMemory_deinitShadow+0x1c>
	{
		FLASH_Erase_Sector(idxS,FLASH_VOLTAGE_RANGE_3);
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	2102      	movs	r1, #2
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 f931 	bl	8001924 <FLASH_Erase_Sector>
	for(uint8_t idxS=CONFIG_MEMORY_SECINI; idxS <= CONFIG_MEMORY_SECFIN; idxS++ )
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	3301      	adds	r3, #1
 80006c6:	73fb      	strb	r3, [r7, #15]
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d9f4      	bls.n	80006b8 <_bootloader_configMemory_deinitShadow+0xc>
	}

	// Write config. memory sectors with shadow copy
	for(uint32_t idx=0; idx < sizeof(uint32_t) * CONFIG_MEMORY_USED_SIZE; idx+=0x04)
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	e016      	b.n	8000702 <_bootloader_configMemory_deinitShadow+0x56>
	{
		halStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
			sectorAddr[CONFIG_MEMORY_SECINI] + idx, 
 80006d4:	4a13      	ldr	r2, [pc, #76]	; (8000724 <_bootloader_configMemory_deinitShadow+0x78>)
		halStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	18d1      	adds	r1, r2, r3
			(uint64_t) *(swConfigShadow + (idx>>2)));
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <_bootloader_configMemory_deinitShadow+0x7c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	089b      	lsrs	r3, r3, #2
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	681b      	ldr	r3, [r3, #0]
		halStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80006e8:	2200      	movs	r2, #0
 80006ea:	461c      	mov	r4, r3
 80006ec:	4615      	mov	r5, r2
 80006ee:	4622      	mov	r2, r4
 80006f0:	462b      	mov	r3, r5
 80006f2:	2002      	movs	r0, #2
 80006f4:	f000 ff60 	bl	80015b8 <HAL_FLASH_Program>
 80006f8:	4603      	mov	r3, r0
 80006fa:	71fb      	strb	r3, [r7, #7]
	for(uint32_t idx=0; idx < sizeof(uint32_t) * CONFIG_MEMORY_USED_SIZE; idx+=0x04)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	3304      	adds	r3, #4
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	2b07      	cmp	r3, #7
 8000706:	d9e5      	bls.n	80006d4 <_bootloader_configMemory_deinitShadow+0x28>

		//if(halStatus != HAL_OK) return 0;
	}

	free(swConfigShadow);
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <_bootloader_configMemory_deinitShadow+0x7c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f005 f971 	bl	80059f4 <free>
	swConfigShadow = NULL;
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <_bootloader_configMemory_deinitShadow+0x7c>)
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]

	return 1;
 8000718:	2301      	movs	r3, #1
}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bdb0      	pop	{r4, r5, r7, pc}
 8000722:	bf00      	nop
 8000724:	08008000 	.word	0x08008000
 8000728:	20000090 	.word	0x20000090

0800072c <_bootloader_configMemory_getParameter>:

inline static uint32_t _bootloader_configMemory_getParameter(uint32_t memOffset)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	return (uint32_t) *(uint32_t*)(swConfigShadow + (memOffset >>2));
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <_bootloader_configMemory_getParameter+0x24>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	089b      	lsrs	r3, r3, #2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	681b      	ldr	r3, [r3, #0]
}
 8000742:	4618      	mov	r0, r3
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000090 	.word	0x20000090

08000754 <_bootloader_configMemory_setParameter>:

inline static uint32_t _bootloader_configMemory_setParameter(uint32_t memOffset, uint32_t paramValue)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	*(uint32_t*)(swConfigShadow + (memOffset>>2)) = (uint32_t) paramValue;
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <_bootloader_configMemory_setParameter+0x34>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	089b      	lsrs	r3, r3, #2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	601a      	str	r2, [r3, #0]
	return (uint32_t) *(uint32_t*)(swConfigShadow + (memOffset>>2));
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <_bootloader_configMemory_setParameter+0x34>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	089b      	lsrs	r3, r3, #2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	4413      	add	r3, r2
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	20000090 	.word	0x20000090

0800078c <_bootloader_appMemory_eraseSectors>:

// ********** Flashing procedure & SW Update methods **********
inline static uint8_t _bootloader_appMemory_eraseSectors()
{	
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus;
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET); // Turn-off LED0
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000798:	481f      	ldr	r0, [pc, #124]	; (8000818 <_bootloader_appMemory_eraseSectors+0x8c>)
 800079a:	f001 fabf 	bl	8001d1c <HAL_GPIO_WritePin>
	for(uint8_t idxS=APP_MEMORY_SECINI; idxS <= APP_MEMORY_SECFIN; idxS++ )
 800079e:	2306      	movs	r3, #6
 80007a0:	71fb      	strb	r3, [r7, #7]
 80007a2:	e02a      	b.n	80007fa <_bootloader_appMemory_eraseSectors+0x6e>
	{
		FLASH_Erase_Sector(idxS,FLASH_VOLTAGE_RANGE_3);
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2102      	movs	r1, #2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 f8bb 	bl	8001924 <FLASH_Erase_Sector>
		HAL_Delay(50); // Wait last transmission
 80007ae:	2032      	movs	r0, #50	; 0x32
 80007b0:	f000 fd20 	bl	80011f4 <HAL_Delay>
		halStatus = COMM_UART_SendData((uint8_t[4]){0x81,
 80007b4:	2381      	movs	r3, #129	; 0x81
 80007b6:	703b      	strb	r3, [r7, #0]
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	707b      	strb	r3, [r7, #1]
										idxS,
										idxS == APP_MEMORY_SECFIN,
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2b0a      	cmp	r3, #10
 80007c0:	bf0c      	ite	eq
 80007c2:	2301      	moveq	r3, #1
 80007c4:	2300      	movne	r3, #0
 80007c6:	b2db      	uxtb	r3, r3
		halStatus = COMM_UART_SendData((uint8_t[4]){0x81,
 80007c8:	70bb      	strb	r3, [r7, #2]
 80007ca:	23ff      	movs	r3, #255	; 0xff
 80007cc:	70fb      	strb	r3, [r7, #3]
 80007ce:	463b      	mov	r3, r7
 80007d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007d4:	2104      	movs	r1, #4
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f9b2 	bl	8000b40 <COMM_UART_SendData>
 80007dc:	4603      	mov	r3, r0
 80007de:	71bb      	strb	r3, [r7, #6]
										0xFF}, 
										4, SERIAL_TIMEOUT); // Send (0x81 + sector no. + isLastSector) to confirm erased sector
		if(halStatus!= HAL_OK) return 0; // Error in TX
 80007e0:	79bb      	ldrb	r3, [r7, #6]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <_bootloader_appMemory_eraseSectors+0x5e>
 80007e6:	2300      	movs	r3, #0
 80007e8:	e011      	b.n	800080e <_bootloader_appMemory_eraseSectors+0x82>
		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_9); // Toggle LED0
 80007ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ee:	480a      	ldr	r0, [pc, #40]	; (8000818 <_bootloader_appMemory_eraseSectors+0x8c>)
 80007f0:	f001 faad 	bl	8001d4e <HAL_GPIO_TogglePin>
	for(uint8_t idxS=APP_MEMORY_SECINI; idxS <= APP_MEMORY_SECFIN; idxS++ )
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	3301      	adds	r3, #1
 80007f8:	71fb      	strb	r3, [r7, #7]
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b0a      	cmp	r3, #10
 80007fe:	d9d1      	bls.n	80007a4 <_bootloader_appMemory_eraseSectors+0x18>
	}
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET); // Turn-off LED0
 8000800:	2201      	movs	r2, #1
 8000802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <_bootloader_appMemory_eraseSectors+0x8c>)
 8000808:	f001 fa88 	bl	8001d1c <HAL_GPIO_WritePin>
	return 1; // OK
 800080c:	2301      	movs	r3, #1
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40021400 	.word	0x40021400

0800081c <_bootloader_appMemory_acknowledgePackets>:

inline static uint32_t _bootloader_appMemory_acknowledgePackets()
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus;

	// Receive packets data in RX
	if(COMM_UART_ReceiveData(rx, 4, SERIAL_TIMEOUT) != HAL_OK) return 0; // Error in RX procedure
 8000822:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000826:	2104      	movs	r1, #4
 8000828:	4820      	ldr	r0, [pc, #128]	; (80008ac <_bootloader_appMemory_acknowledgePackets+0x90>)
 800082a:	f000 f971 	bl	8000b10 <COMM_UART_ReceiveData>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <_bootloader_appMemory_acknowledgePackets+0x1c>
 8000834:	2300      	movs	r3, #0
 8000836:	e035      	b.n	80008a4 <_bootloader_appMemory_acknowledgePackets+0x88>
	
	// Check if a '0xC1' was received
	if(_checkPacket(rx, (uint8_t[4]){0xC1,0xFF,0xFF,0xFF}, (uint8_t) 0b1000))
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <_bootloader_appMemory_acknowledgePackets+0x94>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2208      	movs	r2, #8
 8000842:	4619      	mov	r1, r3
 8000844:	4819      	ldr	r0, [pc, #100]	; (80008ac <_bootloader_appMemory_acknowledgePackets+0x90>)
 8000846:	f000 f90b 	bl	8000a60 <_checkPacket>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d028      	beq.n	80008a2 <_bootloader_appMemory_acknowledgePackets+0x86>
	{
		uint32_t nOfPackets = (uint32_t) ((rx[3]<<0) + (rx[2]<<8) + (rx[1]<<16)); // Parse packets data
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <_bootloader_appMemory_acknowledgePackets+0x90>)
 8000852:	78db      	ldrb	r3, [r3, #3]
 8000854:	461a      	mov	r2, r3
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <_bootloader_appMemory_acknowledgePackets+0x90>)
 8000858:	789b      	ldrb	r3, [r3, #2]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	441a      	add	r2, r3
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <_bootloader_appMemory_acknowledgePackets+0x90>)
 8000860:	785b      	ldrb	r3, [r3, #1]
 8000862:	041b      	lsls	r3, r3, #16
 8000864:	4413      	add	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
		halStatus = COMM_UART_SendData((uint8_t[4]) {0x82,
 8000868:	2382      	movs	r3, #130	; 0x82
 800086a:	703b      	strb	r3, [r7, #0]
			(uint8_t) ((nOfPackets & 0x00FF0000) >> 16),
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	0c1b      	lsrs	r3, r3, #16
 8000870:	b2db      	uxtb	r3, r3
		halStatus = COMM_UART_SendData((uint8_t[4]) {0x82,
 8000872:	707b      	strb	r3, [r7, #1]
			(uint8_t) ((nOfPackets & 0x0000FF00) >> 8),
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	0a1b      	lsrs	r3, r3, #8
 8000878:	b2db      	uxtb	r3, r3
		halStatus = COMM_UART_SendData((uint8_t[4]) {0x82,
 800087a:	70bb      	strb	r3, [r7, #2]
			(uint8_t) ((nOfPackets & 0x000000FF) >> 0)},
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	b2db      	uxtb	r3, r3
		halStatus = COMM_UART_SendData((uint8_t[4]) {0x82,
 8000880:	70fb      	strb	r3, [r7, #3]
 8000882:	463b      	mov	r3, r7
 8000884:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000888:	2104      	movs	r1, #4
 800088a:	4618      	mov	r0, r3
 800088c:	f000 f958 	bl	8000b40 <COMM_UART_SendData>
 8000890:	4603      	mov	r3, r0
 8000892:	72fb      	strb	r3, [r7, #11]
			4, SERIAL_TIMEOUT); // Answer back acknowledging the received 'nOfPackets' value
		if(halStatus != HAL_OK) return 0; // Error in TX procedure
 8000894:	7afb      	ldrb	r3, [r7, #11]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <_bootloader_appMemory_acknowledgePackets+0x82>
 800089a:	2300      	movs	r3, #0
 800089c:	e002      	b.n	80008a4 <_bootloader_appMemory_acknowledgePackets+0x88>
		return nOfPackets;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	e000      	b.n	80008a4 <_bootloader_appMemory_acknowledgePackets+0x88>
	}
	else
	{
		return 0; //Error - Unexpected command from serial interface
 80008a2:	2300      	movs	r3, #0
	}
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000008c 	.word	0x2000008c
 80008b0:	08005c40 	.word	0x08005c40

080008b4 <_bootloader_appMemory_receiveAndFlash>:

inline static uint32_t _bootloader_appMemory_receiveAndFlash(uint32_t nOfPackets)
{
 80008b4:	b5b0      	push	{r4, r5, r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef halStatus;
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET); // Turn-off LED1
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c2:	483e      	ldr	r0, [pc, #248]	; (80009bc <_bootloader_appMemory_receiveAndFlash+0x108>)
 80008c4:	f001 fa2a 	bl	8001d1c <HAL_GPIO_WritePin>
	uint32_t nOfFlashed = 0; // Counter to track progress of flashed packets
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
	for(uint8_t nSector = APP_MEMORY_SECINI; nSector<= APP_MEMORY_SECFIN; nSector++)
 80008cc:	2306      	movs	r3, #6
 80008ce:	76fb      	strb	r3, [r7, #27]
 80008d0:	e061      	b.n	8000996 <_bootloader_appMemory_receiveAndFlash+0xe2>
	{
		// FIXME this command cause all the memory to be shifted by 1 byte - Timing Critical
		//COMM_UART_SendData((uint8_t[4]) {0x83, nSector, 0x00, 0xFF}, 4, SERIAL_TIMEOUT); // Feedback when a sector is starting to be flashed

		// Write all the addresses contained in the current flash sector
		for(uint32_t addr=sectorAddr[nSector]; addr<(sectorAddr[nSector]+sectorSize[nSector]); addr+=0x04)
 80008d2:	7efb      	ldrb	r3, [r7, #27]
 80008d4:	4a3a      	ldr	r2, [pc, #232]	; (80009c0 <_bootloader_appMemory_receiveAndFlash+0x10c>)
 80008d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	e03c      	b.n	8000958 <_bootloader_appMemory_receiveAndFlash+0xa4>
		{
			// Receive a SW packet via serial + parse it (little-endian) + write it to flash memory
			halStatus = COMM_UART_ReceiveData(rx, 4, SERIAL_TIMEOUT);
 80008de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008e2:	2104      	movs	r1, #4
 80008e4:	4837      	ldr	r0, [pc, #220]	; (80009c4 <_bootloader_appMemory_receiveAndFlash+0x110>)
 80008e6:	f000 f913 	bl	8000b10 <COMM_UART_ReceiveData>
 80008ea:	4603      	mov	r3, r0
 80008ec:	74fb      	strb	r3, [r7, #19]
			if(halStatus != HAL_OK) goto END_PROGRAMMING;
 80008ee:	7cfb      	ldrb	r3, [r7, #19]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d154      	bne.n	800099e <_bootloader_appMemory_receiveAndFlash+0xea>

			uint32_t packetData = (rx[3] << 24) + (rx[2] << 16) + (rx[1] << 8) + (rx[0] << 0);
 80008f4:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <_bootloader_appMemory_receiveAndFlash+0x110>)
 80008f6:	78db      	ldrb	r3, [r3, #3]
 80008f8:	061a      	lsls	r2, r3, #24
 80008fa:	4b32      	ldr	r3, [pc, #200]	; (80009c4 <_bootloader_appMemory_receiveAndFlash+0x110>)
 80008fc:	789b      	ldrb	r3, [r3, #2]
 80008fe:	041b      	lsls	r3, r3, #16
 8000900:	441a      	add	r2, r3
 8000902:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <_bootloader_appMemory_receiveAndFlash+0x110>)
 8000904:	785b      	ldrb	r3, [r3, #1]
 8000906:	021b      	lsls	r3, r3, #8
 8000908:	4413      	add	r3, r2
 800090a:	4a2e      	ldr	r2, [pc, #184]	; (80009c4 <_bootloader_appMemory_receiveAndFlash+0x110>)
 800090c:	7812      	ldrb	r2, [r2, #0]
 800090e:	4413      	add	r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
			halStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, (uint64_t) packetData);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2200      	movs	r2, #0
 8000916:	461c      	mov	r4, r3
 8000918:	4615      	mov	r5, r2
 800091a:	4622      	mov	r2, r4
 800091c:	462b      	mov	r3, r5
 800091e:	6979      	ldr	r1, [r7, #20]
 8000920:	2002      	movs	r0, #2
 8000922:	f000 fe49 	bl	80015b8 <HAL_FLASH_Program>
 8000926:	4603      	mov	r3, r0
 8000928:	74fb      	strb	r3, [r7, #19]

			// Check if programmed memory position == received packet OR
			// HAL error during programming OR
			// All packets were flashed / finished
			if(*((uint32_t*)addr) != packetData
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	429a      	cmp	r2, r3
 8000932:	d136      	bne.n	80009a2 <_bootloader_appMemory_receiveAndFlash+0xee>
				|| halStatus != HAL_OK 
 8000934:	7cfb      	ldrb	r3, [r7, #19]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d133      	bne.n	80009a2 <_bootloader_appMemory_receiveAndFlash+0xee>
				|| ++nOfFlashed == nOfPackets)	goto END_PROGRAMMING;
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3301      	adds	r3, #1
 800093e:	61fb      	str	r3, [r7, #28]
 8000940:	69fa      	ldr	r2, [r7, #28]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	429a      	cmp	r2, r3
 8000946:	d02c      	beq.n	80009a2 <_bootloader_appMemory_receiveAndFlash+0xee>
			HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);
 8000948:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094c:	481b      	ldr	r0, [pc, #108]	; (80009bc <_bootloader_appMemory_receiveAndFlash+0x108>)
 800094e:	f001 f9fe 	bl	8001d4e <HAL_GPIO_TogglePin>
		for(uint32_t addr=sectorAddr[nSector]; addr<(sectorAddr[nSector]+sectorSize[nSector]); addr+=0x04)
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	3304      	adds	r3, #4
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	7efb      	ldrb	r3, [r7, #27]
 800095a:	4a19      	ldr	r2, [pc, #100]	; (80009c0 <_bootloader_appMemory_receiveAndFlash+0x10c>)
 800095c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000960:	7efb      	ldrb	r3, [r7, #27]
 8000962:	4919      	ldr	r1, [pc, #100]	; (80009c8 <_bootloader_appMemory_receiveAndFlash+0x114>)
 8000964:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000968:	4413      	add	r3, r2
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	429a      	cmp	r2, r3
 800096e:	d3b6      	bcc.n	80008de <_bootloader_appMemory_receiveAndFlash+0x2a>
		}
		COMM_UART_SendData((uint8_t[4]) {0x83, nSector, 0x01, 0xFF}, 4, SERIAL_TIMEOUT); // Feedback when a sector is full
 8000970:	2383      	movs	r3, #131	; 0x83
 8000972:	723b      	strb	r3, [r7, #8]
 8000974:	7efb      	ldrb	r3, [r7, #27]
 8000976:	727b      	strb	r3, [r7, #9]
 8000978:	2301      	movs	r3, #1
 800097a:	72bb      	strb	r3, [r7, #10]
 800097c:	23ff      	movs	r3, #255	; 0xff
 800097e:	72fb      	strb	r3, [r7, #11]
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000988:	2104      	movs	r1, #4
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f8d8 	bl	8000b40 <COMM_UART_SendData>
	for(uint8_t nSector = APP_MEMORY_SECINI; nSector<= APP_MEMORY_SECFIN; nSector++)
 8000990:	7efb      	ldrb	r3, [r7, #27]
 8000992:	3301      	adds	r3, #1
 8000994:	76fb      	strb	r3, [r7, #27]
 8000996:	7efb      	ldrb	r3, [r7, #27]
 8000998:	2b0a      	cmp	r3, #10
 800099a:	d99a      	bls.n	80008d2 <_bootloader_appMemory_receiveAndFlash+0x1e>
	}

	END_PROGRAMMING:
 800099c:	e002      	b.n	80009a4 <_bootloader_appMemory_receiveAndFlash+0xf0>
			if(halStatus != HAL_OK) goto END_PROGRAMMING;
 800099e:	bf00      	nop
 80009a0:	e000      	b.n	80009a4 <_bootloader_appMemory_receiveAndFlash+0xf0>
				|| ++nOfFlashed == nOfPackets)	goto END_PROGRAMMING;
 80009a2:	bf00      	nop
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET); // Turn-off LED1
 80009a4:	2201      	movs	r2, #1
 80009a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009aa:	4804      	ldr	r0, [pc, #16]	; (80009bc <_bootloader_appMemory_receiveAndFlash+0x108>)
 80009ac:	f001 f9b6 	bl	8001d1c <HAL_GPIO_WritePin>
	return nOfFlashed;
 80009b0:	69fb      	ldr	r3, [r7, #28]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bdb0      	pop	{r4, r5, r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021400 	.word	0x40021400
 80009c0:	08005c44 	.word	0x08005c44
 80009c4:	2000008c 	.word	0x2000008c
 80009c8:	08005c74 	.word	0x08005c74

080009cc <_bootloader_appMemory_loadApplication>:

/**
 * @brief This function ensures a 'clean-state' jump to the application code
 */
inline static void _bootloader_appMemory_loadApplication()
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d2:	b672      	cpsid	i
}
 80009d4:	bf00      	nop
	// Disable all interrupts to perform all steps before loading application code
	__disable_irq();

	// Function pointer to application's reset handler
	void (*app_Reset_Handler)(void) =	(void*)(*(volatile uint32_t*)(sectorAddr[APP_MEMORY_SECINI] + 0x04));
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <_bootloader_appMemory_loadApplication+0x80>)
 80009d8:	3304      	adds	r3, #4
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	607b      	str	r3, [r7, #4]

	// Reset SCB parameters
    SCB -> ICSR = 0x00000000;   // reset value;
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <_bootloader_appMemory_loadApplication+0x84>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
    SCB -> SCR = 0;
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <_bootloader_appMemory_loadApplication+0x84>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
    SCB -> CCR = 0x00000200;    // reset value
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <_bootloader_appMemory_loadApplication+0x84>)
 80009ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f0:	615a      	str	r2, [r3, #20]
    SCB -> SHP[0] = 0;
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <_bootloader_appMemory_loadApplication+0x84>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	761a      	strb	r2, [r3, #24]
    SCB -> SHCSR = 0;
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <_bootloader_appMemory_loadApplication+0x84>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
    SCB -> CFSR = (SCB_CFSR_DIVBYZERO_Msk | SCB_CFSR_UNALIGNED_Msk | SCB_CFSR_UNDEFINSTR_Msk | SCB_CFSR_NOCP_Msk | SCB_CFSR_INVPC_Msk | SCB_CFSR_INVSTATE_Msk);
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <_bootloader_appMemory_loadApplication+0x84>)
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <_bootloader_appMemory_loadApplication+0x88>)
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
    SCB -> HFSR = (SCB_HFSR_DEBUGEVT_Msk | SCB_HFSR_FORCED_Msk | SCB_HFSR_VECTTBL_Msk);
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <_bootloader_appMemory_loadApplication+0x84>)
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <_bootloader_appMemory_loadApplication+0x8c>)
 8000a08:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set the Vector Table Offset Register (VTOR) to the application vector table
	SCB -> VTOR = sectorAddr[APP_MEMORY_SECINI];
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <_bootloader_appMemory_loadApplication+0x84>)
 8000a0c:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <_bootloader_appMemory_loadApplication+0x80>)
 8000a0e:	609a      	str	r2, [r3, #8]

    // Set the Main Stack Pointer (MSP) to the value at the beginning of the application's flash section
	__set_MSP(*(volatile uint32_t *) sectorAddr[APP_MEMORY_SECINI]);
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <_bootloader_appMemory_loadApplication+0x80>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	f383 8808 	msr	MSP, r3
}
 8000a1c:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a1e:	f3bf 8f4f 	dsb	sy
}
 8000a22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a24:	f3bf 8f6f 	isb	sy
}
 8000a28:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8000a2a:	b662      	cpsie	i
}
 8000a2c:	bf00      	nop

	// Re-enable all interrupts
	__enable_irq();

    // Disable / Reset SysTick before jumping to application
    SysTick -> CTRL = 0;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <_bootloader_appMemory_loadApplication+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
    SysTick -> LOAD = 0;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <_bootloader_appMemory_loadApplication+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	605a      	str	r2, [r3, #4]
    SysTick -> VAL  = 0;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <_bootloader_appMemory_loadApplication+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]

	// Call application's reset handler (starting point)
	app_Reset_Handler();
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4798      	blx	r3
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	08040000 	.word	0x08040000
 8000a50:	e000ed00 	.word	0xe000ed00
 8000a54:	030f0000 	.word	0x030f0000
 8000a58:	c0000002 	.word	0xc0000002
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <_checkPacket>:

/*
 * @brief: Method to check if the contents of a packet meet the required content according to the significance.
 */
inline static uint8_t _checkPacket(uint8_t* packet, uint8_t expectedPacket[4],  uint8_t significance)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b087      	sub	sp, #28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	75fb      	strb	r3, [r7, #23]

	if(*packet	   == expectedPacket[0] || ((significance & 0b1000) == 0)) result |= (result | 0b1000);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d004      	beq.n	8000a88 <_checkPacket+0x28>
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d103      	bne.n	8000a90 <_checkPacket+0x30>
 8000a88:	7dfb      	ldrb	r3, [r7, #23]
 8000a8a:	f043 0308 	orr.w	r3, r3, #8
 8000a8e:	75fb      	strb	r3, [r7, #23]
	if(*(packet+1) == expectedPacket[1] || ((significance & 0b0100) == 0)) result |= (result | 0b0100);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3301      	adds	r3, #1
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d004      	beq.n	8000aaa <_checkPacket+0x4a>
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d103      	bne.n	8000ab2 <_checkPacket+0x52>
 8000aaa:	7dfb      	ldrb	r3, [r7, #23]
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	75fb      	strb	r3, [r7, #23]
	if(*(packet+2) == expectedPacket[2] || ((significance & 0b0010) == 0)) result |= (result | 0b0010);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	3302      	adds	r3, #2
 8000ab6:	781a      	ldrb	r2, [r3, #0]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	3302      	adds	r3, #2
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d004      	beq.n	8000acc <_checkPacket+0x6c>
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d103      	bne.n	8000ad4 <_checkPacket+0x74>
 8000acc:	7dfb      	ldrb	r3, [r7, #23]
 8000ace:	f043 0302 	orr.w	r3, r3, #2
 8000ad2:	75fb      	strb	r3, [r7, #23]
	if(*(packet+3) == expectedPacket[3] || ((significance & 0b0001) == 0)) result |= (result | 0b0001);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3303      	adds	r3, #3
 8000ad8:	781a      	ldrb	r2, [r3, #0]
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	3303      	adds	r3, #3
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d004      	beq.n	8000aee <_checkPacket+0x8e>
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d103      	bne.n	8000af6 <_checkPacket+0x96>
 8000aee:	7dfb      	ldrb	r3, [r7, #23]
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	75fb      	strb	r3, [r7, #23]

	return (result == 0b1111);
 8000af6:	7dfb      	ldrb	r3, [r7, #23]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	bf0c      	ite	eq
 8000afc:	2301      	moveq	r3, #1
 8000afe:	2300      	movne	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	371c      	adds	r7, #28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <COMM_UART_ReceiveData>:
static uint32_t _ticToc(void);

/* Functions implementation --------------------------------------------------*/

HAL_StatusTypeDef COMM_UART_ReceiveData(uint8_t* dataPtr, uint8_t size, uint32_t delay)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	607a      	str	r2, [r7, #4]
 8000b1c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef halStatus;
  halStatus = HAL_UART_Receive(&UART_DEVICE_HANDLER , dataPtr, size, delay);
 8000b1e:	7afb      	ldrb	r3, [r7, #11]
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	68f9      	ldr	r1, [r7, #12]
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <COMM_UART_ReceiveData+0x2c>)
 8000b28:	f002 ffee 	bl	8003b08 <HAL_UART_Receive>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	75fb      	strb	r3, [r7, #23]
  return halStatus;
 8000b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000118 	.word	0x20000118

08000b40 <COMM_UART_SendData>:

// Transmit string via UART in blocking mode
HAL_StatusTypeDef COMM_UART_SendData(uint8_t* dataPtr, uint8_t size, uint32_t delay)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	607a      	str	r2, [r7, #4]
 8000b4c:	72fb      	strb	r3, [r7, #11]
  // Start data transmission (force transmission)
  HAL_StatusTypeDef halStatus;
  do{
    halStatus = HAL_UART_Transmit(&UART_DEVICE_HANDLER, dataPtr , size, delay);
 8000b4e:	7afb      	ldrb	r3, [r7, #11]
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68f9      	ldr	r1, [r7, #12]
 8000b56:	4806      	ldr	r0, [pc, #24]	; (8000b70 <COMM_UART_SendData+0x30>)
 8000b58:	f002 ff44 	bl	80039e4 <HAL_UART_Transmit>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	75fb      	strb	r3, [r7, #23]
  }
  while(halStatus == HAL_BUSY);
 8000b60:	7dfb      	ldrb	r3, [r7, #23]
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d0f3      	beq.n	8000b4e <COMM_UART_SendData+0xe>
  return halStatus;
 8000b66:	7dfb      	ldrb	r3, [r7, #23]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000118 	.word	0x20000118

08000b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b78:	f000 faca 	bl	8001110 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7c:	f000 f80c 	bl	8000b98 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b80:	f000 f8bc 	bl	8000cfc <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000b84:	f000 f870 	bl	8000c68 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000b88:	f004 fd08 	bl	800559c <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8000b8c:	f000 f88c 	bl	8000ca8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  //initialise_monitor_handles(); // Semi-hosting

  bootloader_init(); // Start bootloader
 8000b90:	f7ff fc9c 	bl	80004cc <bootloader_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <main+0x20>
	...

08000b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b094      	sub	sp, #80	; 0x50
 8000b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9e:	f107 0320 	add.w	r3, r7, #32
 8000ba2:	2230      	movs	r2, #48	; 0x30
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f004 ff2c 	bl	8005a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <SystemClock_Config+0xc8>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	4a26      	ldr	r2, [pc, #152]	; (8000c60 <SystemClock_Config+0xc8>)
 8000bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bca:	6413      	str	r3, [r2, #64]	; 0x40
 8000bcc:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <SystemClock_Config+0xc8>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <SystemClock_Config+0xcc>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a20      	ldr	r2, [pc, #128]	; (8000c64 <SystemClock_Config+0xcc>)
 8000be2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <SystemClock_Config+0xcc>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c00:	2302      	movs	r3, #2
 8000c02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c04:	2300      	movs	r3, #0
 8000c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c08:	2310      	movs	r3, #16
 8000c0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c0c:	23c0      	movs	r3, #192	; 0xc0
 8000c0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c14:	2304      	movs	r3, #4
 8000c16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c18:	f107 0320 	add.w	r3, r7, #32
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 f8b1 	bl	8001d84 <HAL_RCC_OscConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c28:	f000 f8e4 	bl	8000df4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 fb14 	bl	8002274 <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000c52:	f000 f8cf 	bl	8000df4 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3750      	adds	r7, #80	; 0x50
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40007000 	.word	0x40007000

08000c68 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_SDIO_SD_Init+0x38>)
 8000c6e:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <MX_SDIO_SD_Init+0x3c>)
 8000c70:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_SDIO_SD_Init+0x38>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_SDIO_SD_Init+0x38>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_SDIO_SD_Init+0x38>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_SDIO_SD_Init+0x38>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <MX_SDIO_SD_Init+0x38>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <MX_SDIO_SD_Init+0x38>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20000094 	.word	0x20000094
 8000ca4:	40012c00 	.word	0x40012c00

08000ca8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <MX_USART2_UART_Init+0x48>)
 8000cae:	4a11      	ldr	r2, [pc, #68]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 576000;
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_USART2_UART_Init+0x48>)
 8000cb4:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <MX_USART2_UART_Init+0x50>)
 8000cb6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <MX_USART2_UART_Init+0x48>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_USART2_UART_Init+0x48>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <MX_USART2_UART_Init+0x48>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_USART2_UART_Init+0x48>)
 8000ccc:	220c      	movs	r2, #12
 8000cce:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <MX_USART2_UART_Init+0x48>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_USART2_UART_Init+0x48>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cdc:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <MX_USART2_UART_Init+0x48>)
 8000cde:	f002 fe34 	bl	800394a <HAL_UART_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000ce8:	f000 f884 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000118 	.word	0x20000118
 8000cf4:	40004400 	.word	0x40004400
 8000cf8:	0008ca00 	.word	0x0008ca00

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <MX_GPIO_Init+0xec>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a33      	ldr	r2, [pc, #204]	; (8000de8 <MX_GPIO_Init+0xec>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <MX_GPIO_Init+0xec>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <MX_GPIO_Init+0xec>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a2c      	ldr	r2, [pc, #176]	; (8000de8 <MX_GPIO_Init+0xec>)
 8000d38:	f043 0320 	orr.w	r3, r3, #32
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <MX_GPIO_Init+0xec>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0320 	and.w	r3, r3, #32
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <MX_GPIO_Init+0xec>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a25      	ldr	r2, [pc, #148]	; (8000de8 <MX_GPIO_Init+0xec>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <MX_GPIO_Init+0xec>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <MX_GPIO_Init+0xec>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <MX_GPIO_Init+0xec>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_GPIO_Init+0xec>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	603b      	str	r3, [r7, #0]
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <MX_GPIO_Init+0xec>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <MX_GPIO_Init+0xec>)
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_GPIO_Init+0xec>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000da4:	4811      	ldr	r0, [pc, #68]	; (8000dec <MX_GPIO_Init+0xf0>)
 8000da6:	f000 ffb9 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000daa:	2310      	movs	r3, #16
 8000dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <MX_GPIO_Init+0xf4>)
 8000dbe:	f000 fdf9 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000dc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4804      	ldr	r0, [pc, #16]	; (8000dec <MX_GPIO_Init+0xf0>)
 8000ddc:	f000 fdea 	bl	80019b4 <HAL_GPIO_Init>

}
 8000de0:	bf00      	nop
 8000de2:	3728      	adds	r7, #40	; 0x28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40021400 	.word	0x40021400
 8000df0:	40021000 	.word	0x40021000

08000df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000df8:	b672      	cpsid	i
}
 8000dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <Error_Handler+0x8>
	...

08000e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a0f      	ldr	r2, [pc, #60]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800

08000e50 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a28      	ldr	r2, [pc, #160]	; (8000f10 <HAL_SD_MspInit+0xc0>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d14a      	bne.n	8000f08 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <HAL_SD_MspInit+0xc4>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	4a26      	ldr	r2, [pc, #152]	; (8000f14 <HAL_SD_MspInit+0xc4>)
 8000e7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e80:	6453      	str	r3, [r2, #68]	; 0x44
 8000e82:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <HAL_SD_MspInit+0xc4>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <HAL_SD_MspInit+0xc4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a1f      	ldr	r2, [pc, #124]	; (8000f14 <HAL_SD_MspInit+0xc4>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <HAL_SD_MspInit+0xc4>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <HAL_SD_MspInit+0xc4>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a18      	ldr	r2, [pc, #96]	; (8000f14 <HAL_SD_MspInit+0xc4>)
 8000eb4:	f043 0308 	orr.w	r3, r3, #8
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <HAL_SD_MspInit+0xc4>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000ec6:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000eca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ed8:	230c      	movs	r3, #12
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <HAL_SD_MspInit+0xc8>)
 8000ee4:	f000 fd66 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ef8:	230c      	movs	r3, #12
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <HAL_SD_MspInit+0xcc>)
 8000f04:	f000 fd56 	bl	80019b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000f08:	bf00      	nop
 8000f0a:	3728      	adds	r7, #40	; 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40012c00 	.word	0x40012c00
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020800 	.word	0x40020800
 8000f1c:	40020c00 	.word	0x40020c00

08000f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <HAL_UART_MspInit+0x94>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d133      	bne.n	8000faa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <HAL_UART_MspInit+0x98>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <HAL_UART_MspInit+0x98>)
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <HAL_UART_MspInit+0x98>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_UART_MspInit+0x98>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_UART_MspInit+0x98>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_UART_MspInit+0x98>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f7a:	230c      	movs	r3, #12
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4809      	ldr	r0, [pc, #36]	; (8000fbc <HAL_UART_MspInit+0x9c>)
 8000f96:	f000 fd0d 	bl	80019b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2026      	movs	r0, #38	; 0x26
 8000fa0:	f000 fa3d 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fa4:	2026      	movs	r0, #38	; 0x26
 8000fa6:	f000 fa56 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40004400 	.word	0x40004400
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8000fca:	f000 fa52 	bl	8001472 <HAL_NVIC_SystemReset>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x8>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f8d0 	bl	80011b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <USART2_IRQHandler+0x10>)
 800101e:	f002 fe15 	bl	8003c4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000118 	.word	0x20000118

0800102c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <_sbrk+0x5c>)
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <_sbrk+0x60>)
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <_sbrk+0x64>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <_sbrk+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	429a      	cmp	r2, r3
 800105a:	d207      	bcs.n	800106c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800105c:	f004 fc98 	bl	8005990 <__errno>
 8001060:	4603      	mov	r3, r0
 8001062:	220c      	movs	r2, #12
 8001064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e009      	b.n	8001080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <_sbrk+0x64>)
 800107c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20020000 	.word	0x20020000
 800108c:	00000400 	.word	0x00000400
 8001090:	2000015c 	.word	0x2000015c
 8001094:	200001a8 	.word	0x200001a8

08001098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <SystemInit+0x20>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <SystemInit+0x20>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010c2:	490e      	ldr	r1, [pc, #56]	; (80010fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010c4:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c8:	e002      	b.n	80010d0 <LoopCopyDataInit>

080010ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ce:	3304      	adds	r3, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d4:	d3f9      	bcc.n	80010ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010d8:	4c0b      	ldr	r4, [pc, #44]	; (8001108 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010dc:	e001      	b.n	80010e2 <LoopFillZerobss>

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e0:	3204      	adds	r2, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010e6:	f7ff ffd7 	bl	8001098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ea:	f004 fc57 	bl	800599c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ee:	f7ff fd41 	bl	8000b74 <main>
  bx  lr    
 80010f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001100:	08005ce0 	.word	0x08005ce0
  ldr r2, =_sbss
 8001104:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001108:	200001a8 	.word	0x200001a8

0800110c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC_IRQHandler>
	...

08001110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <HAL_Init+0x40>)
 800111a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <HAL_Init+0x40>)
 8001126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800112a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_Init+0x40>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_Init+0x40>)
 8001132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001138:	2003      	movs	r0, #3
 800113a:	f000 f965 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113e:	200f      	movs	r0, #15
 8001140:	f000 f808 	bl	8001154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001144:	f7ff fe5c 	bl	8000e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023c00 	.word	0x40023c00

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_InitTick+0x54>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x58>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f981 	bl	800147a <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e00e      	b.n	80011a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	d80a      	bhi.n	800119e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001188:	2200      	movs	r2, #0
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f000 f945 	bl	800141e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <HAL_InitTick+0x5c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	e000      	b.n	80011a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000004 	.word	0x20000004

080011b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_IncTick+0x20>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x24>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <HAL_IncTick+0x24>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000160 	.word	0x20000160

080011dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <HAL_GetTick+0x14>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000160 	.word	0x20000160

080011f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff ffee 	bl	80011dc <HAL_GetTick>
 8001200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120c:	d005      	beq.n	800121a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_Delay+0x44>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800121a:	bf00      	nop
 800121c:	f7ff ffde 	bl	80011dc <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	429a      	cmp	r2, r3
 800122a:	d8f7      	bhi.n	800121c <HAL_Delay+0x28>
  {
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008

0800123c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	60d3      	str	r3, [r2, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db0b      	blt.n	80012ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 021f 	and.w	r2, r3, #31
 80012b8:	4907      	ldr	r1, [pc, #28]	; (80012d8 <__NVIC_EnableIRQ+0x38>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	2001      	movs	r0, #1
 80012c2:	fa00 f202 	lsl.w	r2, r0, r2
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	; (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800139c:	f3bf 8f4f 	dsb	sy
}
 80013a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <__NVIC_SystemReset+0x24>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013aa:	4904      	ldr	r1, [pc, #16]	; (80013bc <__NVIC_SystemReset+0x24>)
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <__NVIC_SystemReset+0x28>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80013b2:	f3bf 8f4f 	dsb	sy
}
 80013b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <__NVIC_SystemReset+0x20>
 80013bc:	e000ed00 	.word	0xe000ed00
 80013c0:	05fa0004 	.word	0x05fa0004

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f7ff ff78 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff13 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001430:	f7ff ff28 	bl	8001284 <__NVIC_GetPriorityGrouping>
 8001434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f7ff ff78 	bl	8001330 <NVIC_EncodePriority>
 8001440:	4602      	mov	r2, r0
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff47 	bl	80012dc <__NVIC_SetPriority>
}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff1b 	bl	80012a0 <__NVIC_EnableIRQ>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001476:	f7ff ff8f 	bl	8001398 <__NVIC_SystemReset>

0800147a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ff9e 	bl	80013c4 <SysTick_Config>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff fe9c 	bl	80011dc <HAL_GetTick>
 80014a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d008      	beq.n	80014c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e052      	b.n	800156a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0216 	bic.w	r2, r2, #22
 80014d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	695a      	ldr	r2, [r3, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d103      	bne.n	80014f4 <HAL_DMA_Abort+0x62>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d007      	beq.n	8001504 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0208 	bic.w	r2, r2, #8
 8001502:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0201 	bic.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001514:	e013      	b.n	800153e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001516:	f7ff fe61 	bl	80011dc <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b05      	cmp	r3, #5
 8001522:	d90c      	bls.n	800153e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2220      	movs	r2, #32
 8001528:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2203      	movs	r2, #3
 800152e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e015      	b.n	800156a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1e4      	bne.n	8001516 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001550:	223f      	movs	r2, #63	; 0x3f
 8001552:	409a      	lsls	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d004      	beq.n	8001590 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2280      	movs	r2, #128	; 0x80
 800158a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e00c      	b.n	80015aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2205      	movs	r2, #5
 8001594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0201 	bic.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <HAL_FLASH_Program+0xa0>)
 80015cc:	7e1b      	ldrb	r3, [r3, #24]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_FLASH_Program+0x1e>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e03b      	b.n	800164e <HAL_FLASH_Program+0x96>
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_FLASH_Program+0xa0>)
 80015d8:	2201      	movs	r2, #1
 80015da:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015e0:	f000 f870 	bl	80016c4 <FLASH_WaitForLastOperation>
 80015e4:	4603      	mov	r3, r0
 80015e6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d12b      	bne.n	8001646 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d105      	bne.n	8001600 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80015f4:	783b      	ldrb	r3, [r7, #0]
 80015f6:	4619      	mov	r1, r3
 80015f8:	68b8      	ldr	r0, [r7, #8]
 80015fa:	f000 f91b 	bl	8001834 <FLASH_Program_Byte>
 80015fe:	e016      	b.n	800162e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d105      	bne.n	8001612 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001606:	883b      	ldrh	r3, [r7, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	68b8      	ldr	r0, [r7, #8]
 800160c:	f000 f8ee 	bl	80017ec <FLASH_Program_HalfWord>
 8001610:	e00d      	b.n	800162e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d105      	bne.n	8001624 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	4619      	mov	r1, r3
 800161c:	68b8      	ldr	r0, [r7, #8]
 800161e:	f000 f8c3 	bl	80017a8 <FLASH_Program_Word>
 8001622:	e004      	b.n	800162e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001628:	68b8      	ldr	r0, [r7, #8]
 800162a:	f000 f88b 	bl	8001744 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800162e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001632:	f000 f847 	bl	80016c4 <FLASH_WaitForLastOperation>
 8001636:	4603      	mov	r3, r0
 8001638:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_FLASH_Program+0xa4>)
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_FLASH_Program+0xa4>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <HAL_FLASH_Program+0xa0>)
 8001648:	2200      	movs	r2, #0
 800164a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800164c:	7dfb      	ldrb	r3, [r7, #23]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000164 	.word	0x20000164
 800165c:	40023c00 	.word	0x40023c00

08001660 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_FLASH_Unlock+0x38>)
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	2b00      	cmp	r3, #0
 8001670:	da0b      	bge.n	800168a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_FLASH_Unlock+0x38>)
 8001674:	4a09      	ldr	r2, [pc, #36]	; (800169c <HAL_FLASH_Unlock+0x3c>)
 8001676:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <HAL_FLASH_Unlock+0x38>)
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <HAL_FLASH_Unlock+0x40>)
 800167c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_FLASH_Unlock+0x38>)
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	2b00      	cmp	r3, #0
 8001684:	da01      	bge.n	800168a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800168a:	79fb      	ldrb	r3, [r7, #7]
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40023c00 	.word	0x40023c00
 800169c:	45670123 	.word	0x45670123
 80016a0:	cdef89ab 	.word	0xcdef89ab

080016a4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_FLASH_Lock+0x1c>)
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <HAL_FLASH_Lock+0x1c>)
 80016ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016b2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40023c00 	.word	0x40023c00

080016c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <FLASH_WaitForLastOperation+0x78>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80016d6:	f7ff fd81 	bl	80011dc <HAL_GetTick>
 80016da:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80016dc:	e010      	b.n	8001700 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e4:	d00c      	beq.n	8001700 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d007      	beq.n	80016fc <FLASH_WaitForLastOperation+0x38>
 80016ec:	f7ff fd76 	bl	80011dc <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d201      	bcs.n	8001700 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e019      	b.n	8001734 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <FLASH_WaitForLastOperation+0x7c>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1e8      	bne.n	80016de <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <FLASH_WaitForLastOperation+0x7c>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <FLASH_WaitForLastOperation+0x7c>)
 800171a:	2201      	movs	r2, #1
 800171c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <FLASH_WaitForLastOperation+0x7c>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800172a:	f000 f8a5 	bl	8001878 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
  
}  
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000164 	.word	0x20000164
 8001740:	40023c00 	.word	0x40023c00

08001744 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <FLASH_Program_DoubleWord+0x60>)
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <FLASH_Program_DoubleWord+0x60>)
 8001756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800175a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <FLASH_Program_DoubleWord+0x60>)
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	4a10      	ldr	r2, [pc, #64]	; (80017a4 <FLASH_Program_DoubleWord+0x60>)
 8001762:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001766:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <FLASH_Program_DoubleWord+0x60>)
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <FLASH_Program_DoubleWord+0x60>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800177a:	f3bf 8f6f 	isb	sy
}
 800177e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001780:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	000a      	movs	r2, r1
 800178e:	2300      	movs	r3, #0
 8001790:	68f9      	ldr	r1, [r7, #12]
 8001792:	3104      	adds	r1, #4
 8001794:	4613      	mov	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	40023c00 	.word	0x40023c00

080017a8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017b2:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <FLASH_Program_Word+0x40>)
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	4a0c      	ldr	r2, [pc, #48]	; (80017e8 <FLASH_Program_Word+0x40>)
 80017b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <FLASH_Program_Word+0x40>)
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <FLASH_Program_Word+0x40>)
 80017c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <FLASH_Program_Word+0x40>)
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <FLASH_Program_Word+0x40>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	601a      	str	r2, [r3, #0]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	40023c00 	.word	0x40023c00

080017ec <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <FLASH_Program_HalfWord+0x44>)
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <FLASH_Program_HalfWord+0x44>)
 80017fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001802:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001804:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <FLASH_Program_HalfWord+0x44>)
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	4a09      	ldr	r2, [pc, #36]	; (8001830 <FLASH_Program_HalfWord+0x44>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <FLASH_Program_HalfWord+0x44>)
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	4a06      	ldr	r2, [pc, #24]	; (8001830 <FLASH_Program_HalfWord+0x44>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	801a      	strh	r2, [r3, #0]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00

08001834 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <FLASH_Program_Byte+0x40>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <FLASH_Program_Byte+0x40>)
 8001846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800184a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <FLASH_Program_Byte+0x40>)
 800184e:	4a09      	ldr	r2, [pc, #36]	; (8001874 <FLASH_Program_Byte+0x40>)
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <FLASH_Program_Byte+0x40>)
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <FLASH_Program_Byte+0x40>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	701a      	strb	r2, [r3, #0]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00

08001878 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <FLASH_SetErrorCode+0xa4>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f003 0310 	and.w	r3, r3, #16
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <FLASH_SetErrorCode+0xa8>)
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	f043 0310 	orr.w	r3, r3, #16
 8001890:	4a23      	ldr	r2, [pc, #140]	; (8001920 <FLASH_SetErrorCode+0xa8>)
 8001892:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001894:	4b21      	ldr	r3, [pc, #132]	; (800191c <FLASH_SetErrorCode+0xa4>)
 8001896:	2210      	movs	r2, #16
 8001898:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <FLASH_SetErrorCode+0xa4>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f003 0320 	and.w	r3, r3, #32
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d008      	beq.n	80018b8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <FLASH_SetErrorCode+0xa8>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f043 0308 	orr.w	r3, r3, #8
 80018ae:	4a1c      	ldr	r2, [pc, #112]	; (8001920 <FLASH_SetErrorCode+0xa8>)
 80018b0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <FLASH_SetErrorCode+0xa4>)
 80018b4:	2220      	movs	r2, #32
 80018b6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <FLASH_SetErrorCode+0xa4>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80018c4:	4b16      	ldr	r3, [pc, #88]	; (8001920 <FLASH_SetErrorCode+0xa8>)
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	4a14      	ldr	r2, [pc, #80]	; (8001920 <FLASH_SetErrorCode+0xa8>)
 80018ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <FLASH_SetErrorCode+0xa4>)
 80018d2:	2240      	movs	r2, #64	; 0x40
 80018d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <FLASH_SetErrorCode+0xa4>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d008      	beq.n	80018f4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <FLASH_SetErrorCode+0xa8>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f043 0302 	orr.w	r3, r3, #2
 80018ea:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <FLASH_SetErrorCode+0xa8>)
 80018ec:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <FLASH_SetErrorCode+0xa4>)
 80018f0:	2280      	movs	r2, #128	; 0x80
 80018f2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <FLASH_SetErrorCode+0xa4>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <FLASH_SetErrorCode+0xa8>)
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	f043 0320 	orr.w	r3, r3, #32
 8001908:	4a05      	ldr	r2, [pc, #20]	; (8001920 <FLASH_SetErrorCode+0xa8>)
 800190a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <FLASH_SetErrorCode+0xa4>)
 800190e:	2202      	movs	r2, #2
 8001910:	60da      	str	r2, [r3, #12]
  }
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40023c00 	.word	0x40023c00
 8001920:	20000164 	.word	0x20000164

08001924 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	e010      	b.n	8001962 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d103      	bne.n	800194e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e009      	b.n	8001962 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d103      	bne.n	800195c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	e002      	b.n	8001962 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800195c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001960:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <FLASH_Erase_Sector+0x8c>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <FLASH_Erase_Sector+0x8c>)
 8001968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800196c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <FLASH_Erase_Sector+0x8c>)
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	490f      	ldr	r1, [pc, #60]	; (80019b0 <FLASH_Erase_Sector+0x8c>)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <FLASH_Erase_Sector+0x8c>)
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <FLASH_Erase_Sector+0x8c>)
 8001980:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001984:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <FLASH_Erase_Sector+0x8c>)
 8001988:	691a      	ldr	r2, [r3, #16]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4313      	orrs	r3, r2
 8001990:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <FLASH_Erase_Sector+0x8c>)
 8001992:	f043 0302 	orr.w	r3, r3, #2
 8001996:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <FLASH_Erase_Sector+0x8c>)
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <FLASH_Erase_Sector+0x8c>)
 800199e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a2:	6113      	str	r3, [r2, #16]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	40023c00 	.word	0x40023c00

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	e16b      	b.n	8001ca8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d0:	2201      	movs	r2, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	f040 815a 	bne.w	8001ca2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d005      	beq.n	8001a06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d130      	bne.n	8001a68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 0201 	and.w	r2, r3, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d017      	beq.n	8001aa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d123      	bne.n	8001af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	08da      	lsrs	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3208      	adds	r2, #8
 8001ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	08da      	lsrs	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3208      	adds	r2, #8
 8001af2:	69b9      	ldr	r1, [r7, #24]
 8001af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0203 	and.w	r2, r3, #3
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80b4 	beq.w	8001ca2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b60      	ldr	r3, [pc, #384]	; (8001cc0 <HAL_GPIO_Init+0x30c>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a5f      	ldr	r2, [pc, #380]	; (8001cc0 <HAL_GPIO_Init+0x30c>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b5d      	ldr	r3, [pc, #372]	; (8001cc0 <HAL_GPIO_Init+0x30c>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b56:	4a5b      	ldr	r2, [pc, #364]	; (8001cc4 <HAL_GPIO_Init+0x310>)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a52      	ldr	r2, [pc, #328]	; (8001cc8 <HAL_GPIO_Init+0x314>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d02b      	beq.n	8001bda <HAL_GPIO_Init+0x226>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a51      	ldr	r2, [pc, #324]	; (8001ccc <HAL_GPIO_Init+0x318>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d025      	beq.n	8001bd6 <HAL_GPIO_Init+0x222>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a50      	ldr	r2, [pc, #320]	; (8001cd0 <HAL_GPIO_Init+0x31c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d01f      	beq.n	8001bd2 <HAL_GPIO_Init+0x21e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4f      	ldr	r2, [pc, #316]	; (8001cd4 <HAL_GPIO_Init+0x320>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d019      	beq.n	8001bce <HAL_GPIO_Init+0x21a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4e      	ldr	r2, [pc, #312]	; (8001cd8 <HAL_GPIO_Init+0x324>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_GPIO_Init+0x216>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4d      	ldr	r2, [pc, #308]	; (8001cdc <HAL_GPIO_Init+0x328>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_GPIO_Init+0x212>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4c      	ldr	r2, [pc, #304]	; (8001ce0 <HAL_GPIO_Init+0x32c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d007      	beq.n	8001bc2 <HAL_GPIO_Init+0x20e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4b      	ldr	r2, [pc, #300]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_GPIO_Init+0x20a>
 8001bba:	2307      	movs	r3, #7
 8001bbc:	e00e      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	e00c      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	e00a      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bc6:	2305      	movs	r3, #5
 8001bc8:	e008      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bca:	2304      	movs	r3, #4
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e004      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f002 0203 	and.w	r2, r2, #3
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	4093      	lsls	r3, r2
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bec:	4935      	ldr	r1, [pc, #212]	; (8001cc4 <HAL_GPIO_Init+0x310>)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <HAL_GPIO_Init+0x334>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c1e:	4a32      	ldr	r2, [pc, #200]	; (8001ce8 <HAL_GPIO_Init+0x334>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c24:	4b30      	ldr	r3, [pc, #192]	; (8001ce8 <HAL_GPIO_Init+0x334>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c48:	4a27      	ldr	r2, [pc, #156]	; (8001ce8 <HAL_GPIO_Init+0x334>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c4e:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <HAL_GPIO_Init+0x334>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c72:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <HAL_GPIO_Init+0x334>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_GPIO_Init+0x334>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c9c:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <HAL_GPIO_Init+0x334>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	2b0f      	cmp	r3, #15
 8001cac:	f67f ae90 	bls.w	80019d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3724      	adds	r7, #36	; 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40013800 	.word	0x40013800
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	40020c00 	.word	0x40020c00
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40021400 	.word	0x40021400
 8001ce0:	40021800 	.word	0x40021800
 8001ce4:	40021c00 	.word	0x40021c00
 8001ce8:	40013c00 	.word	0x40013c00

08001cec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	e001      	b.n	8001d0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	807b      	strh	r3, [r7, #2]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d2c:	787b      	ldrb	r3, [r7, #1]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d38:	e003      	b.n	8001d42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d3a:	887b      	ldrh	r3, [r7, #2]
 8001d3c:	041a      	lsls	r2, r3, #16
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	619a      	str	r2, [r3, #24]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d60:	887a      	ldrh	r2, [r7, #2]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	041a      	lsls	r2, r3, #16
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	887b      	ldrh	r3, [r7, #2]
 8001d6e:	400b      	ands	r3, r1
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	619a      	str	r2, [r3, #24]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e267      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d075      	beq.n	8001e8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001da2:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d00c      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dae:	4b85      	ldr	r3, [pc, #532]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d112      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dba:	4b82      	ldr	r3, [pc, #520]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dc6:	d10b      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc8:	4b7e      	ldr	r3, [pc, #504]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d05b      	beq.n	8001e8c <HAL_RCC_OscConfig+0x108>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d157      	bne.n	8001e8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e242      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de8:	d106      	bne.n	8001df8 <HAL_RCC_OscConfig+0x74>
 8001dea:	4b76      	ldr	r3, [pc, #472]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a75      	ldr	r2, [pc, #468]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e01d      	b.n	8001e34 <HAL_RCC_OscConfig+0xb0>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x98>
 8001e02:	4b70      	ldr	r3, [pc, #448]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a6f      	ldr	r2, [pc, #444]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b6d      	ldr	r3, [pc, #436]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a6c      	ldr	r2, [pc, #432]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCC_OscConfig+0xb0>
 8001e1c:	4b69      	ldr	r3, [pc, #420]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a68      	ldr	r2, [pc, #416]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b66      	ldr	r3, [pc, #408]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a65      	ldr	r2, [pc, #404]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d013      	beq.n	8001e64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff f9ce 	bl	80011dc <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff f9ca 	bl	80011dc <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e207      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	4b5b      	ldr	r3, [pc, #364]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0xc0>
 8001e62:	e014      	b.n	8001e8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff f9ba 	bl	80011dc <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7ff f9b6 	bl	80011dc <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e1f3      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7e:	4b51      	ldr	r3, [pc, #324]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0xe8>
 8001e8a:	e000      	b.n	8001e8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d063      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e9a:	4b4a      	ldr	r3, [pc, #296]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00b      	beq.n	8001ebe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ea6:	4b47      	ldr	r3, [pc, #284]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d11c      	bne.n	8001eec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eb2:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d116      	bne.n	8001eec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x152>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e1c7      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4937      	ldr	r1, [pc, #220]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	e03a      	b.n	8001f62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d020      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef4:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <HAL_RCC_OscConfig+0x244>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7ff f96f 	bl	80011dc <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f02:	f7ff f96b 	bl	80011dc <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e1a8      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f14:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f20:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4925      	ldr	r1, [pc, #148]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]
 8001f34:	e015      	b.n	8001f62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCC_OscConfig+0x244>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7ff f94e 	bl	80011dc <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f44:	f7ff f94a 	bl	80011dc <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e187      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d036      	beq.n	8001fdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d016      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_RCC_OscConfig+0x248>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7c:	f7ff f92e 	bl	80011dc <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f84:	f7ff f92a 	bl	80011dc <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e167      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x200>
 8001fa2:	e01b      	b.n	8001fdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCC_OscConfig+0x248>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7ff f917 	bl	80011dc <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb0:	e00e      	b.n	8001fd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb2:	f7ff f913 	bl	80011dc <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d907      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e150      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	42470000 	.word	0x42470000
 8001fcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd0:	4b88      	ldr	r3, [pc, #544]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ea      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8097 	beq.w	8002118 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fee:	4b81      	ldr	r3, [pc, #516]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10f      	bne.n	800201a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	4b7d      	ldr	r3, [pc, #500]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a7c      	ldr	r2, [pc, #496]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b7a      	ldr	r3, [pc, #488]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002016:	2301      	movs	r3, #1
 8002018:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201a:	4b77      	ldr	r3, [pc, #476]	; (80021f8 <HAL_RCC_OscConfig+0x474>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d118      	bne.n	8002058 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002026:	4b74      	ldr	r3, [pc, #464]	; (80021f8 <HAL_RCC_OscConfig+0x474>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a73      	ldr	r2, [pc, #460]	; (80021f8 <HAL_RCC_OscConfig+0x474>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002032:	f7ff f8d3 	bl	80011dc <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7ff f8cf 	bl	80011dc <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e10c      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <HAL_RCC_OscConfig+0x474>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x2ea>
 8002060:	4b64      	ldr	r3, [pc, #400]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	4a63      	ldr	r2, [pc, #396]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6713      	str	r3, [r2, #112]	; 0x70
 800206c:	e01c      	b.n	80020a8 <HAL_RCC_OscConfig+0x324>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b05      	cmp	r3, #5
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x30c>
 8002076:	4b5f      	ldr	r3, [pc, #380]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	4a5e      	ldr	r2, [pc, #376]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	6713      	str	r3, [r2, #112]	; 0x70
 8002082:	4b5c      	ldr	r3, [pc, #368]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002086:	4a5b      	ldr	r2, [pc, #364]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6713      	str	r3, [r2, #112]	; 0x70
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0x324>
 8002090:	4b58      	ldr	r3, [pc, #352]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	4a57      	ldr	r2, [pc, #348]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6713      	str	r3, [r2, #112]	; 0x70
 800209c:	4b55      	ldr	r3, [pc, #340]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a0:	4a54      	ldr	r2, [pc, #336]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 80020a2:	f023 0304 	bic.w	r3, r3, #4
 80020a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d015      	beq.n	80020dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7ff f894 	bl	80011dc <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7ff f890 	bl	80011dc <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0cb      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ce:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0ee      	beq.n	80020b8 <HAL_RCC_OscConfig+0x334>
 80020da:	e014      	b.n	8002106 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020dc:	f7ff f87e 	bl	80011dc <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7ff f87a 	bl	80011dc <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e0b5      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fa:	4b3e      	ldr	r3, [pc, #248]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1ee      	bne.n	80020e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d105      	bne.n	8002118 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210c:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	4a38      	ldr	r2, [pc, #224]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002116:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80a1 	beq.w	8002264 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002122:	4b34      	ldr	r3, [pc, #208]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b08      	cmp	r3, #8
 800212c:	d05c      	beq.n	80021e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d141      	bne.n	80021ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	4b31      	ldr	r3, [pc, #196]	; (80021fc <HAL_RCC_OscConfig+0x478>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7ff f84e 	bl	80011dc <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002144:	f7ff f84a 	bl	80011dc <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e087      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69da      	ldr	r2, [r3, #28]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	019b      	lsls	r3, r3, #6
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	3b01      	subs	r3, #1
 800217c:	041b      	lsls	r3, r3, #16
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	061b      	lsls	r3, r3, #24
 8002186:	491b      	ldr	r1, [pc, #108]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_RCC_OscConfig+0x478>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002192:	f7ff f823 	bl	80011dc <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219a:	f7ff f81f 	bl	80011dc <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e05c      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x416>
 80021b8:	e054      	b.n	8002264 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <HAL_RCC_OscConfig+0x478>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff f80c 	bl	80011dc <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c8:	f7ff f808 	bl	80011dc <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e045      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x444>
 80021e6:	e03d      	b.n	8002264 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d107      	bne.n	8002200 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e038      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40007000 	.word	0x40007000
 80021fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x4ec>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d028      	beq.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002218:	429a      	cmp	r2, r3
 800221a:	d121      	bne.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d11a      	bne.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002230:	4013      	ands	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002236:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002238:	4293      	cmp	r3, r2
 800223a:	d111      	bne.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	3b01      	subs	r3, #1
 800224a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d107      	bne.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800

08002274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0cc      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002288:	4b68      	ldr	r3, [pc, #416]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d90c      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002296:	4b65      	ldr	r3, [pc, #404]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b63      	ldr	r3, [pc, #396]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0b8      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d020      	beq.n	80022fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c8:	4b59      	ldr	r3, [pc, #356]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a58      	ldr	r2, [pc, #352]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e0:	4b53      	ldr	r3, [pc, #332]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a52      	ldr	r2, [pc, #328]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ec:	4b50      	ldr	r3, [pc, #320]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	494d      	ldr	r1, [pc, #308]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d044      	beq.n	8002394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	4b47      	ldr	r3, [pc, #284]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d119      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e07f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d003      	beq.n	8002332 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232e:	2b03      	cmp	r3, #3
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002332:	4b3f      	ldr	r3, [pc, #252]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e06f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002342:	4b3b      	ldr	r3, [pc, #236]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e067      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002352:	4b37      	ldr	r3, [pc, #220]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f023 0203 	bic.w	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4934      	ldr	r1, [pc, #208]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	4313      	orrs	r3, r2
 8002362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002364:	f7fe ff3a 	bl	80011dc <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	e00a      	b.n	8002382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236c:	f7fe ff36 	bl	80011dc <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e04f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 020c 	and.w	r2, r3, #12
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	429a      	cmp	r2, r3
 8002392:	d1eb      	bne.n	800236c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002394:	4b25      	ldr	r3, [pc, #148]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d20c      	bcs.n	80023bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b22      	ldr	r3, [pc, #136]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b20      	ldr	r3, [pc, #128]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e032      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4916      	ldr	r1, [pc, #88]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	490e      	ldr	r1, [pc, #56]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023fa:	f000 f821 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80023fe:	4602      	mov	r2, r0
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	490a      	ldr	r1, [pc, #40]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	5ccb      	ldrb	r3, [r1, r3]
 800240e:	fa22 f303 	lsr.w	r3, r2, r3
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fe9a 	bl	8001154 <HAL_InitTick>

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023c00 	.word	0x40023c00
 8002430:	40023800 	.word	0x40023800
 8002434:	08005ca4 	.word	0x08005ca4
 8002438:	20000000 	.word	0x20000000
 800243c:	20000004 	.word	0x20000004

08002440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002444:	b090      	sub	sp, #64	; 0x40
 8002446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	637b      	str	r3, [r7, #52]	; 0x34
 800244c:	2300      	movs	r3, #0
 800244e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002450:	2300      	movs	r3, #0
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002458:	4b59      	ldr	r3, [pc, #356]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	2b08      	cmp	r3, #8
 8002462:	d00d      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x40>
 8002464:	2b08      	cmp	r3, #8
 8002466:	f200 80a1 	bhi.w	80025ac <HAL_RCC_GetSysClockFreq+0x16c>
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x34>
 800246e:	2b04      	cmp	r3, #4
 8002470:	d003      	beq.n	800247a <HAL_RCC_GetSysClockFreq+0x3a>
 8002472:	e09b      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002474:	4b53      	ldr	r3, [pc, #332]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002476:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002478:	e09b      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800247a:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800247c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800247e:	e098      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002480:	4b4f      	ldr	r3, [pc, #316]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002488:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800248a:	4b4d      	ldr	r3, [pc, #308]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d028      	beq.n	80024e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002496:	4b4a      	ldr	r3, [pc, #296]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	099b      	lsrs	r3, r3, #6
 800249c:	2200      	movs	r2, #0
 800249e:	623b      	str	r3, [r7, #32]
 80024a0:	627a      	str	r2, [r7, #36]	; 0x24
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024a8:	2100      	movs	r1, #0
 80024aa:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80024ac:	fb03 f201 	mul.w	r2, r3, r1
 80024b0:	2300      	movs	r3, #0
 80024b2:	fb00 f303 	mul.w	r3, r0, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	4a43      	ldr	r2, [pc, #268]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80024ba:	fba0 1202 	umull	r1, r2, r0, r2
 80024be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024c0:	460a      	mov	r2, r1
 80024c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80024c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c6:	4413      	add	r3, r2
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024cc:	2200      	movs	r2, #0
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	61fa      	str	r2, [r7, #28]
 80024d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024da:	f7fd fe75 	bl	80001c8 <__aeabi_uldivmod>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4613      	mov	r3, r2
 80024e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e6:	e053      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024e8:	4b35      	ldr	r3, [pc, #212]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	099b      	lsrs	r3, r3, #6
 80024ee:	2200      	movs	r2, #0
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	617a      	str	r2, [r7, #20]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024fa:	f04f 0b00 	mov.w	fp, #0
 80024fe:	4652      	mov	r2, sl
 8002500:	465b      	mov	r3, fp
 8002502:	f04f 0000 	mov.w	r0, #0
 8002506:	f04f 0100 	mov.w	r1, #0
 800250a:	0159      	lsls	r1, r3, #5
 800250c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002510:	0150      	lsls	r0, r2, #5
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	ebb2 080a 	subs.w	r8, r2, sl
 800251a:	eb63 090b 	sbc.w	r9, r3, fp
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800252a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800252e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002532:	ebb2 0408 	subs.w	r4, r2, r8
 8002536:	eb63 0509 	sbc.w	r5, r3, r9
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	00eb      	lsls	r3, r5, #3
 8002544:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002548:	00e2      	lsls	r2, r4, #3
 800254a:	4614      	mov	r4, r2
 800254c:	461d      	mov	r5, r3
 800254e:	eb14 030a 	adds.w	r3, r4, sl
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	eb45 030b 	adc.w	r3, r5, fp
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002566:	4629      	mov	r1, r5
 8002568:	028b      	lsls	r3, r1, #10
 800256a:	4621      	mov	r1, r4
 800256c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002570:	4621      	mov	r1, r4
 8002572:	028a      	lsls	r2, r1, #10
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257a:	2200      	movs	r2, #0
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	60fa      	str	r2, [r7, #12]
 8002580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002584:	f7fd fe20 	bl	80001c8 <__aeabi_uldivmod>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4613      	mov	r3, r2
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	0c1b      	lsrs	r3, r3, #16
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	3301      	adds	r3, #1
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80025a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025aa:	e002      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80025ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3740      	adds	r7, #64	; 0x40
 80025b8:	46bd      	mov	sp, r7
 80025ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025be:	bf00      	nop
 80025c0:	40023800 	.word	0x40023800
 80025c4:	00f42400 	.word	0x00f42400
 80025c8:	017d7840 	.word	0x017d7840

080025cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d0:	4b03      	ldr	r3, [pc, #12]	; (80025e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025d2:	681b      	ldr	r3, [r3, #0]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000000 	.word	0x20000000

080025e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025e8:	f7ff fff0 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	0a9b      	lsrs	r3, r3, #10
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	4903      	ldr	r1, [pc, #12]	; (8002608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025fa:	5ccb      	ldrb	r3, [r1, r3]
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002600:	4618      	mov	r0, r3
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40023800 	.word	0x40023800
 8002608:	08005cb4 	.word	0x08005cb4

0800260c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002610:	f7ff ffdc 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	0b5b      	lsrs	r3, r3, #13
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	4903      	ldr	r1, [pc, #12]	; (8002630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002628:	4618      	mov	r0, r3
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40023800 	.word	0x40023800
 8002630:	08005cb4 	.word	0x08005cb4

08002634 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e022      	b.n	800268c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d105      	bne.n	800265e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7fe fbf9 	bl	8000e50 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2203      	movs	r2, #3
 8002662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f814 	bl	8002694 <HAL_SD_InitCard>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e00a      	b.n	800268c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002694:	b5b0      	push	{r4, r5, r7, lr}
 8002696:	b08e      	sub	sp, #56	; 0x38
 8002698:	af04      	add	r7, sp, #16
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800269c:	2300      	movs	r3, #0
 800269e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80026b0:	2376      	movs	r3, #118	; 0x76
 80026b2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681d      	ldr	r5, [r3, #0]
 80026b8:	466c      	mov	r4, sp
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80026c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80026c6:	f107 0308 	add.w	r3, r7, #8
 80026ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026cc:	4628      	mov	r0, r5
 80026ce:	f002 f9f1 	bl	8004ab4 <SDIO_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80026d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e04f      	b.n	8002784 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80026e4:	4b29      	ldr	r3, [pc, #164]	; (800278c <HAL_SD_InitCard+0xf8>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 fa29 	bl	8004b46 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80026f4:	4b25      	ldr	r3, [pc, #148]	; (800278c <HAL_SD_InitCard+0xf8>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80026fa:	2002      	movs	r0, #2
 80026fc:	f7fe fd7a 	bl	80011f4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 ff03 	bl	800350c <SD_PowerON>
 8002706:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e02e      	b.n	8002784 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fe22 	bl	8003370 <SD_InitCard>
 800272c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00b      	beq.n	800274c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e01b      	b.n	8002784 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002754:	4618      	mov	r0, r3
 8002756:	f002 fa88 	bl	8004c6a <SDMMC_CmdBlockLength>
 800275a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00f      	beq.n	8002782 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <HAL_SD_InitCard+0xfc>)
 8002768:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3728      	adds	r7, #40	; 0x28
 8002788:	46bd      	mov	sp, r7
 800278a:	bdb0      	pop	{r4, r5, r7, pc}
 800278c:	422580a0 	.word	0x422580a0
 8002790:	004005ff 	.word	0x004005ff

08002794 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b092      	sub	sp, #72	; 0x48
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80027a2:	f7fe fd1b 	bl	80011dc <HAL_GetTick>
 80027a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d107      	bne.n	80027c6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e1bd      	b.n	8002b42 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	f040 81b0 	bne.w	8002b34 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80027da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	441a      	add	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d907      	bls.n	80027f8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e1a4      	b.n	8002b42 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2203      	movs	r2, #3
 80027fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2200      	movs	r2, #0
 8002806:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	2b01      	cmp	r3, #1
 800280e:	d002      	beq.n	8002816 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002812:	025b      	lsls	r3, r3, #9
 8002814:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002816:	f04f 33ff 	mov.w	r3, #4294967295
 800281a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	025b      	lsls	r3, r3, #9
 8002820:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002822:	2390      	movs	r3, #144	; 0x90
 8002824:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002826:	2302      	movs	r3, #2
 8002828:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800282a:	2300      	movs	r3, #0
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800282e:	2301      	movs	r3, #1
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f107 0214 	add.w	r2, r7, #20
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f002 f9e8 	bl	8004c12 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d90a      	bls.n	800285e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2202      	movs	r2, #2
 800284c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002854:	4618      	mov	r0, r3
 8002856:	f002 fa4c 	bl	8004cf2 <SDMMC_CmdReadMultiBlock>
 800285a:	6478      	str	r0, [r7, #68]	; 0x44
 800285c:	e009      	b.n	8002872 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800286a:	4618      	mov	r0, r3
 800286c:	f002 fa1f 	bl	8004cae <SDMMC_CmdReadSingleBlock>
 8002870:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002874:	2b00      	cmp	r3, #0
 8002876:	d012      	beq.n	800289e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a7a      	ldr	r2, [pc, #488]	; (8002a68 <HAL_SD_ReadBlocks+0x2d4>)
 800287e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002886:	431a      	orrs	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e151      	b.n	8002b42 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80028a2:	e061      	b.n	8002968 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d03c      	beq.n	800292c <HAL_SD_ReadBlocks+0x198>
 80028b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d039      	beq.n	800292c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80028b8:	2300      	movs	r3, #0
 80028ba:	643b      	str	r3, [r7, #64]	; 0x40
 80028bc:	e033      	b.n	8002926 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 f921 	bl	8004b0a <SDIO_ReadFIFO>
 80028c8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80028d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d4:	3301      	adds	r3, #1
 80028d6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80028d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028da:	3b01      	subs	r3, #1
 80028dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80028e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ea:	3301      	adds	r3, #1
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80028ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f0:	3b01      	subs	r3, #1
 80028f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f6:	0c1b      	lsrs	r3, r3, #16
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80028fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002900:	3301      	adds	r3, #1
 8002902:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002906:	3b01      	subs	r3, #1
 8002908:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	0e1b      	lsrs	r3, r3, #24
 800290e:	b2da      	uxtb	r2, r3
 8002910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002912:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002916:	3301      	adds	r3, #1
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800291a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800291c:	3b01      	subs	r3, #1
 800291e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002922:	3301      	adds	r3, #1
 8002924:	643b      	str	r3, [r7, #64]	; 0x40
 8002926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002928:	2b07      	cmp	r3, #7
 800292a:	d9c8      	bls.n	80028be <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800292c:	f7fe fc56 	bl	80011dc <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002938:	429a      	cmp	r2, r3
 800293a:	d902      	bls.n	8002942 <HAL_SD_ReadBlocks+0x1ae>
 800293c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800293e:	2b00      	cmp	r3, #0
 8002940:	d112      	bne.n	8002968 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a48      	ldr	r2, [pc, #288]	; (8002a68 <HAL_SD_ReadBlocks+0x2d4>)
 8002948:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e0ec      	b.n	8002b42 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296e:	f240 332a 	movw	r3, #810	; 0x32a
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d095      	beq.n	80028a4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d022      	beq.n	80029cc <HAL_SD_ReadBlocks+0x238>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d91f      	bls.n	80029cc <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002990:	2b03      	cmp	r3, #3
 8002992:	d01b      	beq.n	80029cc <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f002 fa11 	bl	8004dc0 <SDMMC_CmdStopTransfer>
 800299e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80029a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d012      	beq.n	80029cc <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a2f      	ldr	r2, [pc, #188]	; (8002a68 <HAL_SD_ReadBlocks+0x2d4>)
 80029ac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b4:	431a      	orrs	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0ba      	b.n	8002b42 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d012      	beq.n	8002a00 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a22      	ldr	r2, [pc, #136]	; (8002a68 <HAL_SD_ReadBlocks+0x2d4>)
 80029e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	f043 0208 	orr.w	r2, r3, #8
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0a0      	b.n	8002b42 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d012      	beq.n	8002a34 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a15      	ldr	r2, [pc, #84]	; (8002a68 <HAL_SD_ReadBlocks+0x2d4>)
 8002a14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	f043 0202 	orr.w	r2, r3, #2
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e086      	b.n	8002b42 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d063      	beq.n	8002b0a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <HAL_SD_ReadBlocks+0x2d4>)
 8002a48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	f043 0220 	orr.w	r2, r3, #32
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e06c      	b.n	8002b42 <HAL_SD_ReadBlocks+0x3ae>
 8002a68:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f002 f84a 	bl	8004b0a <SDIO_ReadFIFO>
 8002a76:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a82:	3301      	adds	r3, #1
 8002a84:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a94:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a98:	3301      	adds	r3, #1
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa4:	0c1b      	lsrs	r3, r3, #16
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aaa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aae:	3301      	adds	r3, #1
 8002ab0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aba:	0e1b      	lsrs	r3, r3, #24
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aca:	3b01      	subs	r3, #1
 8002acc:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002ace:	f7fe fb85 	bl	80011dc <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d902      	bls.n	8002ae4 <HAL_SD_ReadBlocks+0x350>
 8002ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d112      	bne.n	8002b0a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a18      	ldr	r2, [pc, #96]	; (8002b4c <HAL_SD_ReadBlocks+0x3b8>)
 8002aea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e01b      	b.n	8002b42 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <HAL_SD_ReadBlocks+0x38a>
 8002b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1a6      	bne.n	8002a6c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f240 523a 	movw	r2, #1338	; 0x53a
 8002b26:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	e006      	b.n	8002b42 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
  }
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3748      	adds	r7, #72	; 0x48
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	004005ff 	.word	0x004005ff

08002b50 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b092      	sub	sp, #72	; 0x48
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002b5e:	f7fe fb3d 	bl	80011dc <HAL_GetTick>
 8002b62:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d107      	bne.n	8002b82 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e166      	b.n	8002e50 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	f040 8159 	bne.w	8002e42 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	441a      	add	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d907      	bls.n	8002bb4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e14d      	b.n	8002e50 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d002      	beq.n	8002bd2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bce:	025b      	lsls	r3, r3, #9
 8002bd0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	025b      	lsls	r3, r3, #9
 8002bdc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002bde:	2390      	movs	r3, #144	; 0x90
 8002be0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002be2:	2300      	movs	r3, #0
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002bea:	2301      	movs	r3, #1
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f107 0218 	add.w	r2, r7, #24
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f002 f80a 	bl	8004c12 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d90a      	bls.n	8002c1a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c10:	4618      	mov	r0, r3
 8002c12:	f002 f8b2 	bl	8004d7a <SDMMC_CmdWriteMultiBlock>
 8002c16:	6478      	str	r0, [r7, #68]	; 0x44
 8002c18:	e009      	b.n	8002c2e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c26:	4618      	mov	r0, r3
 8002c28:	f002 f885 	bl	8004d36 <SDMMC_CmdWriteSingleBlock>
 8002c2c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d012      	beq.n	8002c5a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a87      	ldr	r2, [pc, #540]	; (8002e58 <HAL_SD_WriteBlocks+0x308>)
 8002c3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c42:	431a      	orrs	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0fa      	b.n	8002e50 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002c5e:	e065      	b.n	8002d2c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d040      	beq.n	8002cf0 <HAL_SD_WriteBlocks+0x1a0>
 8002c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d03d      	beq.n	8002cf0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002c74:	2300      	movs	r3, #0
 8002c76:	643b      	str	r3, [r7, #64]	; 0x40
 8002c78:	e037      	b.n	8002cea <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c82:	3301      	adds	r3, #1
 8002c84:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	021a      	lsls	r2, r3, #8
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	041a      	lsls	r2, r3, #16
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	061a      	lsls	r2, r3, #24
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cca:	3301      	adds	r3, #1
 8002ccc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f107 0214 	add.w	r2, r7, #20
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f001 ff20 	bl	8004b24 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8002cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cec:	2b07      	cmp	r3, #7
 8002cee:	d9c4      	bls.n	8002c7a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002cf0:	f7fe fa74 	bl	80011dc <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d902      	bls.n	8002d06 <HAL_SD_WriteBlocks+0x1b6>
 8002d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d112      	bne.n	8002d2c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a53      	ldr	r2, [pc, #332]	; (8002e58 <HAL_SD_WriteBlocks+0x308>)
 8002d0c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d14:	431a      	orrs	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e091      	b.n	8002e50 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d32:	f240 331a 	movw	r3, #794	; 0x31a
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d091      	beq.n	8002c60 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d022      	beq.n	8002d90 <HAL_SD_WriteBlocks+0x240>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d91f      	bls.n	8002d90 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d01b      	beq.n	8002d90 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f002 f82f 	bl	8004dc0 <SDMMC_CmdStopTransfer>
 8002d62:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d012      	beq.n	8002d90 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a3a      	ldr	r2, [pc, #232]	; (8002e58 <HAL_SD_WriteBlocks+0x308>)
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e05f      	b.n	8002e50 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d012      	beq.n	8002dc4 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a2d      	ldr	r2, [pc, #180]	; (8002e58 <HAL_SD_WriteBlocks+0x308>)
 8002da4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	f043 0208 	orr.w	r2, r3, #8
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e045      	b.n	8002e50 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d012      	beq.n	8002df8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a20      	ldr	r2, [pc, #128]	; (8002e58 <HAL_SD_WriteBlocks+0x308>)
 8002dd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dde:	f043 0202 	orr.w	r2, r3, #2
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e02b      	b.n	8002e50 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d012      	beq.n	8002e2c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <HAL_SD_WriteBlocks+0x308>)
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	f043 0210 	orr.w	r2, r3, #16
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e011      	b.n	8002e50 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f240 523a 	movw	r2, #1338	; 0x53a
 8002e34:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e006      	b.n	8002e50 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
  }
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3748      	adds	r7, #72	; 0x48
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	004005ff 	.word	0x004005ff

08002e5c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e6a:	0f9b      	lsrs	r3, r3, #30
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e76:	0e9b      	lsrs	r3, r3, #26
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e88:	0e1b      	lsrs	r3, r3, #24
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e9a:	0c1b      	lsrs	r3, r3, #16
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ebc:	0d1b      	lsrs	r3, r3, #20
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ec8:	0c1b      	lsrs	r3, r3, #16
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eda:	0bdb      	lsrs	r3, r3, #15
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eec:	0b9b      	lsrs	r3, r3, #14
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002efe:	0b5b      	lsrs	r3, r3, #13
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f10:	0b1b      	lsrs	r3, r3, #12
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2200      	movs	r2, #0
 8002f22:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d163      	bne.n	8002ff4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f30:	009a      	lsls	r2, r3, #2
 8002f32:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f36:	4013      	ands	r3, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002f3c:	0f92      	lsrs	r2, r2, #30
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f48:	0edb      	lsrs	r3, r3, #27
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f5a:	0e1b      	lsrs	r3, r3, #24
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f6c:	0d5b      	lsrs	r3, r3, #21
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f7e:	0c9b      	lsrs	r3, r3, #18
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f90:	0bdb      	lsrs	r3, r3, #15
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	7e1b      	ldrb	r3, [r3, #24]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002fbe:	fb03 f202 	mul.w	r2, r3, r2
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	7a1b      	ldrb	r3, [r3, #8]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002fe0:	0a52      	lsrs	r2, r2, #9
 8002fe2:	fb03 f202 	mul.w	r2, r3, r2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ff0:	661a      	str	r2, [r3, #96]	; 0x60
 8002ff2:	e031      	b.n	8003058 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d11d      	bne.n	8003038 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003000:	041b      	lsls	r3, r3, #16
 8003002:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800300a:	0c1b      	lsrs	r3, r3, #16
 800300c:	431a      	orrs	r2, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	3301      	adds	r3, #1
 8003018:	029a      	lsls	r2, r3, #10
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800302c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	661a      	str	r2, [r3, #96]	; 0x60
 8003036:	e00f      	b.n	8003058 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a58      	ldr	r2, [pc, #352]	; (80031a0 <HAL_SD_GetCardCSD+0x344>)
 800303e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e09d      	b.n	8003194 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800305c:	0b9b      	lsrs	r3, r3, #14
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	b2da      	uxtb	r2, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800306e:	09db      	lsrs	r3, r3, #7
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003076:	b2da      	uxtb	r2, r3
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003086:	b2da      	uxtb	r2, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	0fdb      	lsrs	r3, r3, #31
 8003092:	b2da      	uxtb	r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	0f5b      	lsrs	r3, r3, #29
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	0e9b      	lsrs	r3, r3, #26
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	0d9b      	lsrs	r3, r3, #22
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	0d5b      	lsrs	r3, r3, #21
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	0c1b      	lsrs	r3, r3, #16
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	0bdb      	lsrs	r3, r3, #15
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	b2da      	uxtb	r2, r3
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	0b9b      	lsrs	r3, r3, #14
 8003118:	b2db      	uxtb	r3, r3
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	b2da      	uxtb	r2, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	0b5b      	lsrs	r3, r3, #13
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	b2da      	uxtb	r2, r3
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313e:	0b1b      	lsrs	r3, r3, #12
 8003140:	b2db      	uxtb	r3, r3
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	b2da      	uxtb	r2, r3
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	0a9b      	lsrs	r3, r3, #10
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	b2da      	uxtb	r2, r3
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	b2da      	uxtb	r2, r3
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	b2db      	uxtb	r3, r3
 800317e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003182:	b2da      	uxtb	r2, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	004005ff 	.word	0x004005ff

080031a4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80031fc:	b5b0      	push	{r4, r5, r7, lr}
 80031fe:	b08e      	sub	sp, #56	; 0x38
 8003200:	af04      	add	r7, sp, #16
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2203      	movs	r2, #3
 8003210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003218:	2b03      	cmp	r3, #3
 800321a:	d02e      	beq.n	800327a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003222:	d106      	bne.n	8003232 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	639a      	str	r2, [r3, #56]	; 0x38
 8003230:	e029      	b.n	8003286 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003238:	d10a      	bne.n	8003250 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa1c 	bl	8003678 <SD_WideBus_Enable>
 8003240:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	639a      	str	r2, [r3, #56]	; 0x38
 800324e:	e01a      	b.n	8003286 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fa59 	bl	800370e <SD_WideBus_Disable>
 800325c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	639a      	str	r2, [r3, #56]	; 0x38
 800326a:	e00c      	b.n	8003286 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	639a      	str	r2, [r3, #56]	; 0x38
 8003278:	e005      	b.n	8003286 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00b      	beq.n	80032a6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a26      	ldr	r2, [pc, #152]	; (800332c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003294:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80032a4:	e01f      	b.n	80032e6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681d      	ldr	r5, [r3, #0]
 80032cc:	466c      	mov	r4, sp
 80032ce:	f107 0314 	add.w	r3, r7, #20
 80032d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80032d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80032da:	f107 0308 	add.w	r3, r7, #8
 80032de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032e0:	4628      	mov	r0, r5
 80032e2:	f001 fbe7 	bl	8004ab4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032ee:	4618      	mov	r0, r3
 80032f0:	f001 fcbb 	bl	8004c6a <SDMMC_CmdBlockLength>
 80032f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00c      	beq.n	8003316 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a0a      	ldr	r2, [pc, #40]	; (800332c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003302:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800331e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003322:	4618      	mov	r0, r3
 8003324:	3728      	adds	r7, #40	; 0x28
 8003326:	46bd      	mov	sp, r7
 8003328:	bdb0      	pop	{r4, r5, r7, pc}
 800332a:	bf00      	nop
 800332c:	004005ff 	.word	0x004005ff

08003330 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800333c:	f107 030c 	add.w	r3, r7, #12
 8003340:	4619      	mov	r1, r3
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f970 	bl	8003628 <SD_SendStatus>
 8003348:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	0a5b      	lsrs	r3, r3, #9
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003366:	693b      	ldr	r3, [r7, #16]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003370:	b5b0      	push	{r4, r5, r7, lr}
 8003372:	b094      	sub	sp, #80	; 0x50
 8003374:	af04      	add	r7, sp, #16
 8003376:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003378:	2301      	movs	r3, #1
 800337a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f001 fbee 	bl	8004b62 <SDIO_GetPowerState>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800338c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003390:	e0b8      	b.n	8003504 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	2b03      	cmp	r3, #3
 8003398:	d02f      	beq.n	80033fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f001 fe18 	bl	8004fd4 <SDMMC_CmdSendCID>
 80033a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80033a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80033ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ae:	e0a9      	b.n	8003504 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f001 fc18 	bl	8004bec <SDIO_GetResponse>
 80033bc:	4602      	mov	r2, r0
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2104      	movs	r1, #4
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 fc0f 	bl	8004bec <SDIO_GetResponse>
 80033ce:	4602      	mov	r2, r0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2108      	movs	r1, #8
 80033da:	4618      	mov	r0, r3
 80033dc:	f001 fc06 	bl	8004bec <SDIO_GetResponse>
 80033e0:	4602      	mov	r2, r0
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	210c      	movs	r1, #12
 80033ec:	4618      	mov	r0, r3
 80033ee:	f001 fbfd 	bl	8004bec <SDIO_GetResponse>
 80033f2:	4602      	mov	r2, r0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d00d      	beq.n	800341e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f107 020e 	add.w	r2, r7, #14
 800340a:	4611      	mov	r1, r2
 800340c:	4618      	mov	r0, r3
 800340e:	f001 fe1e 	bl	800504e <SDMMC_CmdSetRelAdd>
 8003412:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <SD_InitCard+0xae>
    {
      return errorstate;
 800341a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341c:	e072      	b.n	8003504 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	2b03      	cmp	r3, #3
 8003424:	d036      	beq.n	8003494 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003426:	89fb      	ldrh	r3, [r7, #14]
 8003428:	461a      	mov	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003436:	041b      	lsls	r3, r3, #16
 8003438:	4619      	mov	r1, r3
 800343a:	4610      	mov	r0, r2
 800343c:	f001 fde8 	bl	8005010 <SDMMC_CmdSendCSD>
 8003440:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344a:	e05b      	b.n	8003504 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f001 fbca 	bl	8004bec <SDIO_GetResponse>
 8003458:	4602      	mov	r2, r0
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2104      	movs	r1, #4
 8003464:	4618      	mov	r0, r3
 8003466:	f001 fbc1 	bl	8004bec <SDIO_GetResponse>
 800346a:	4602      	mov	r2, r0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2108      	movs	r1, #8
 8003476:	4618      	mov	r0, r3
 8003478:	f001 fbb8 	bl	8004bec <SDIO_GetResponse>
 800347c:	4602      	mov	r2, r0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	210c      	movs	r1, #12
 8003488:	4618      	mov	r0, r3
 800348a:	f001 fbaf 	bl	8004bec <SDIO_GetResponse>
 800348e:	4602      	mov	r2, r0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2104      	movs	r1, #4
 800349a:	4618      	mov	r0, r3
 800349c:	f001 fba6 	bl	8004bec <SDIO_GetResponse>
 80034a0:	4603      	mov	r3, r0
 80034a2:	0d1a      	lsrs	r2, r3, #20
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80034a8:	f107 0310 	add.w	r3, r7, #16
 80034ac:	4619      	mov	r1, r3
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff fcd4 	bl	8002e5c <HAL_SD_GetCardCSD>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80034ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80034be:	e021      	b.n	8003504 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6819      	ldr	r1, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c8:	041b      	lsls	r3, r3, #16
 80034ca:	2200      	movs	r2, #0
 80034cc:	461c      	mov	r4, r3
 80034ce:	4615      	mov	r5, r2
 80034d0:	4622      	mov	r2, r4
 80034d2:	462b      	mov	r3, r5
 80034d4:	4608      	mov	r0, r1
 80034d6:	f001 fc95 	bl	8004e04 <SDMMC_CmdSelDesel>
 80034da:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80034dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <SD_InitCard+0x176>
  {
    return errorstate;
 80034e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e4:	e00e      	b.n	8003504 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681d      	ldr	r5, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	466c      	mov	r4, sp
 80034ee:	f103 0210 	add.w	r2, r3, #16
 80034f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80034f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80034f8:	3304      	adds	r3, #4
 80034fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034fc:	4628      	mov	r0, r5
 80034fe:	f001 fad9 	bl	8004ab4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3740      	adds	r7, #64	; 0x40
 8003508:	46bd      	mov	sp, r7
 800350a:	bdb0      	pop	{r4, r5, r7, pc}

0800350c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	2300      	movs	r3, #0
 800351e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f001 fc90 	bl	8004e4a <SDMMC_CmdGoIdleState>
 800352a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	e072      	b.n	800361c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f001 fca3 	bl	8004e86 <SDMMC_CmdOperCond>
 8003540:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00d      	beq.n	8003564 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f001 fc79 	bl	8004e4a <SDMMC_CmdGoIdleState>
 8003558:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d004      	beq.n	800356a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	e05b      	b.n	800361c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800356e:	2b01      	cmp	r3, #1
 8003570:	d137      	bne.n	80035e2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f001 fca3 	bl	8004ec4 <SDMMC_CmdAppCommand>
 800357e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d02d      	beq.n	80035e2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003586:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800358a:	e047      	b.n	800361c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f001 fc96 	bl	8004ec4 <SDMMC_CmdAppCommand>
 8003598:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <SD_PowerON+0x98>
    {
      return errorstate;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	e03b      	b.n	800361c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	491e      	ldr	r1, [pc, #120]	; (8003624 <SD_PowerON+0x118>)
 80035aa:	4618      	mov	r0, r3
 80035ac:	f001 fcac 	bl	8004f08 <SDMMC_CmdAppOperCommand>
 80035b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035bc:	e02e      	b.n	800361c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2100      	movs	r1, #0
 80035c4:	4618      	mov	r0, r3
 80035c6:	f001 fb11 	bl	8004bec <SDIO_GetResponse>
 80035ca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	0fdb      	lsrs	r3, r3, #31
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <SD_PowerON+0xcc>
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <SD_PowerON+0xce>
 80035d8:	2300      	movs	r3, #0
 80035da:	613b      	str	r3, [r7, #16]

    count++;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	3301      	adds	r3, #1
 80035e0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d802      	bhi.n	80035f2 <SD_PowerON+0xe6>
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0cc      	beq.n	800358c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d902      	bls.n	8003602 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80035fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003600:	e00c      	b.n	800361c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	645a      	str	r2, [r3, #68]	; 0x44
 8003612:	e002      	b.n	800361a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	c1100000 	.word	0xc1100000

08003628 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d102      	bne.n	800363e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003638:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800363c:	e018      	b.n	8003670 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003646:	041b      	lsls	r3, r3, #16
 8003648:	4619      	mov	r1, r3
 800364a:	4610      	mov	r0, r2
 800364c:	f001 fd20 	bl	8005090 <SDMMC_CmdSendStatus>
 8003650:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	e009      	b.n	8003670 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f001 fac2 	bl	8004bec <SDIO_GetResponse>
 8003668:	4602      	mov	r2, r0
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	2300      	movs	r3, #0
 8003686:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f001 faac 	bl	8004bec <SDIO_GetResponse>
 8003694:	4603      	mov	r3, r0
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800369e:	d102      	bne.n	80036a6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80036a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036a4:	e02f      	b.n	8003706 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80036a6:	f107 030c 	add.w	r3, r7, #12
 80036aa:	4619      	mov	r1, r3
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f879 	bl	80037a4 <SD_FindSCR>
 80036b2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	e023      	b.n	8003706 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01c      	beq.n	8003702 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d0:	041b      	lsls	r3, r3, #16
 80036d2:	4619      	mov	r1, r3
 80036d4:	4610      	mov	r0, r2
 80036d6:	f001 fbf5 	bl	8004ec4 <SDMMC_CmdAppCommand>
 80036da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	e00f      	b.n	8003706 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2102      	movs	r1, #2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 fc2e 	bl	8004f4e <SDMMC_CmdBusWidth>
 80036f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	e003      	b.n	8003706 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80036fe:	2300      	movs	r3, #0
 8003700:	e001      	b.n	8003706 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003702:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2100      	movs	r1, #0
 8003724:	4618      	mov	r0, r3
 8003726:	f001 fa61 	bl	8004bec <SDIO_GetResponse>
 800372a:	4603      	mov	r3, r0
 800372c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003730:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003734:	d102      	bne.n	800373c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003736:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800373a:	e02f      	b.n	800379c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800373c:	f107 030c 	add.w	r3, r7, #12
 8003740:	4619      	mov	r1, r3
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f82e 	bl	80037a4 <SD_FindSCR>
 8003748:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	e023      	b.n	800379c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d01c      	beq.n	8003798 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003766:	041b      	lsls	r3, r3, #16
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f001 fbaa 	bl	8004ec4 <SDMMC_CmdAppCommand>
 8003770:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	e00f      	b.n	800379c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2100      	movs	r1, #0
 8003782:	4618      	mov	r0, r3
 8003784:	f001 fbe3 	bl	8004f4e <SDMMC_CmdBusWidth>
 8003788:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	e003      	b.n	800379c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003794:	2300      	movs	r3, #0
 8003796:	e001      	b.n	800379c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003798:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80037a4:	b590      	push	{r4, r7, lr}
 80037a6:	b08f      	sub	sp, #60	; 0x3c
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80037ae:	f7fd fd15 	bl	80011dc <HAL_GetTick>
 80037b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80037b8:	2300      	movs	r3, #0
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2108      	movs	r1, #8
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 fa4d 	bl	8004c6a <SDMMC_CmdBlockLength>
 80037d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <SD_FindSCR+0x38>
  {
    return errorstate;
 80037d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037da:	e0b2      	b.n	8003942 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e4:	041b      	lsls	r3, r3, #16
 80037e6:	4619      	mov	r1, r3
 80037e8:	4610      	mov	r0, r2
 80037ea:	f001 fb6b 	bl	8004ec4 <SDMMC_CmdAppCommand>
 80037ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <SD_FindSCR+0x56>
  {
    return errorstate;
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	e0a3      	b.n	8003942 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295
 80037fe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003800:	2308      	movs	r3, #8
 8003802:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003804:	2330      	movs	r3, #48	; 0x30
 8003806:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003808:	2302      	movs	r3, #2
 800380a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800380c:	2300      	movs	r3, #0
 800380e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003810:	2301      	movs	r3, #1
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f107 0210 	add.w	r2, r7, #16
 800381c:	4611      	mov	r1, r2
 800381e:	4618      	mov	r0, r3
 8003820:	f001 f9f7 	bl	8004c12 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f001 fbb2 	bl	8004f92 <SDMMC_CmdSendSCR>
 800382e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	2b00      	cmp	r3, #0
 8003834:	d02a      	beq.n	800388c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	e083      	b.n	8003942 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00f      	beq.n	8003868 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6819      	ldr	r1, [r3, #0]
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	f107 0208 	add.w	r2, r7, #8
 8003854:	18d4      	adds	r4, r2, r3
 8003856:	4608      	mov	r0, r1
 8003858:	f001 f957 	bl	8004b0a <SDIO_ReadFIFO>
 800385c:	4603      	mov	r3, r0
 800385e:	6023      	str	r3, [r4, #0]
      index++;
 8003860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003862:	3301      	adds	r3, #1
 8003864:	637b      	str	r3, [r7, #52]	; 0x34
 8003866:	e006      	b.n	8003876 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d012      	beq.n	800389c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003876:	f7fd fcb1 	bl	80011dc <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d102      	bne.n	800388c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003886:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800388a:	e05a      	b.n	8003942 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003892:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0cf      	beq.n	800383a <SD_FindSCR+0x96>
 800389a:	e000      	b.n	800389e <SD_FindSCR+0xfa>
      break;
 800389c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2208      	movs	r2, #8
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80038b4:	2308      	movs	r3, #8
 80038b6:	e044      	b.n	8003942 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2202      	movs	r2, #2
 80038cc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80038ce:	2302      	movs	r3, #2
 80038d0:	e037      	b.n	8003942 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2220      	movs	r2, #32
 80038e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80038e8:	2320      	movs	r3, #32
 80038ea:	e02a      	b.n	8003942 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f240 523a 	movw	r2, #1338	; 0x53a
 80038f4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	061a      	lsls	r2, r3, #24
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003902:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	0a1b      	lsrs	r3, r3, #8
 8003908:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800390c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	0e1b      	lsrs	r3, r3, #24
 8003912:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003916:	601a      	str	r2, [r3, #0]
    scr++;
 8003918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391a:	3304      	adds	r3, #4
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	061a      	lsls	r2, r3, #24
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	021b      	lsls	r3, r3, #8
 8003926:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800392a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003934:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	0e1b      	lsrs	r3, r3, #24
 800393a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	373c      	adds	r7, #60	; 0x3c
 8003946:	46bd      	mov	sp, r7
 8003948:	bd90      	pop	{r4, r7, pc}

0800394a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e03f      	b.n	80039dc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7fd fad5 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2224      	movs	r2, #36	; 0x24
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800398c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fe1c 	bl	80045cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08a      	sub	sp, #40	; 0x28
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	4613      	mov	r3, r2
 80039f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d17c      	bne.n	8003afe <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_UART_Transmit+0x2c>
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e075      	b.n	8003b00 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_UART_Transmit+0x3e>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e06e      	b.n	8003b00 <HAL_UART_Transmit+0x11c>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2221      	movs	r2, #33	; 0x21
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a38:	f7fd fbd0 	bl	80011dc <HAL_GetTick>
 8003a3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	88fa      	ldrh	r2, [r7, #6]
 8003a42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	88fa      	ldrh	r2, [r7, #6]
 8003a48:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a52:	d108      	bne.n	8003a66 <HAL_UART_Transmit+0x82>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d104      	bne.n	8003a66 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	e003      	b.n	8003a6e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a76:	e02a      	b.n	8003ace <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2180      	movs	r1, #128	; 0x80
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fb9a 	bl	80041bc <UART_WaitOnFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e036      	b.n	8003b00 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10b      	bne.n	8003ab0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aa6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	3302      	adds	r3, #2
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	e007      	b.n	8003ac0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	781a      	ldrb	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3301      	adds	r3, #1
 8003abe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1cf      	bne.n	8003a78 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2140      	movs	r1, #64	; 0x40
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fb6a 	bl	80041bc <UART_WaitOnFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e006      	b.n	8003b00 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e000      	b.n	8003b00 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003afe:	2302      	movs	r3, #2
  }
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3720      	adds	r7, #32
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	; 0x28
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	f040 808c 	bne.w	8003c42 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_UART_Receive+0x2e>
 8003b30:	88fb      	ldrh	r3, [r7, #6]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e084      	b.n	8003c44 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_UART_Receive+0x40>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e07d      	b.n	8003c44 <HAL_UART_Receive+0x13c>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2222      	movs	r2, #34	; 0x22
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b64:	f7fd fb3a 	bl	80011dc <HAL_GetTick>
 8003b68:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	88fa      	ldrh	r2, [r7, #6]
 8003b6e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	88fa      	ldrh	r2, [r7, #6]
 8003b74:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7e:	d108      	bne.n	8003b92 <HAL_UART_Receive+0x8a>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d104      	bne.n	8003b92 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	e003      	b.n	8003b9a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003ba2:	e043      	b.n	8003c2c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2200      	movs	r2, #0
 8003bac:	2120      	movs	r1, #32
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fb04 	bl	80041bc <UART_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e042      	b.n	8003c44 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10c      	bne.n	8003bde <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	3302      	adds	r3, #2
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	e01f      	b.n	8003c1e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be6:	d007      	beq.n	8003bf8 <HAL_UART_Receive+0xf0>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <HAL_UART_Receive+0xfe>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d106      	bne.n	8003c06 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	e008      	b.n	8003c18 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1b6      	bne.n	8003ba4 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e000      	b.n	8003c44 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003c42:	2302      	movs	r3, #2
  }
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3720      	adds	r7, #32
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b0ba      	sub	sp, #232	; 0xe8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10f      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x66>
 8003c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fbd3 	bl	8004456 <UART_Receive_IT>
      return;
 8003cb0:	e256      	b.n	8004160 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003cb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 80de 	beq.w	8003e78 <HAL_UART_IRQHandler+0x22c>
 8003cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d106      	bne.n	8003cd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ccc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80d1 	beq.w	8003e78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00b      	beq.n	8003cfa <HAL_UART_IRQHandler+0xae>
 8003ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d005      	beq.n	8003cfa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f043 0201 	orr.w	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00b      	beq.n	8003d1e <HAL_UART_IRQHandler+0xd2>
 8003d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d005      	beq.n	8003d1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f043 0202 	orr.w	r2, r3, #2
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00b      	beq.n	8003d42 <HAL_UART_IRQHandler+0xf6>
 8003d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d005      	beq.n	8003d42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f043 0204 	orr.w	r2, r3, #4
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d011      	beq.n	8003d72 <HAL_UART_IRQHandler+0x126>
 8003d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d105      	bne.n	8003d66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d005      	beq.n	8003d72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f043 0208 	orr.w	r2, r3, #8
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 81ed 	beq.w	8004156 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_UART_IRQHandler+0x14e>
 8003d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fb5e 	bl	8004456 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d103      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x17a>
 8003dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d04f      	beq.n	8003e66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fa66 	bl	8004298 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d141      	bne.n	8003e5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3314      	adds	r3, #20
 8003de0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003df8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3314      	adds	r3, #20
 8003e02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1d9      	bne.n	8003dda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d013      	beq.n	8003e56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	4a7d      	ldr	r2, [pc, #500]	; (8004028 <HAL_UART_IRQHandler+0x3dc>)
 8003e34:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fd fb99 	bl	8001572 <HAL_DMA_Abort_IT>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d016      	beq.n	8003e74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e50:	4610      	mov	r0, r2
 8003e52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e54:	e00e      	b.n	8003e74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f99a 	bl	8004190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e5c:	e00a      	b.n	8003e74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f996 	bl	8004190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e64:	e006      	b.n	8003e74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f992 	bl	8004190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e72:	e170      	b.n	8004156 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e74:	bf00      	nop
    return;
 8003e76:	e16e      	b.n	8004156 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	f040 814a 	bne.w	8004116 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8143 	beq.w	8004116 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 813c 	beq.w	8004116 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b40      	cmp	r3, #64	; 0x40
 8003ec0:	f040 80b4 	bne.w	800402c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ed0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8140 	beq.w	800415a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	f080 8139 	bcs.w	800415a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efa:	f000 8088 	beq.w	800400e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	330c      	adds	r3, #12
 8003f26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f3a:	e841 2300 	strex	r3, r2, [r1]
 8003f3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1d9      	bne.n	8003efe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3314      	adds	r3, #20
 8003f50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3314      	adds	r3, #20
 8003f6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e1      	bne.n	8003f4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3314      	adds	r3, #20
 8003f8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3314      	adds	r3, #20
 8003fa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003faa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003fb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e3      	bne.n	8003f86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fde:	f023 0310 	bic.w	r3, r3, #16
 8003fe2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	330c      	adds	r3, #12
 8003fec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ff0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ff2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ff6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e3      	bne.n	8003fcc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004008:	4618      	mov	r0, r3
 800400a:	f7fd fa42 	bl	8001492 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004016:	b29b      	uxth	r3, r3
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	b29b      	uxth	r3, r3
 800401c:	4619      	mov	r1, r3
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f8c0 	bl	80041a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004024:	e099      	b.n	800415a <HAL_UART_IRQHandler+0x50e>
 8004026:	bf00      	nop
 8004028:	0800435f 	.word	0x0800435f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004034:	b29b      	uxth	r3, r3
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 808b 	beq.w	800415e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004048:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8086 	beq.w	800415e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	330c      	adds	r3, #12
 8004058:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004064:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004068:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004076:	647a      	str	r2, [r7, #68]	; 0x44
 8004078:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800407c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e3      	bne.n	8004052 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3314      	adds	r3, #20
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	623b      	str	r3, [r7, #32]
   return(result);
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3314      	adds	r3, #20
 80040aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040ae:	633a      	str	r2, [r7, #48]	; 0x30
 80040b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b6:	e841 2300 	strex	r3, r2, [r1]
 80040ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e3      	bne.n	800408a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	330c      	adds	r3, #12
 80040d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	60fb      	str	r3, [r7, #12]
   return(result);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0310 	bic.w	r3, r3, #16
 80040e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	330c      	adds	r3, #12
 80040f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80040f4:	61fa      	str	r2, [r7, #28]
 80040f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	69b9      	ldr	r1, [r7, #24]
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	617b      	str	r3, [r7, #20]
   return(result);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e3      	bne.n	80040d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004108:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800410c:	4619      	mov	r1, r3
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f848 	bl	80041a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004114:	e023      	b.n	800415e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411e:	2b00      	cmp	r3, #0
 8004120:	d009      	beq.n	8004136 <HAL_UART_IRQHandler+0x4ea>
 8004122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f929 	bl	8004386 <UART_Transmit_IT>
    return;
 8004134:	e014      	b.n	8004160 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00e      	beq.n	8004160 <HAL_UART_IRQHandler+0x514>
 8004142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d008      	beq.n	8004160 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f969 	bl	8004426 <UART_EndTransmit_IT>
    return;
 8004154:	e004      	b.n	8004160 <HAL_UART_IRQHandler+0x514>
    return;
 8004156:	bf00      	nop
 8004158:	e002      	b.n	8004160 <HAL_UART_IRQHandler+0x514>
      return;
 800415a:	bf00      	nop
 800415c:	e000      	b.n	8004160 <HAL_UART_IRQHandler+0x514>
      return;
 800415e:	bf00      	nop
  }
}
 8004160:	37e8      	adds	r7, #232	; 0xe8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop

08004168 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b090      	sub	sp, #64	; 0x40
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	4613      	mov	r3, r2
 80041ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041cc:	e050      	b.n	8004270 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d4:	d04c      	beq.n	8004270 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d007      	beq.n	80041ec <UART_WaitOnFlagUntilTimeout+0x30>
 80041dc:	f7fc fffe 	bl	80011dc <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d241      	bcs.n	8004270 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	330c      	adds	r3, #12
 80041f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	330c      	adds	r3, #12
 800420a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800420c:	637a      	str	r2, [r7, #52]	; 0x34
 800420e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e5      	bne.n	80041ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3314      	adds	r3, #20
 8004226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	613b      	str	r3, [r7, #16]
   return(result);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f023 0301 	bic.w	r3, r3, #1
 8004236:	63bb      	str	r3, [r7, #56]	; 0x38
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3314      	adds	r3, #20
 800423e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004240:	623a      	str	r2, [r7, #32]
 8004242:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	69f9      	ldr	r1, [r7, #28]
 8004246:	6a3a      	ldr	r2, [r7, #32]
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	61bb      	str	r3, [r7, #24]
   return(result);
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e5      	bne.n	8004220 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e00f      	b.n	8004290 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4013      	ands	r3, r2
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	429a      	cmp	r2, r3
 800427e:	bf0c      	ite	eq
 8004280:	2301      	moveq	r3, #1
 8004282:	2300      	movne	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	461a      	mov	r2, r3
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	429a      	cmp	r2, r3
 800428c:	d09f      	beq.n	80041ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3740      	adds	r7, #64	; 0x40
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b095      	sub	sp, #84	; 0x54
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	330c      	adds	r3, #12
 80042a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	330c      	adds	r3, #12
 80042be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042c0:	643a      	str	r2, [r7, #64]	; 0x40
 80042c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e5      	bne.n	80042a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3314      	adds	r3, #20
 80042da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3314      	adds	r3, #20
 80042f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e5      	bne.n	80042d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	2b01      	cmp	r3, #1
 800430e:	d119      	bne.n	8004344 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f023 0310 	bic.w	r3, r3, #16
 8004326:	647b      	str	r3, [r7, #68]	; 0x44
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	330c      	adds	r3, #12
 800432e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004330:	61ba      	str	r2, [r7, #24]
 8004332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6979      	ldr	r1, [r7, #20]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	613b      	str	r3, [r7, #16]
   return(result);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e5      	bne.n	8004310 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004352:	bf00      	nop
 8004354:	3754      	adds	r7, #84	; 0x54
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff ff09 	bl	8004190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004386:	b480      	push	{r7}
 8004388:	b085      	sub	sp, #20
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b21      	cmp	r3, #33	; 0x21
 8004398:	d13e      	bne.n	8004418 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a2:	d114      	bne.n	80043ce <UART_Transmit_IT+0x48>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d110      	bne.n	80043ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	1c9a      	adds	r2, r3, #2
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	621a      	str	r2, [r3, #32]
 80043cc:	e008      	b.n	80043e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	1c59      	adds	r1, r3, #1
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6211      	str	r1, [r2, #32]
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	4619      	mov	r1, r3
 80043ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10f      	bne.n	8004414 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004402:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004412:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	e000      	b.n	800441a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004418:	2302      	movs	r3, #2
  }
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800443c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff fe8e 	bl	8004168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b08c      	sub	sp, #48	; 0x30
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b22      	cmp	r3, #34	; 0x22
 8004468:	f040 80ab 	bne.w	80045c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004474:	d117      	bne.n	80044a6 <UART_Receive_IT+0x50>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d113      	bne.n	80044a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800447e:	2300      	movs	r3, #0
 8004480:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	b29b      	uxth	r3, r3
 8004490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004494:	b29a      	uxth	r2, r3
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	1c9a      	adds	r2, r3, #2
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28
 80044a4:	e026      	b.n	80044f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b8:	d007      	beq.n	80044ca <UART_Receive_IT+0x74>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10a      	bne.n	80044d8 <UART_Receive_IT+0x82>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	e008      	b.n	80044ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	4619      	mov	r1, r3
 8004502:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004504:	2b00      	cmp	r3, #0
 8004506:	d15a      	bne.n	80045be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0220 	bic.w	r2, r2, #32
 8004516:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004526:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695a      	ldr	r2, [r3, #20]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004544:	2b01      	cmp	r3, #1
 8004546:	d135      	bne.n	80045b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	330c      	adds	r3, #12
 8004554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	613b      	str	r3, [r7, #16]
   return(result);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f023 0310 	bic.w	r3, r3, #16
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	330c      	adds	r3, #12
 800456c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456e:	623a      	str	r2, [r7, #32]
 8004570:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	69f9      	ldr	r1, [r7, #28]
 8004574:	6a3a      	ldr	r2, [r7, #32]
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	61bb      	str	r3, [r7, #24]
   return(result);
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e5      	bne.n	800454e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b10      	cmp	r3, #16
 800458e:	d10a      	bne.n	80045a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045aa:	4619      	mov	r1, r3
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff fdf9 	bl	80041a4 <HAL_UARTEx_RxEventCallback>
 80045b2:	e002      	b.n	80045ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff fde1 	bl	800417c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e002      	b.n	80045c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	e000      	b.n	80045c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80045c2:	2302      	movs	r3, #2
  }
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3730      	adds	r7, #48	; 0x30
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045d0:	b0c0      	sub	sp, #256	; 0x100
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e8:	68d9      	ldr	r1, [r3, #12]
 80045ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	ea40 0301 	orr.w	r3, r0, r1
 80045f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	431a      	orrs	r2, r3
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	431a      	orrs	r2, r3
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004624:	f021 010c 	bic.w	r1, r1, #12
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004632:	430b      	orrs	r3, r1
 8004634:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004646:	6999      	ldr	r1, [r3, #24]
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	ea40 0301 	orr.w	r3, r0, r1
 8004652:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4b8f      	ldr	r3, [pc, #572]	; (8004898 <UART_SetConfig+0x2cc>)
 800465c:	429a      	cmp	r2, r3
 800465e:	d005      	beq.n	800466c <UART_SetConfig+0xa0>
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4b8d      	ldr	r3, [pc, #564]	; (800489c <UART_SetConfig+0x2d0>)
 8004668:	429a      	cmp	r2, r3
 800466a:	d104      	bne.n	8004676 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800466c:	f7fd ffce 	bl	800260c <HAL_RCC_GetPCLK2Freq>
 8004670:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004674:	e003      	b.n	800467e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004676:	f7fd ffb5 	bl	80025e4 <HAL_RCC_GetPCLK1Freq>
 800467a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800467e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004688:	f040 810c 	bne.w	80048a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800468c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004690:	2200      	movs	r2, #0
 8004692:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004696:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800469a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800469e:	4622      	mov	r2, r4
 80046a0:	462b      	mov	r3, r5
 80046a2:	1891      	adds	r1, r2, r2
 80046a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80046a6:	415b      	adcs	r3, r3
 80046a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046ae:	4621      	mov	r1, r4
 80046b0:	eb12 0801 	adds.w	r8, r2, r1
 80046b4:	4629      	mov	r1, r5
 80046b6:	eb43 0901 	adc.w	r9, r3, r1
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046ce:	4690      	mov	r8, r2
 80046d0:	4699      	mov	r9, r3
 80046d2:	4623      	mov	r3, r4
 80046d4:	eb18 0303 	adds.w	r3, r8, r3
 80046d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046dc:	462b      	mov	r3, r5
 80046de:	eb49 0303 	adc.w	r3, r9, r3
 80046e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80046f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046fa:	460b      	mov	r3, r1
 80046fc:	18db      	adds	r3, r3, r3
 80046fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004700:	4613      	mov	r3, r2
 8004702:	eb42 0303 	adc.w	r3, r2, r3
 8004706:	657b      	str	r3, [r7, #84]	; 0x54
 8004708:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800470c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004710:	f7fb fd5a 	bl	80001c8 <__aeabi_uldivmod>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4b61      	ldr	r3, [pc, #388]	; (80048a0 <UART_SetConfig+0x2d4>)
 800471a:	fba3 2302 	umull	r2, r3, r3, r2
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	011c      	lsls	r4, r3, #4
 8004722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004726:	2200      	movs	r2, #0
 8004728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800472c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004730:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004734:	4642      	mov	r2, r8
 8004736:	464b      	mov	r3, r9
 8004738:	1891      	adds	r1, r2, r2
 800473a:	64b9      	str	r1, [r7, #72]	; 0x48
 800473c:	415b      	adcs	r3, r3
 800473e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004740:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004744:	4641      	mov	r1, r8
 8004746:	eb12 0a01 	adds.w	sl, r2, r1
 800474a:	4649      	mov	r1, r9
 800474c:	eb43 0b01 	adc.w	fp, r3, r1
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800475c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004760:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004764:	4692      	mov	sl, r2
 8004766:	469b      	mov	fp, r3
 8004768:	4643      	mov	r3, r8
 800476a:	eb1a 0303 	adds.w	r3, sl, r3
 800476e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004772:	464b      	mov	r3, r9
 8004774:	eb4b 0303 	adc.w	r3, fp, r3
 8004778:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004788:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800478c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004790:	460b      	mov	r3, r1
 8004792:	18db      	adds	r3, r3, r3
 8004794:	643b      	str	r3, [r7, #64]	; 0x40
 8004796:	4613      	mov	r3, r2
 8004798:	eb42 0303 	adc.w	r3, r2, r3
 800479c:	647b      	str	r3, [r7, #68]	; 0x44
 800479e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047a6:	f7fb fd0f 	bl	80001c8 <__aeabi_uldivmod>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4611      	mov	r1, r2
 80047b0:	4b3b      	ldr	r3, [pc, #236]	; (80048a0 <UART_SetConfig+0x2d4>)
 80047b2:	fba3 2301 	umull	r2, r3, r3, r1
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	2264      	movs	r2, #100	; 0x64
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
 80047be:	1acb      	subs	r3, r1, r3
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047c6:	4b36      	ldr	r3, [pc, #216]	; (80048a0 <UART_SetConfig+0x2d4>)
 80047c8:	fba3 2302 	umull	r2, r3, r3, r2
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047d4:	441c      	add	r4, r3
 80047d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80047e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047e8:	4642      	mov	r2, r8
 80047ea:	464b      	mov	r3, r9
 80047ec:	1891      	adds	r1, r2, r2
 80047ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80047f0:	415b      	adcs	r3, r3
 80047f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047f8:	4641      	mov	r1, r8
 80047fa:	1851      	adds	r1, r2, r1
 80047fc:	6339      	str	r1, [r7, #48]	; 0x30
 80047fe:	4649      	mov	r1, r9
 8004800:	414b      	adcs	r3, r1
 8004802:	637b      	str	r3, [r7, #52]	; 0x34
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004810:	4659      	mov	r1, fp
 8004812:	00cb      	lsls	r3, r1, #3
 8004814:	4651      	mov	r1, sl
 8004816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800481a:	4651      	mov	r1, sl
 800481c:	00ca      	lsls	r2, r1, #3
 800481e:	4610      	mov	r0, r2
 8004820:	4619      	mov	r1, r3
 8004822:	4603      	mov	r3, r0
 8004824:	4642      	mov	r2, r8
 8004826:	189b      	adds	r3, r3, r2
 8004828:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800482c:	464b      	mov	r3, r9
 800482e:	460a      	mov	r2, r1
 8004830:	eb42 0303 	adc.w	r3, r2, r3
 8004834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004844:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004848:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800484c:	460b      	mov	r3, r1
 800484e:	18db      	adds	r3, r3, r3
 8004850:	62bb      	str	r3, [r7, #40]	; 0x28
 8004852:	4613      	mov	r3, r2
 8004854:	eb42 0303 	adc.w	r3, r2, r3
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800485a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800485e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004862:	f7fb fcb1 	bl	80001c8 <__aeabi_uldivmod>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <UART_SetConfig+0x2d4>)
 800486c:	fba3 1302 	umull	r1, r3, r3, r2
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	2164      	movs	r1, #100	; 0x64
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	3332      	adds	r3, #50	; 0x32
 800487e:	4a08      	ldr	r2, [pc, #32]	; (80048a0 <UART_SetConfig+0x2d4>)
 8004880:	fba2 2303 	umull	r2, r3, r2, r3
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	f003 0207 	and.w	r2, r3, #7
 800488a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4422      	add	r2, r4
 8004892:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004894:	e105      	b.n	8004aa2 <UART_SetConfig+0x4d6>
 8004896:	bf00      	nop
 8004898:	40011000 	.word	0x40011000
 800489c:	40011400 	.word	0x40011400
 80048a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048a8:	2200      	movs	r2, #0
 80048aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80048b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80048b6:	4642      	mov	r2, r8
 80048b8:	464b      	mov	r3, r9
 80048ba:	1891      	adds	r1, r2, r2
 80048bc:	6239      	str	r1, [r7, #32]
 80048be:	415b      	adcs	r3, r3
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
 80048c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048c6:	4641      	mov	r1, r8
 80048c8:	1854      	adds	r4, r2, r1
 80048ca:	4649      	mov	r1, r9
 80048cc:	eb43 0501 	adc.w	r5, r3, r1
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	00eb      	lsls	r3, r5, #3
 80048da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048de:	00e2      	lsls	r2, r4, #3
 80048e0:	4614      	mov	r4, r2
 80048e2:	461d      	mov	r5, r3
 80048e4:	4643      	mov	r3, r8
 80048e6:	18e3      	adds	r3, r4, r3
 80048e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048ec:	464b      	mov	r3, r9
 80048ee:	eb45 0303 	adc.w	r3, r5, r3
 80048f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004902:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004912:	4629      	mov	r1, r5
 8004914:	008b      	lsls	r3, r1, #2
 8004916:	4621      	mov	r1, r4
 8004918:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800491c:	4621      	mov	r1, r4
 800491e:	008a      	lsls	r2, r1, #2
 8004920:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004924:	f7fb fc50 	bl	80001c8 <__aeabi_uldivmod>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4b60      	ldr	r3, [pc, #384]	; (8004ab0 <UART_SetConfig+0x4e4>)
 800492e:	fba3 2302 	umull	r2, r3, r3, r2
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	011c      	lsls	r4, r3, #4
 8004936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800493a:	2200      	movs	r2, #0
 800493c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004940:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004944:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004948:	4642      	mov	r2, r8
 800494a:	464b      	mov	r3, r9
 800494c:	1891      	adds	r1, r2, r2
 800494e:	61b9      	str	r1, [r7, #24]
 8004950:	415b      	adcs	r3, r3
 8004952:	61fb      	str	r3, [r7, #28]
 8004954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004958:	4641      	mov	r1, r8
 800495a:	1851      	adds	r1, r2, r1
 800495c:	6139      	str	r1, [r7, #16]
 800495e:	4649      	mov	r1, r9
 8004960:	414b      	adcs	r3, r1
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	f04f 0300 	mov.w	r3, #0
 800496c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004970:	4659      	mov	r1, fp
 8004972:	00cb      	lsls	r3, r1, #3
 8004974:	4651      	mov	r1, sl
 8004976:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800497a:	4651      	mov	r1, sl
 800497c:	00ca      	lsls	r2, r1, #3
 800497e:	4610      	mov	r0, r2
 8004980:	4619      	mov	r1, r3
 8004982:	4603      	mov	r3, r0
 8004984:	4642      	mov	r2, r8
 8004986:	189b      	adds	r3, r3, r2
 8004988:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800498c:	464b      	mov	r3, r9
 800498e:	460a      	mov	r2, r1
 8004990:	eb42 0303 	adc.w	r3, r2, r3
 8004994:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80049a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80049b0:	4649      	mov	r1, r9
 80049b2:	008b      	lsls	r3, r1, #2
 80049b4:	4641      	mov	r1, r8
 80049b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ba:	4641      	mov	r1, r8
 80049bc:	008a      	lsls	r2, r1, #2
 80049be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80049c2:	f7fb fc01 	bl	80001c8 <__aeabi_uldivmod>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4b39      	ldr	r3, [pc, #228]	; (8004ab0 <UART_SetConfig+0x4e4>)
 80049cc:	fba3 1302 	umull	r1, r3, r3, r2
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	2164      	movs	r1, #100	; 0x64
 80049d4:	fb01 f303 	mul.w	r3, r1, r3
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	3332      	adds	r3, #50	; 0x32
 80049de:	4a34      	ldr	r2, [pc, #208]	; (8004ab0 <UART_SetConfig+0x4e4>)
 80049e0:	fba2 2303 	umull	r2, r3, r2, r3
 80049e4:	095b      	lsrs	r3, r3, #5
 80049e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ea:	441c      	add	r4, r3
 80049ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049f0:	2200      	movs	r2, #0
 80049f2:	673b      	str	r3, [r7, #112]	; 0x70
 80049f4:	677a      	str	r2, [r7, #116]	; 0x74
 80049f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049fa:	4642      	mov	r2, r8
 80049fc:	464b      	mov	r3, r9
 80049fe:	1891      	adds	r1, r2, r2
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	415b      	adcs	r3, r3
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a0a:	4641      	mov	r1, r8
 8004a0c:	1851      	adds	r1, r2, r1
 8004a0e:	6039      	str	r1, [r7, #0]
 8004a10:	4649      	mov	r1, r9
 8004a12:	414b      	adcs	r3, r1
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a22:	4659      	mov	r1, fp
 8004a24:	00cb      	lsls	r3, r1, #3
 8004a26:	4651      	mov	r1, sl
 8004a28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a2c:	4651      	mov	r1, sl
 8004a2e:	00ca      	lsls	r2, r1, #3
 8004a30:	4610      	mov	r0, r2
 8004a32:	4619      	mov	r1, r3
 8004a34:	4603      	mov	r3, r0
 8004a36:	4642      	mov	r2, r8
 8004a38:	189b      	adds	r3, r3, r2
 8004a3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a3c:	464b      	mov	r3, r9
 8004a3e:	460a      	mov	r2, r1
 8004a40:	eb42 0303 	adc.w	r3, r2, r3
 8004a44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a50:	667a      	str	r2, [r7, #100]	; 0x64
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a5e:	4649      	mov	r1, r9
 8004a60:	008b      	lsls	r3, r1, #2
 8004a62:	4641      	mov	r1, r8
 8004a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a68:	4641      	mov	r1, r8
 8004a6a:	008a      	lsls	r2, r1, #2
 8004a6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a70:	f7fb fbaa 	bl	80001c8 <__aeabi_uldivmod>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <UART_SetConfig+0x4e4>)
 8004a7a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	2164      	movs	r1, #100	; 0x64
 8004a82:	fb01 f303 	mul.w	r3, r1, r3
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	3332      	adds	r3, #50	; 0x32
 8004a8c:	4a08      	ldr	r2, [pc, #32]	; (8004ab0 <UART_SetConfig+0x4e4>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	f003 020f 	and.w	r2, r3, #15
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4422      	add	r2, r4
 8004aa0:	609a      	str	r2, [r3, #8]
}
 8004aa2:	bf00      	nop
 8004aa4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aae:	bf00      	nop
 8004ab0:	51eb851f 	.word	0x51eb851f

08004ab4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	b480      	push	{r7}
 8004ab8:	b085      	sub	sp, #20
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	f107 001c 	add.w	r0, r7, #28
 8004ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004aca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004acc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004ace:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004ad2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004ad6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004ada:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004ade:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004aee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	b004      	add	sp, #16
 8004b08:	4770      	bx	lr

08004b0a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2203      	movs	r2, #3
 8004b52:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b085      	sub	sp, #20
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b9c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004ba2:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004ba8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004bb8:	f023 030f 	bic.w	r3, r3, #15
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	b2db      	uxtb	r3, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3314      	adds	r3, #20
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	4413      	add	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
}  
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b085      	sub	sp, #20
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c38:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004c3e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004c44:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0

}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b088      	sub	sp, #32
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004c78:	2310      	movs	r3, #16
 8004c7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c7c:	2340      	movs	r3, #64	; 0x40
 8004c7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c8a:	f107 0308 	add.w	r3, r7, #8
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff ff74 	bl	8004b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9a:	2110      	movs	r1, #16
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fa19 	bl	80050d4 <SDMMC_GetCmdResp1>
 8004ca2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3720      	adds	r7, #32
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b088      	sub	sp, #32
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004cbc:	2311      	movs	r3, #17
 8004cbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cc0:	2340      	movs	r3, #64	; 0x40
 8004cc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ccc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cce:	f107 0308 	add.w	r3, r7, #8
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff ff52 	bl	8004b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cde:	2111      	movs	r1, #17
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f9f7 	bl	80050d4 <SDMMC_GetCmdResp1>
 8004ce6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3720      	adds	r7, #32
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b088      	sub	sp, #32
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004d00:	2312      	movs	r3, #18
 8004d02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d04:	2340      	movs	r3, #64	; 0x40
 8004d06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d12:	f107 0308 	add.w	r3, r7, #8
 8004d16:	4619      	mov	r1, r3
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff ff30 	bl	8004b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d22:	2112      	movs	r1, #18
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f9d5 	bl	80050d4 <SDMMC_GetCmdResp1>
 8004d2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d2c:	69fb      	ldr	r3, [r7, #28]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3720      	adds	r7, #32
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b088      	sub	sp, #32
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004d44:	2318      	movs	r3, #24
 8004d46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d48:	2340      	movs	r3, #64	; 0x40
 8004d4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d56:	f107 0308 	add.w	r3, r7, #8
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff ff0e 	bl	8004b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d66:	2118      	movs	r1, #24
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f9b3 	bl	80050d4 <SDMMC_GetCmdResp1>
 8004d6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d70:	69fb      	ldr	r3, [r7, #28]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b088      	sub	sp, #32
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004d88:	2319      	movs	r3, #25
 8004d8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d8c:	2340      	movs	r3, #64	; 0x40
 8004d8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d9a:	f107 0308 	add.w	r3, r7, #8
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff feec 	bl	8004b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004daa:	2119      	movs	r1, #25
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f991 	bl	80050d4 <SDMMC_GetCmdResp1>
 8004db2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004db4:	69fb      	ldr	r3, [r7, #28]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3720      	adds	r7, #32
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b088      	sub	sp, #32
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004dcc:	230c      	movs	r3, #12
 8004dce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dd0:	2340      	movs	r3, #64	; 0x40
 8004dd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ddc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dde:	f107 0308 	add.w	r3, r7, #8
 8004de2:	4619      	mov	r1, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff feca 	bl	8004b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004dea:	4a05      	ldr	r2, [pc, #20]	; (8004e00 <SDMMC_CmdStopTransfer+0x40>)
 8004dec:	210c      	movs	r1, #12
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f970 	bl	80050d4 <SDMMC_GetCmdResp1>
 8004df4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004df6:	69fb      	ldr	r3, [r7, #28]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3720      	adds	r7, #32
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	05f5e100 	.word	0x05f5e100

08004e04 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	; 0x28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004e14:	2307      	movs	r3, #7
 8004e16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e18:	2340      	movs	r3, #64	; 0x40
 8004e1a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e24:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e26:	f107 0310 	add.w	r3, r7, #16
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f7ff fea6 	bl	8004b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e36:	2107      	movs	r1, #7
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f94b 	bl	80050d4 <SDMMC_GetCmdResp1>
 8004e3e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3728      	adds	r7, #40	; 0x28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b088      	sub	sp, #32
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e68:	f107 0308 	add.w	r3, r7, #8
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff fe85 	bl	8004b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fb65 	bl	8005544 <SDMMC_GetCmdError>
 8004e7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e7c:	69fb      	ldr	r3, [r7, #28]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b088      	sub	sp, #32
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004e8e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004e92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004e94:	2308      	movs	r3, #8
 8004e96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e98:	2340      	movs	r3, #64	; 0x40
 8004e9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ea4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ea6:	f107 0308 	add.w	r3, r7, #8
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff fe66 	bl	8004b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 faf8 	bl	80054a8 <SDMMC_GetCmdResp7>
 8004eb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004eba:	69fb      	ldr	r3, [r7, #28]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004ed2:	2337      	movs	r3, #55	; 0x37
 8004ed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ed6:	2340      	movs	r3, #64	; 0x40
 8004ed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ee2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ee4:	f107 0308 	add.w	r3, r7, #8
 8004ee8:	4619      	mov	r1, r3
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff fe47 	bl	8004b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef4:	2137      	movs	r1, #55	; 0x37
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f8ec 	bl	80050d4 <SDMMC_GetCmdResp1>
 8004efc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004efe:	69fb      	ldr	r3, [r7, #28]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3720      	adds	r7, #32
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004f1e:	2329      	movs	r3, #41	; 0x29
 8004f20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f22:	2340      	movs	r3, #64	; 0x40
 8004f24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f30:	f107 0308 	add.w	r3, r7, #8
 8004f34:	4619      	mov	r1, r3
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff fe21 	bl	8004b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f9ff 	bl	8005340 <SDMMC_GetCmdResp3>
 8004f42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f44:	69fb      	ldr	r3, [r7, #28]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3720      	adds	r7, #32
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b088      	sub	sp, #32
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004f5c:	2306      	movs	r3, #6
 8004f5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f60:	2340      	movs	r3, #64	; 0x40
 8004f62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f6e:	f107 0308 	add.w	r3, r7, #8
 8004f72:	4619      	mov	r1, r3
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff fe02 	bl	8004b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f7e:	2106      	movs	r1, #6
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f8a7 	bl	80050d4 <SDMMC_GetCmdResp1>
 8004f86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f88:	69fb      	ldr	r3, [r7, #28]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3720      	adds	r7, #32
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b088      	sub	sp, #32
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004f9e:	2333      	movs	r3, #51	; 0x33
 8004fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fa2:	2340      	movs	r3, #64	; 0x40
 8004fa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fb0:	f107 0308 	add.w	r3, r7, #8
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff fde1 	bl	8004b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc0:	2133      	movs	r1, #51	; 0x33
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f886 	bl	80050d4 <SDMMC_GetCmdResp1>
 8004fc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fca:	69fb      	ldr	r3, [r7, #28]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3720      	adds	r7, #32
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004fe4:	23c0      	movs	r3, #192	; 0xc0
 8004fe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ff0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ff2:	f107 0308 	add.w	r3, r7, #8
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff fdc0 	bl	8004b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f956 	bl	80052b0 <SDMMC_GetCmdResp2>
 8005004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005006:	69fb      	ldr	r3, [r7, #28]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3720      	adds	r7, #32
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800501e:	2309      	movs	r3, #9
 8005020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005022:	23c0      	movs	r3, #192	; 0xc0
 8005024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800502a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800502e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005030:	f107 0308 	add.w	r3, r7, #8
 8005034:	4619      	mov	r1, r3
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fda1 	bl	8004b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f937 	bl	80052b0 <SDMMC_GetCmdResp2>
 8005042:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005044:	69fb      	ldr	r3, [r7, #28]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3720      	adds	r7, #32
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b088      	sub	sp, #32
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800505c:	2303      	movs	r3, #3
 800505e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005060:	2340      	movs	r3, #64	; 0x40
 8005062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800506c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800506e:	f107 0308 	add.w	r3, r7, #8
 8005072:	4619      	mov	r1, r3
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff fd82 	bl	8004b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	2103      	movs	r1, #3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f99c 	bl	80053bc <SDMMC_GetCmdResp6>
 8005084:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005086:	69fb      	ldr	r3, [r7, #28]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3720      	adds	r7, #32
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800509e:	230d      	movs	r3, #13
 80050a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050a2:	2340      	movs	r3, #64	; 0x40
 80050a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050b0:	f107 0308 	add.w	r3, r7, #8
 80050b4:	4619      	mov	r1, r3
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff fd61 	bl	8004b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80050bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c0:	210d      	movs	r1, #13
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f806 	bl	80050d4 <SDMMC_GetCmdResp1>
 80050c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050ca:	69fb      	ldr	r3, [r7, #28]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	460b      	mov	r3, r1
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80050e2:	4b70      	ldr	r3, [pc, #448]	; (80052a4 <SDMMC_GetCmdResp1+0x1d0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a70      	ldr	r2, [pc, #448]	; (80052a8 <SDMMC_GetCmdResp1+0x1d4>)
 80050e8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ec:	0a5a      	lsrs	r2, r3, #9
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	fb02 f303 	mul.w	r3, r2, r3
 80050f4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	1e5a      	subs	r2, r3, #1
 80050fa:	61fa      	str	r2, [r7, #28]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d102      	bne.n	8005106 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005100:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005104:	e0c9      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0ef      	beq.n	80050f6 <SDMMC_GetCmdResp1+0x22>
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1ea      	bne.n	80050f6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d004      	beq.n	8005136 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2204      	movs	r2, #4
 8005130:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005132:	2304      	movs	r3, #4
 8005134:	e0b1      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d004      	beq.n	800514c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005148:	2301      	movs	r3, #1
 800514a:	e0a6      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	22c5      	movs	r2, #197	; 0xc5
 8005150:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f7ff fd3d 	bl	8004bd2 <SDIO_GetCommandResponse>
 8005158:	4603      	mov	r3, r0
 800515a:	461a      	mov	r2, r3
 800515c:	7afb      	ldrb	r3, [r7, #11]
 800515e:	4293      	cmp	r3, r2
 8005160:	d001      	beq.n	8005166 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005162:	2301      	movs	r3, #1
 8005164:	e099      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005166:	2100      	movs	r1, #0
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f7ff fd3f 	bl	8004bec <SDIO_GetResponse>
 800516e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4b4e      	ldr	r3, [pc, #312]	; (80052ac <SDMMC_GetCmdResp1+0x1d8>)
 8005174:	4013      	ands	r3, r2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800517a:	2300      	movs	r3, #0
 800517c:	e08d      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b00      	cmp	r3, #0
 8005182:	da02      	bge.n	800518a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005184:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005188:	e087      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005194:	2340      	movs	r3, #64	; 0x40
 8005196:	e080      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80051a2:	2380      	movs	r3, #128	; 0x80
 80051a4:	e079      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80051b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051b4:	e071      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80051c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051c4:	e069      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80051d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051d4:	e061      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80051e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051e4:	e059      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80051f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051f4:	e051      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005204:	e049      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005210:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005214:	e041      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005224:	e039      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005234:	e031      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005240:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005244:	e029      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005250:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005254:	e021      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005260:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005264:	e019      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005270:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005274:	e011      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005280:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005284:	e009      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f003 0308 	and.w	r3, r3, #8
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005290:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005294:	e001      	b.n	800529a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800529a:	4618      	mov	r0, r3
 800529c:	3720      	adds	r7, #32
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20000000 	.word	0x20000000
 80052a8:	10624dd3 	.word	0x10624dd3
 80052ac:	fdffe008 	.word	0xfdffe008

080052b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80052b8:	4b1f      	ldr	r3, [pc, #124]	; (8005338 <SDMMC_GetCmdResp2+0x88>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1f      	ldr	r2, [pc, #124]	; (800533c <SDMMC_GetCmdResp2+0x8c>)
 80052be:	fba2 2303 	umull	r2, r3, r2, r3
 80052c2:	0a5b      	lsrs	r3, r3, #9
 80052c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c8:	fb02 f303 	mul.w	r3, r2, r3
 80052cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1e5a      	subs	r2, r3, #1
 80052d2:	60fa      	str	r2, [r7, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d102      	bne.n	80052de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052dc:	e026      	b.n	800532c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0ef      	beq.n	80052ce <SDMMC_GetCmdResp2+0x1e>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1ea      	bne.n	80052ce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d004      	beq.n	800530e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2204      	movs	r2, #4
 8005308:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800530a:	2304      	movs	r3, #4
 800530c:	e00e      	b.n	800532c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005320:	2301      	movs	r3, #1
 8005322:	e003      	b.n	800532c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	22c5      	movs	r2, #197	; 0xc5
 8005328:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	20000000 	.word	0x20000000
 800533c:	10624dd3 	.word	0x10624dd3

08005340 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005348:	4b1a      	ldr	r3, [pc, #104]	; (80053b4 <SDMMC_GetCmdResp3+0x74>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1a      	ldr	r2, [pc, #104]	; (80053b8 <SDMMC_GetCmdResp3+0x78>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	0a5b      	lsrs	r3, r3, #9
 8005354:	f241 3288 	movw	r2, #5000	; 0x1388
 8005358:	fb02 f303 	mul.w	r3, r2, r3
 800535c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1e5a      	subs	r2, r3, #1
 8005362:	60fa      	str	r2, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d102      	bne.n	800536e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005368:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800536c:	e01b      	b.n	80053a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005372:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0ef      	beq.n	800535e <SDMMC_GetCmdResp3+0x1e>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1ea      	bne.n	800535e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2204      	movs	r2, #4
 8005398:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800539a:	2304      	movs	r3, #4
 800539c:	e003      	b.n	80053a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	22c5      	movs	r2, #197	; 0xc5
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20000000 	.word	0x20000000
 80053b8:	10624dd3 	.word	0x10624dd3

080053bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	460b      	mov	r3, r1
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80053ca:	4b35      	ldr	r3, [pc, #212]	; (80054a0 <SDMMC_GetCmdResp6+0xe4>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a35      	ldr	r2, [pc, #212]	; (80054a4 <SDMMC_GetCmdResp6+0xe8>)
 80053d0:	fba2 2303 	umull	r2, r3, r2, r3
 80053d4:	0a5b      	lsrs	r3, r3, #9
 80053d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053da:	fb02 f303 	mul.w	r3, r2, r3
 80053de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	1e5a      	subs	r2, r3, #1
 80053e4:	61fa      	str	r2, [r7, #28]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d102      	bne.n	80053f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053ee:	e052      	b.n	8005496 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0ef      	beq.n	80053e0 <SDMMC_GetCmdResp6+0x24>
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1ea      	bne.n	80053e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	d004      	beq.n	8005420 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2204      	movs	r2, #4
 800541a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800541c:	2304      	movs	r3, #4
 800541e:	e03a      	b.n	8005496 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d004      	beq.n	8005436 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2201      	movs	r2, #1
 8005430:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005432:	2301      	movs	r3, #1
 8005434:	e02f      	b.n	8005496 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7ff fbcb 	bl	8004bd2 <SDIO_GetCommandResponse>
 800543c:	4603      	mov	r3, r0
 800543e:	461a      	mov	r2, r3
 8005440:	7afb      	ldrb	r3, [r7, #11]
 8005442:	4293      	cmp	r3, r2
 8005444:	d001      	beq.n	800544a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005446:	2301      	movs	r3, #1
 8005448:	e025      	b.n	8005496 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	22c5      	movs	r2, #197	; 0xc5
 800544e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005450:	2100      	movs	r1, #0
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7ff fbca 	bl	8004bec <SDIO_GetResponse>
 8005458:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d106      	bne.n	8005472 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	0c1b      	lsrs	r3, r3, #16
 8005468:	b29a      	uxth	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800546e:	2300      	movs	r3, #0
 8005470:	e011      	b.n	8005496 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800547c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005480:	e009      	b.n	8005496 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800548c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005490:	e001      	b.n	8005496 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005492:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005496:	4618      	mov	r0, r3
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000000 	.word	0x20000000
 80054a4:	10624dd3 	.word	0x10624dd3

080054a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054b0:	4b22      	ldr	r3, [pc, #136]	; (800553c <SDMMC_GetCmdResp7+0x94>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a22      	ldr	r2, [pc, #136]	; (8005540 <SDMMC_GetCmdResp7+0x98>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	0a5b      	lsrs	r3, r3, #9
 80054bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c0:	fb02 f303 	mul.w	r3, r2, r3
 80054c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	1e5a      	subs	r2, r3, #1
 80054ca:	60fa      	str	r2, [r7, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054d4:	e02c      	b.n	8005530 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0ef      	beq.n	80054c6 <SDMMC_GetCmdResp7+0x1e>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1ea      	bne.n	80054c6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d004      	beq.n	8005506 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2204      	movs	r2, #4
 8005500:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005502:	2304      	movs	r3, #4
 8005504:	e014      	b.n	8005530 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d004      	beq.n	800551c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005518:	2301      	movs	r3, #1
 800551a:	e009      	b.n	8005530 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2240      	movs	r2, #64	; 0x40
 800552c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800552e:	2300      	movs	r3, #0
  
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	20000000 	.word	0x20000000
 8005540:	10624dd3 	.word	0x10624dd3

08005544 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800554c:	4b11      	ldr	r3, [pc, #68]	; (8005594 <SDMMC_GetCmdError+0x50>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a11      	ldr	r2, [pc, #68]	; (8005598 <SDMMC_GetCmdError+0x54>)
 8005552:	fba2 2303 	umull	r2, r3, r2, r3
 8005556:	0a5b      	lsrs	r3, r3, #9
 8005558:	f241 3288 	movw	r2, #5000	; 0x1388
 800555c:	fb02 f303 	mul.w	r3, r2, r3
 8005560:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1e5a      	subs	r2, r3, #1
 8005566:	60fa      	str	r2, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d102      	bne.n	8005572 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800556c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005570:	e009      	b.n	8005586 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f1      	beq.n	8005562 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	22c5      	movs	r2, #197	; 0xc5
 8005582:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	20000000 	.word	0x20000000
 8005598:	10624dd3 	.word	0x10624dd3

0800559c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80055a0:	4904      	ldr	r1, [pc, #16]	; (80055b4 <MX_FATFS_Init+0x18>)
 80055a2:	4805      	ldr	r0, [pc, #20]	; (80055b8 <MX_FATFS_Init+0x1c>)
 80055a4:	f000 f9e4 	bl	8005970 <FATFS_LinkDriver>
 80055a8:	4603      	mov	r3, r0
 80055aa:	461a      	mov	r2, r3
 80055ac:	4b03      	ldr	r3, [pc, #12]	; (80055bc <MX_FATFS_Init+0x20>)
 80055ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80055b0:	bf00      	nop
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000188 	.word	0x20000188
 80055b8:	08005cbc 	.word	0x08005cbc
 80055bc:	20000184 	.word	0x20000184

080055c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80055ca:	f000 f879 	bl	80056c0 <BSP_SD_IsDetected>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d001      	beq.n	80055d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e012      	b.n	80055fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80055d8:	480b      	ldr	r0, [pc, #44]	; (8005608 <BSP_SD_Init+0x48>)
 80055da:	f7fd f82b 	bl	8002634 <HAL_SD_Init>
 80055de:	4603      	mov	r3, r0
 80055e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d109      	bne.n	80055fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80055e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055ec:	4806      	ldr	r0, [pc, #24]	; (8005608 <BSP_SD_Init+0x48>)
 80055ee:	f7fd fe05 	bl	80031fc <HAL_SD_ConfigWideBusOperation>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80055fc:	79fb      	ldrb	r3, [r7, #7]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000094 	.word	0x20000094

0800560c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	68f9      	ldr	r1, [r7, #12]
 8005628:	4806      	ldr	r0, [pc, #24]	; (8005644 <BSP_SD_ReadBlocks+0x38>)
 800562a:	f7fd f8b3 	bl	8002794 <HAL_SD_ReadBlocks>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005638:	7dfb      	ldrb	r3, [r7, #23]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20000094 	.word	0x20000094

08005648 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	68f9      	ldr	r1, [r7, #12]
 8005664:	4806      	ldr	r0, [pc, #24]	; (8005680 <BSP_SD_WriteBlocks+0x38>)
 8005666:	f7fd fa73 	bl	8002b50 <HAL_SD_WriteBlocks>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005674:	7dfb      	ldrb	r3, [r7, #23]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000094 	.word	0x20000094

08005684 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005688:	4805      	ldr	r0, [pc, #20]	; (80056a0 <BSP_SD_GetCardState+0x1c>)
 800568a:	f7fd fe51 	bl	8003330 <HAL_SD_GetCardState>
 800568e:	4603      	mov	r3, r0
 8005690:	2b04      	cmp	r3, #4
 8005692:	bf14      	ite	ne
 8005694:	2301      	movne	r3, #1
 8005696:	2300      	moveq	r3, #0
 8005698:	b2db      	uxtb	r3, r3
}
 800569a:	4618      	mov	r0, r3
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20000094 	.word	0x20000094

080056a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	4803      	ldr	r0, [pc, #12]	; (80056bc <BSP_SD_GetCardInfo+0x18>)
 80056b0:	f7fd fd78 	bl	80031a4 <HAL_SD_GetCardInfo>
}
 80056b4:	bf00      	nop
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	20000094 	.word	0x20000094

080056c0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80056c6:	2301      	movs	r3, #1
 80056c8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80056ca:	f000 f80b 	bl	80056e4 <BSP_PlatformIsDetected>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80056d4:	2300      	movs	r3, #0
 80056d6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	b2db      	uxtb	r3, r3
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80056ea:	2301      	movs	r3, #1
 80056ec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80056ee:	2110      	movs	r1, #16
 80056f0:	4806      	ldr	r0, [pc, #24]	; (800570c <BSP_PlatformIsDetected+0x28>)
 80056f2:	f7fc fafb 	bl	8001cec <HAL_GPIO_ReadPin>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80056fc:	2300      	movs	r3, #0
 80056fe:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005700:	79fb      	ldrb	r3, [r7, #7]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	40021000 	.word	0x40021000

08005710 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	4603      	mov	r3, r0
 8005718:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800571a:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <SD_CheckStatus+0x38>)
 800571c:	2201      	movs	r2, #1
 800571e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005720:	f7ff ffb0 	bl	8005684 <BSP_SD_GetCardState>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d107      	bne.n	800573a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800572a:	4b07      	ldr	r3, [pc, #28]	; (8005748 <SD_CheckStatus+0x38>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	b2da      	uxtb	r2, r3
 8005736:	4b04      	ldr	r3, [pc, #16]	; (8005748 <SD_CheckStatus+0x38>)
 8005738:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800573a:	4b03      	ldr	r3, [pc, #12]	; (8005748 <SD_CheckStatus+0x38>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	b2db      	uxtb	r3, r3
}
 8005740:	4618      	mov	r0, r3
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	20000009 	.word	0x20000009

0800574c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	4603      	mov	r3, r0
 8005754:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005756:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <SD_initialize+0x38>)
 8005758:	2201      	movs	r2, #1
 800575a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800575c:	f7ff ff30 	bl	80055c0 <BSP_SD_Init>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d107      	bne.n	8005776 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005766:	79fb      	ldrb	r3, [r7, #7]
 8005768:	4618      	mov	r0, r3
 800576a:	f7ff ffd1 	bl	8005710 <SD_CheckStatus>
 800576e:	4603      	mov	r3, r0
 8005770:	461a      	mov	r2, r3
 8005772:	4b04      	ldr	r3, [pc, #16]	; (8005784 <SD_initialize+0x38>)
 8005774:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005776:	4b03      	ldr	r3, [pc, #12]	; (8005784 <SD_initialize+0x38>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	b2db      	uxtb	r3, r3
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20000009 	.word	0x20000009

08005788 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff ffbb 	bl	8005710 <SD_CheckStatus>
 800579a:	4603      	mov	r3, r0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	607a      	str	r2, [r7, #4]
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	4603      	mov	r3, r0
 80057b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80057b8:	f04f 33ff 	mov.w	r3, #4294967295
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	68b8      	ldr	r0, [r7, #8]
 80057c2:	f7ff ff23 	bl	800560c <BSP_SD_ReadBlocks>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d107      	bne.n	80057dc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80057cc:	bf00      	nop
 80057ce:	f7ff ff59 	bl	8005684 <BSP_SD_GetCardState>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1fa      	bne.n	80057ce <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80057d8:	2300      	movs	r3, #0
 80057da:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80057dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b086      	sub	sp, #24
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
 80057f2:	4603      	mov	r3, r0
 80057f4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80057fa:	f04f 33ff 	mov.w	r3, #4294967295
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	68b8      	ldr	r0, [r7, #8]
 8005804:	f7ff ff20 	bl	8005648 <BSP_SD_WriteBlocks>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d107      	bne.n	800581e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800580e:	bf00      	nop
 8005810:	f7ff ff38 	bl	8005684 <BSP_SD_GetCardState>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1fa      	bne.n	8005810 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800581e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b08c      	sub	sp, #48	; 0x30
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	603a      	str	r2, [r7, #0]
 8005832:	71fb      	strb	r3, [r7, #7]
 8005834:	460b      	mov	r3, r1
 8005836:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800583e:	4b25      	ldr	r3, [pc, #148]	; (80058d4 <SD_ioctl+0xac>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <SD_ioctl+0x28>
 800584c:	2303      	movs	r3, #3
 800584e:	e03c      	b.n	80058ca <SD_ioctl+0xa2>

  switch (cmd)
 8005850:	79bb      	ldrb	r3, [r7, #6]
 8005852:	2b03      	cmp	r3, #3
 8005854:	d834      	bhi.n	80058c0 <SD_ioctl+0x98>
 8005856:	a201      	add	r2, pc, #4	; (adr r2, 800585c <SD_ioctl+0x34>)
 8005858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585c:	0800586d 	.word	0x0800586d
 8005860:	08005875 	.word	0x08005875
 8005864:	0800588d 	.word	0x0800588d
 8005868:	080058a7 	.word	0x080058a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005872:	e028      	b.n	80058c6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005874:	f107 030c 	add.w	r3, r7, #12
 8005878:	4618      	mov	r0, r3
 800587a:	f7ff ff13 	bl	80056a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800587e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800588a:	e01c      	b.n	80058c6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800588c:	f107 030c 	add.w	r3, r7, #12
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff ff07 	bl	80056a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005898:	b29a      	uxth	r2, r3
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80058a4:	e00f      	b.n	80058c6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80058a6:	f107 030c 	add.w	r3, r7, #12
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff fefa 	bl	80056a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	0a5a      	lsrs	r2, r3, #9
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80058be:	e002      	b.n	80058c6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80058c0:	2304      	movs	r3, #4
 80058c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80058c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3730      	adds	r7, #48	; 0x30
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	20000009 	.word	0x20000009

080058d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	4613      	mov	r3, r2
 80058e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80058e6:	2301      	movs	r3, #1
 80058e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80058ee:	4b1f      	ldr	r3, [pc, #124]	; (800596c <FATFS_LinkDriverEx+0x94>)
 80058f0:	7a5b      	ldrb	r3, [r3, #9]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d131      	bne.n	800595c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80058f8:	4b1c      	ldr	r3, [pc, #112]	; (800596c <FATFS_LinkDriverEx+0x94>)
 80058fa:	7a5b      	ldrb	r3, [r3, #9]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	461a      	mov	r2, r3
 8005900:	4b1a      	ldr	r3, [pc, #104]	; (800596c <FATFS_LinkDriverEx+0x94>)
 8005902:	2100      	movs	r1, #0
 8005904:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005906:	4b19      	ldr	r3, [pc, #100]	; (800596c <FATFS_LinkDriverEx+0x94>)
 8005908:	7a5b      	ldrb	r3, [r3, #9]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	4a17      	ldr	r2, [pc, #92]	; (800596c <FATFS_LinkDriverEx+0x94>)
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <FATFS_LinkDriverEx+0x94>)
 8005918:	7a5b      	ldrb	r3, [r3, #9]
 800591a:	b2db      	uxtb	r3, r3
 800591c:	461a      	mov	r2, r3
 800591e:	4b13      	ldr	r3, [pc, #76]	; (800596c <FATFS_LinkDriverEx+0x94>)
 8005920:	4413      	add	r3, r2
 8005922:	79fa      	ldrb	r2, [r7, #7]
 8005924:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005926:	4b11      	ldr	r3, [pc, #68]	; (800596c <FATFS_LinkDriverEx+0x94>)
 8005928:	7a5b      	ldrb	r3, [r3, #9]
 800592a:	b2db      	uxtb	r3, r3
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	b2d1      	uxtb	r1, r2
 8005930:	4a0e      	ldr	r2, [pc, #56]	; (800596c <FATFS_LinkDriverEx+0x94>)
 8005932:	7251      	strb	r1, [r2, #9]
 8005934:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005936:	7dbb      	ldrb	r3, [r7, #22]
 8005938:	3330      	adds	r3, #48	; 0x30
 800593a:	b2da      	uxtb	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	3301      	adds	r3, #1
 8005944:	223a      	movs	r2, #58	; 0x3a
 8005946:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	3302      	adds	r3, #2
 800594c:	222f      	movs	r2, #47	; 0x2f
 800594e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	3303      	adds	r3, #3
 8005954:	2200      	movs	r2, #0
 8005956:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800595c:	7dfb      	ldrb	r3, [r7, #23]
}
 800595e:	4618      	mov	r0, r3
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	2000018c 	.word	0x2000018c

08005970 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800597a:	2200      	movs	r2, #0
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff ffaa 	bl	80058d8 <FATFS_LinkDriverEx>
 8005984:	4603      	mov	r3, r0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <__errno>:
 8005990:	4b01      	ldr	r3, [pc, #4]	; (8005998 <__errno+0x8>)
 8005992:	6818      	ldr	r0, [r3, #0]
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	2000000c 	.word	0x2000000c

0800599c <__libc_init_array>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	4d0d      	ldr	r5, [pc, #52]	; (80059d4 <__libc_init_array+0x38>)
 80059a0:	4c0d      	ldr	r4, [pc, #52]	; (80059d8 <__libc_init_array+0x3c>)
 80059a2:	1b64      	subs	r4, r4, r5
 80059a4:	10a4      	asrs	r4, r4, #2
 80059a6:	2600      	movs	r6, #0
 80059a8:	42a6      	cmp	r6, r4
 80059aa:	d109      	bne.n	80059c0 <__libc_init_array+0x24>
 80059ac:	4d0b      	ldr	r5, [pc, #44]	; (80059dc <__libc_init_array+0x40>)
 80059ae:	4c0c      	ldr	r4, [pc, #48]	; (80059e0 <__libc_init_array+0x44>)
 80059b0:	f000 f92e 	bl	8005c10 <_init>
 80059b4:	1b64      	subs	r4, r4, r5
 80059b6:	10a4      	asrs	r4, r4, #2
 80059b8:	2600      	movs	r6, #0
 80059ba:	42a6      	cmp	r6, r4
 80059bc:	d105      	bne.n	80059ca <__libc_init_array+0x2e>
 80059be:	bd70      	pop	{r4, r5, r6, pc}
 80059c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059c4:	4798      	blx	r3
 80059c6:	3601      	adds	r6, #1
 80059c8:	e7ee      	b.n	80059a8 <__libc_init_array+0xc>
 80059ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ce:	4798      	blx	r3
 80059d0:	3601      	adds	r6, #1
 80059d2:	e7f2      	b.n	80059ba <__libc_init_array+0x1e>
 80059d4:	08005cd8 	.word	0x08005cd8
 80059d8:	08005cd8 	.word	0x08005cd8
 80059dc:	08005cd8 	.word	0x08005cd8
 80059e0:	08005cdc 	.word	0x08005cdc

080059e4 <malloc>:
 80059e4:	4b02      	ldr	r3, [pc, #8]	; (80059f0 <malloc+0xc>)
 80059e6:	4601      	mov	r1, r0
 80059e8:	6818      	ldr	r0, [r3, #0]
 80059ea:	f000 b87f 	b.w	8005aec <_malloc_r>
 80059ee:	bf00      	nop
 80059f0:	2000000c 	.word	0x2000000c

080059f4 <free>:
 80059f4:	4b02      	ldr	r3, [pc, #8]	; (8005a00 <free+0xc>)
 80059f6:	4601      	mov	r1, r0
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	f000 b80b 	b.w	8005a14 <_free_r>
 80059fe:	bf00      	nop
 8005a00:	2000000c 	.word	0x2000000c

08005a04 <memset>:
 8005a04:	4402      	add	r2, r0
 8005a06:	4603      	mov	r3, r0
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d100      	bne.n	8005a0e <memset+0xa>
 8005a0c:	4770      	bx	lr
 8005a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a12:	e7f9      	b.n	8005a08 <memset+0x4>

08005a14 <_free_r>:
 8005a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a16:	2900      	cmp	r1, #0
 8005a18:	d044      	beq.n	8005aa4 <_free_r+0x90>
 8005a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a1e:	9001      	str	r0, [sp, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f1a1 0404 	sub.w	r4, r1, #4
 8005a26:	bfb8      	it	lt
 8005a28:	18e4      	addlt	r4, r4, r3
 8005a2a:	f000 f8e3 	bl	8005bf4 <__malloc_lock>
 8005a2e:	4a1e      	ldr	r2, [pc, #120]	; (8005aa8 <_free_r+0x94>)
 8005a30:	9801      	ldr	r0, [sp, #4]
 8005a32:	6813      	ldr	r3, [r2, #0]
 8005a34:	b933      	cbnz	r3, 8005a44 <_free_r+0x30>
 8005a36:	6063      	str	r3, [r4, #4]
 8005a38:	6014      	str	r4, [r2, #0]
 8005a3a:	b003      	add	sp, #12
 8005a3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a40:	f000 b8de 	b.w	8005c00 <__malloc_unlock>
 8005a44:	42a3      	cmp	r3, r4
 8005a46:	d908      	bls.n	8005a5a <_free_r+0x46>
 8005a48:	6825      	ldr	r5, [r4, #0]
 8005a4a:	1961      	adds	r1, r4, r5
 8005a4c:	428b      	cmp	r3, r1
 8005a4e:	bf01      	itttt	eq
 8005a50:	6819      	ldreq	r1, [r3, #0]
 8005a52:	685b      	ldreq	r3, [r3, #4]
 8005a54:	1949      	addeq	r1, r1, r5
 8005a56:	6021      	streq	r1, [r4, #0]
 8005a58:	e7ed      	b.n	8005a36 <_free_r+0x22>
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	b10b      	cbz	r3, 8005a64 <_free_r+0x50>
 8005a60:	42a3      	cmp	r3, r4
 8005a62:	d9fa      	bls.n	8005a5a <_free_r+0x46>
 8005a64:	6811      	ldr	r1, [r2, #0]
 8005a66:	1855      	adds	r5, r2, r1
 8005a68:	42a5      	cmp	r5, r4
 8005a6a:	d10b      	bne.n	8005a84 <_free_r+0x70>
 8005a6c:	6824      	ldr	r4, [r4, #0]
 8005a6e:	4421      	add	r1, r4
 8005a70:	1854      	adds	r4, r2, r1
 8005a72:	42a3      	cmp	r3, r4
 8005a74:	6011      	str	r1, [r2, #0]
 8005a76:	d1e0      	bne.n	8005a3a <_free_r+0x26>
 8005a78:	681c      	ldr	r4, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	6053      	str	r3, [r2, #4]
 8005a7e:	4421      	add	r1, r4
 8005a80:	6011      	str	r1, [r2, #0]
 8005a82:	e7da      	b.n	8005a3a <_free_r+0x26>
 8005a84:	d902      	bls.n	8005a8c <_free_r+0x78>
 8005a86:	230c      	movs	r3, #12
 8005a88:	6003      	str	r3, [r0, #0]
 8005a8a:	e7d6      	b.n	8005a3a <_free_r+0x26>
 8005a8c:	6825      	ldr	r5, [r4, #0]
 8005a8e:	1961      	adds	r1, r4, r5
 8005a90:	428b      	cmp	r3, r1
 8005a92:	bf04      	itt	eq
 8005a94:	6819      	ldreq	r1, [r3, #0]
 8005a96:	685b      	ldreq	r3, [r3, #4]
 8005a98:	6063      	str	r3, [r4, #4]
 8005a9a:	bf04      	itt	eq
 8005a9c:	1949      	addeq	r1, r1, r5
 8005a9e:	6021      	streq	r1, [r4, #0]
 8005aa0:	6054      	str	r4, [r2, #4]
 8005aa2:	e7ca      	b.n	8005a3a <_free_r+0x26>
 8005aa4:	b003      	add	sp, #12
 8005aa6:	bd30      	pop	{r4, r5, pc}
 8005aa8:	20000198 	.word	0x20000198

08005aac <sbrk_aligned>:
 8005aac:	b570      	push	{r4, r5, r6, lr}
 8005aae:	4e0e      	ldr	r6, [pc, #56]	; (8005ae8 <sbrk_aligned+0x3c>)
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	6831      	ldr	r1, [r6, #0]
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	b911      	cbnz	r1, 8005abe <sbrk_aligned+0x12>
 8005ab8:	f000 f88c 	bl	8005bd4 <_sbrk_r>
 8005abc:	6030      	str	r0, [r6, #0]
 8005abe:	4621      	mov	r1, r4
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	f000 f887 	bl	8005bd4 <_sbrk_r>
 8005ac6:	1c43      	adds	r3, r0, #1
 8005ac8:	d00a      	beq.n	8005ae0 <sbrk_aligned+0x34>
 8005aca:	1cc4      	adds	r4, r0, #3
 8005acc:	f024 0403 	bic.w	r4, r4, #3
 8005ad0:	42a0      	cmp	r0, r4
 8005ad2:	d007      	beq.n	8005ae4 <sbrk_aligned+0x38>
 8005ad4:	1a21      	subs	r1, r4, r0
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f000 f87c 	bl	8005bd4 <_sbrk_r>
 8005adc:	3001      	adds	r0, #1
 8005ade:	d101      	bne.n	8005ae4 <sbrk_aligned+0x38>
 8005ae0:	f04f 34ff 	mov.w	r4, #4294967295
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	2000019c 	.word	0x2000019c

08005aec <_malloc_r>:
 8005aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005af0:	1ccd      	adds	r5, r1, #3
 8005af2:	f025 0503 	bic.w	r5, r5, #3
 8005af6:	3508      	adds	r5, #8
 8005af8:	2d0c      	cmp	r5, #12
 8005afa:	bf38      	it	cc
 8005afc:	250c      	movcc	r5, #12
 8005afe:	2d00      	cmp	r5, #0
 8005b00:	4607      	mov	r7, r0
 8005b02:	db01      	blt.n	8005b08 <_malloc_r+0x1c>
 8005b04:	42a9      	cmp	r1, r5
 8005b06:	d905      	bls.n	8005b14 <_malloc_r+0x28>
 8005b08:	230c      	movs	r3, #12
 8005b0a:	603b      	str	r3, [r7, #0]
 8005b0c:	2600      	movs	r6, #0
 8005b0e:	4630      	mov	r0, r6
 8005b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b14:	4e2e      	ldr	r6, [pc, #184]	; (8005bd0 <_malloc_r+0xe4>)
 8005b16:	f000 f86d 	bl	8005bf4 <__malloc_lock>
 8005b1a:	6833      	ldr	r3, [r6, #0]
 8005b1c:	461c      	mov	r4, r3
 8005b1e:	bb34      	cbnz	r4, 8005b6e <_malloc_r+0x82>
 8005b20:	4629      	mov	r1, r5
 8005b22:	4638      	mov	r0, r7
 8005b24:	f7ff ffc2 	bl	8005aac <sbrk_aligned>
 8005b28:	1c43      	adds	r3, r0, #1
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	d14d      	bne.n	8005bca <_malloc_r+0xde>
 8005b2e:	6834      	ldr	r4, [r6, #0]
 8005b30:	4626      	mov	r6, r4
 8005b32:	2e00      	cmp	r6, #0
 8005b34:	d140      	bne.n	8005bb8 <_malloc_r+0xcc>
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	eb04 0803 	add.w	r8, r4, r3
 8005b40:	f000 f848 	bl	8005bd4 <_sbrk_r>
 8005b44:	4580      	cmp	r8, r0
 8005b46:	d13a      	bne.n	8005bbe <_malloc_r+0xd2>
 8005b48:	6821      	ldr	r1, [r4, #0]
 8005b4a:	3503      	adds	r5, #3
 8005b4c:	1a6d      	subs	r5, r5, r1
 8005b4e:	f025 0503 	bic.w	r5, r5, #3
 8005b52:	3508      	adds	r5, #8
 8005b54:	2d0c      	cmp	r5, #12
 8005b56:	bf38      	it	cc
 8005b58:	250c      	movcc	r5, #12
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	4638      	mov	r0, r7
 8005b5e:	f7ff ffa5 	bl	8005aac <sbrk_aligned>
 8005b62:	3001      	adds	r0, #1
 8005b64:	d02b      	beq.n	8005bbe <_malloc_r+0xd2>
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	442b      	add	r3, r5
 8005b6a:	6023      	str	r3, [r4, #0]
 8005b6c:	e00e      	b.n	8005b8c <_malloc_r+0xa0>
 8005b6e:	6822      	ldr	r2, [r4, #0]
 8005b70:	1b52      	subs	r2, r2, r5
 8005b72:	d41e      	bmi.n	8005bb2 <_malloc_r+0xc6>
 8005b74:	2a0b      	cmp	r2, #11
 8005b76:	d916      	bls.n	8005ba6 <_malloc_r+0xba>
 8005b78:	1961      	adds	r1, r4, r5
 8005b7a:	42a3      	cmp	r3, r4
 8005b7c:	6025      	str	r5, [r4, #0]
 8005b7e:	bf18      	it	ne
 8005b80:	6059      	strne	r1, [r3, #4]
 8005b82:	6863      	ldr	r3, [r4, #4]
 8005b84:	bf08      	it	eq
 8005b86:	6031      	streq	r1, [r6, #0]
 8005b88:	5162      	str	r2, [r4, r5]
 8005b8a:	604b      	str	r3, [r1, #4]
 8005b8c:	4638      	mov	r0, r7
 8005b8e:	f104 060b 	add.w	r6, r4, #11
 8005b92:	f000 f835 	bl	8005c00 <__malloc_unlock>
 8005b96:	f026 0607 	bic.w	r6, r6, #7
 8005b9a:	1d23      	adds	r3, r4, #4
 8005b9c:	1af2      	subs	r2, r6, r3
 8005b9e:	d0b6      	beq.n	8005b0e <_malloc_r+0x22>
 8005ba0:	1b9b      	subs	r3, r3, r6
 8005ba2:	50a3      	str	r3, [r4, r2]
 8005ba4:	e7b3      	b.n	8005b0e <_malloc_r+0x22>
 8005ba6:	6862      	ldr	r2, [r4, #4]
 8005ba8:	42a3      	cmp	r3, r4
 8005baa:	bf0c      	ite	eq
 8005bac:	6032      	streq	r2, [r6, #0]
 8005bae:	605a      	strne	r2, [r3, #4]
 8005bb0:	e7ec      	b.n	8005b8c <_malloc_r+0xa0>
 8005bb2:	4623      	mov	r3, r4
 8005bb4:	6864      	ldr	r4, [r4, #4]
 8005bb6:	e7b2      	b.n	8005b1e <_malloc_r+0x32>
 8005bb8:	4634      	mov	r4, r6
 8005bba:	6876      	ldr	r6, [r6, #4]
 8005bbc:	e7b9      	b.n	8005b32 <_malloc_r+0x46>
 8005bbe:	230c      	movs	r3, #12
 8005bc0:	603b      	str	r3, [r7, #0]
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	f000 f81c 	bl	8005c00 <__malloc_unlock>
 8005bc8:	e7a1      	b.n	8005b0e <_malloc_r+0x22>
 8005bca:	6025      	str	r5, [r4, #0]
 8005bcc:	e7de      	b.n	8005b8c <_malloc_r+0xa0>
 8005bce:	bf00      	nop
 8005bd0:	20000198 	.word	0x20000198

08005bd4 <_sbrk_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4d06      	ldr	r5, [pc, #24]	; (8005bf0 <_sbrk_r+0x1c>)
 8005bd8:	2300      	movs	r3, #0
 8005bda:	4604      	mov	r4, r0
 8005bdc:	4608      	mov	r0, r1
 8005bde:	602b      	str	r3, [r5, #0]
 8005be0:	f7fb fa24 	bl	800102c <_sbrk>
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	d102      	bne.n	8005bee <_sbrk_r+0x1a>
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	b103      	cbz	r3, 8005bee <_sbrk_r+0x1a>
 8005bec:	6023      	str	r3, [r4, #0]
 8005bee:	bd38      	pop	{r3, r4, r5, pc}
 8005bf0:	200001a0 	.word	0x200001a0

08005bf4 <__malloc_lock>:
 8005bf4:	4801      	ldr	r0, [pc, #4]	; (8005bfc <__malloc_lock+0x8>)
 8005bf6:	f000 b809 	b.w	8005c0c <__retarget_lock_acquire_recursive>
 8005bfa:	bf00      	nop
 8005bfc:	200001a4 	.word	0x200001a4

08005c00 <__malloc_unlock>:
 8005c00:	4801      	ldr	r0, [pc, #4]	; (8005c08 <__malloc_unlock+0x8>)
 8005c02:	f000 b804 	b.w	8005c0e <__retarget_lock_release_recursive>
 8005c06:	bf00      	nop
 8005c08:	200001a4 	.word	0x200001a4

08005c0c <__retarget_lock_acquire_recursive>:
 8005c0c:	4770      	bx	lr

08005c0e <__retarget_lock_release_recursive>:
 8005c0e:	4770      	bx	lr

08005c10 <_init>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	bf00      	nop
 8005c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c16:	bc08      	pop	{r3}
 8005c18:	469e      	mov	lr, r3
 8005c1a:	4770      	bx	lr

08005c1c <_fini>:
 8005c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1e:	bf00      	nop
 8005c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c22:	bc08      	pop	{r3}
 8005c24:	469e      	mov	lr, r3
 8005c26:	4770      	bx	lr
