
STM32_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003794  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039a8  080039a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080039a8  080039a8  000139a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039b0  080039b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039b0  080039b0  000139b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039b4  080039b4  000139b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080039b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000a0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000110  20000110  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a6d2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fd3  00000000  00000000  0002a772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000898  00000000  00000000  0002c748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000830  00000000  00000000  0002cfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021469  00000000  00000000  0002d810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b650  00000000  00000000  0004ec79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3702  00000000  00000000  0005a2c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011d9cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000237c  00000000  00000000  0011da1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003904 	.word	0x08003904

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003904 	.word	0x08003904

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <bootloader_init>:
uint16_t _gen_crc16(const uint8_t* , uint32_t );
inline static uint8_t _checkPacket(uint8_t* packet, uint8_t expectedPacket[4],  uint8_t significance);

/* Functions implementation --------------------------------------------------*/
void bootloader_init()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0
	_bootloader_configMemory_initShadow(); // Init. shadow copy of config. memory
 80004d2:	f000 f8ab 	bl	800062c <_bootloader_configMemory_initShadow>
	uint32_t curr_SW_MAJOR = _bootloader_configMemory_getParameter(CONFIG_MEMORY_SW_MAJOR); 
 80004d6:	2000      	movs	r0, #0
 80004d8:	f000 f912 	bl	8000700 <_bootloader_configMemory_getParameter>
 80004dc:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t curr_SW_MINOR = _bootloader_configMemory_getParameter(CONFIG_MEMORY_SW_MINOR); 
 80004de:	2004      	movs	r0, #4
 80004e0:	f000 f90e 	bl	8000700 <_bootloader_configMemory_getParameter>
 80004e4:	62b8      	str	r0, [r7, #40]	; 0x28

	// 0_ Unlock memory + clear error flags 
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 80004e6:	4b4a      	ldr	r3, [pc, #296]	; (8000610 <bootloader_init+0x144>)
 80004e8:	22b3      	movs	r2, #179	; 0xb3
 80004ea:	60da      	str	r2, [r3, #12]
	if(HAL_FLASH_Unlock() != HAL_OK) goto FLASH_ERROR; // Error in step 'a'
 80004ec:	f001 f842 	bl	8001574 <HAL_FLASH_Unlock>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d163      	bne.n	80005be <bootloader_init+0xf2>

	// 1_(0x80) Try to open communication with OTA serial interface 
	COMM_UART_SendData((uint8_t[4]) {0x80,0xFF,0xFF,0xFF}, 4, SERIAL_TIMEOUT_TX);
 80004f6:	4b47      	ldr	r3, [pc, #284]	; (8000614 <bootloader_init+0x148>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	f107 0318 	add.w	r3, r7, #24
 8000500:	2214      	movs	r2, #20
 8000502:	2104      	movs	r1, #4
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fb53 	bl	8000bb0 <COMM_UART_SendData>
	
	// 2_(0xC0) Check if MCU answered via OTA serial interface 
	if(COMM_UART_ReceiveData(rx, 4, SERIAL_TIMEOUT_RX)!= HAL_OK) goto JUMP_TO_APPLICATION;
 800050a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800050e:	2104      	movs	r1, #4
 8000510:	4841      	ldr	r0, [pc, #260]	; (8000618 <bootloader_init+0x14c>)
 8000512:	f000 fb35 	bl	8000b80 <COMM_UART_ReceiveData>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d161      	bne.n	80005e0 <bootloader_init+0x114>
	if(_checkPacket(rx, (uint8_t[4]){0xC0,0xFF,0xFF,0xFF}, (uint8_t) 0b1000))
 800051c:	4b3f      	ldr	r3, [pc, #252]	; (800061c <bootloader_init+0x150>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	f107 0310 	add.w	r3, r7, #16
 8000526:	2208      	movs	r2, #8
 8000528:	4619      	mov	r1, r3
 800052a:	483b      	ldr	r0, [pc, #236]	; (8000618 <bootloader_init+0x14c>)
 800052c:	f000 fad0 	bl	8000ad0 <_checkPacket>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d055      	beq.n	80005e2 <bootloader_init+0x116>
	{
		// Check if the SW to be flashed is a different version from current MCU image
		if(REPEATED_FLASH || !_checkPacket(rx, (uint8_t[4]){0xFF, (uint8_t)curr_SW_MAJOR, (uint8_t)curr_SW_MINOR, 0xFF}, (uint8_t) 0b0110))
		{
			// --------------- a_(0x81) Erase memory dedicated to appl. sw + inform serial interface  ---------------
			if(!_bootloader_appMemory_eraseSectors()) goto FLASH_ERROR; // Error in step 'b'
 8000536:	f000 f90f 	bl	8000758 <_bootloader_appMemory_eraseSectors>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d040      	beq.n	80005c2 <bootloader_init+0xf6>

			// --------------- b_(0x82) Send to serial interface -> ready to receive 'nOfPackets' of data  ---------------
			uint32_t nOfPackets = _bootloader_appMemory_acknowledgePackets();
 8000540:	f000 f952 	bl	80007e8 <_bootloader_appMemory_acknowledgePackets>
 8000544:	6278      	str	r0, [r7, #36]	; 0x24
			if(nOfPackets == 0) goto FLASH_ERROR; // Error in step 'c'
 8000546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000548:	2b00      	cmp	r3, #0
 800054a:	d03c      	beq.n	80005c6 <bootloader_init+0xfa>

			// --------------- c_Start receiving data + flashing MCU sectors (dummy flashing) ---------------
			uint32_t nOfFlashed = _bootloader_appMemory_receiveAndFlash(nOfPackets);
 800054c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800054e:	f000 f997 	bl	8000880 <_bootloader_appMemory_receiveAndFlash>
 8000552:	6238      	str	r0, [r7, #32]

			// --------------- d_Update config. memory area (shadow copy) ---------------
			_bootloader_configMemory_setParameter(CONFIG_MEMORY_SW_MAJOR, (uint32_t) *(uint32_t*)(sectorAddr[APP_MEMORY_SECINI] + APP_MEMORY_SW_MAJOR));
 8000554:	4b32      	ldr	r3, [pc, #200]	; (8000620 <bootloader_init+0x154>)
 8000556:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4619      	mov	r1, r3
 800055e:	2000      	movs	r0, #0
 8000560:	f000 f8e0 	bl	8000724 <_bootloader_configMemory_setParameter>
			_bootloader_configMemory_setParameter(CONFIG_MEMORY_SW_MINOR, (uint32_t) *(uint32_t*)(sectorAddr[APP_MEMORY_SECINI] + APP_MEMORY_SW_MINOR));
 8000564:	4b2e      	ldr	r3, [pc, #184]	; (8000620 <bootloader_init+0x154>)
 8000566:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	2004      	movs	r0, #4
 8000570:	f000 f8d8 	bl	8000724 <_bootloader_configMemory_setParameter>

			// --------------- e_Transmit feedback about flash process ---------------
			HAL_Delay(50); // Wait last transmission
 8000574:	2032      	movs	r0, #50	; 0x32
 8000576:	f000 fdc7 	bl	8001108 <HAL_Delay>
			if(nOfFlashed == nOfPackets)
 800057a:	6a3a      	ldr	r2, [r7, #32]
 800057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057e:	429a      	cmp	r2, r3
 8000580:	d123      	bne.n	80005ca <bootloader_init+0xfe>
			{
    			// Calculate CRC + send transmission complete feedback
				uint16_t crc16 = _gen_crc16((uint8_t*) sectorAddr[APP_MEMORY_SECINI], (uint32_t)nOfPackets*4);
 8000582:	4b27      	ldr	r3, [pc, #156]	; (8000620 <bootloader_init+0x154>)
 8000584:	461a      	mov	r2, r3
 8000586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4619      	mov	r1, r3
 800058c:	4610      	mov	r0, r2
 800058e:	f000 fa4d 	bl	8000a2c <_gen_crc16>
 8000592:	4603      	mov	r3, r0
 8000594:	83fb      	strh	r3, [r7, #30]
				COMM_UART_SendData((uint8_t[4]) {0x84,
 8000596:	2384      	movs	r3, #132	; 0x84
 8000598:	723b      	strb	r3, [r7, #8]
 800059a:	2300      	movs	r3, #0
 800059c:	727b      	strb	r3, [r7, #9]
 800059e:	8bfb      	ldrh	r3, [r7, #30]
 80005a0:	0a1b      	lsrs	r3, r3, #8
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	72bb      	strb	r3, [r7, #10]
 80005a8:	8bfb      	ldrh	r3, [r7, #30]
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	72fb      	strb	r3, [r7, #11]
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	2214      	movs	r2, #20
 80005b4:	2104      	movs	r1, #4
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fafa 	bl	8000bb0 <COMM_UART_SendData>
 80005bc:	e011      	b.n	80005e2 <bootloader_init+0x116>
	if(HAL_FLASH_Unlock() != HAL_OK) goto FLASH_ERROR; // Error in step 'a'
 80005be:	bf00      	nop
 80005c0:	e004      	b.n	80005cc <bootloader_init+0x100>
			if(!_bootloader_appMemory_eraseSectors()) goto FLASH_ERROR; // Error in step 'b'
 80005c2:	bf00      	nop
 80005c4:	e002      	b.n	80005cc <bootloader_init+0x100>
			if(nOfPackets == 0) goto FLASH_ERROR; // Error in step 'c'
 80005c6:	bf00      	nop
 80005c8:	e000      	b.n	80005cc <bootloader_init+0x100>
												 (crc16 >> 0) & 0xFF},
												 4, SERIAL_TIMEOUT_TX); // OK
			}
			else
			{
				FLASH_ERROR:
 80005ca:	bf00      	nop
				COMM_UART_SendData((uint8_t[4]) {0x8F, 0xFF, 0xFF, 0xFF}, 4, SERIAL_TIMEOUT_TX); // NOK
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <bootloader_init+0x158>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2214      	movs	r2, #20
 80005d6:	2104      	movs	r1, #4
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fae9 	bl	8000bb0 <COMM_UART_SendData>
 80005de:	e000      	b.n	80005e2 <bootloader_init+0x116>
	if(COMM_UART_ReceiveData(rx, 4, SERIAL_TIMEOUT_RX)!= HAL_OK) goto JUMP_TO_APPLICATION;
 80005e0:	bf00      	nop
			COMM_UART_SendData((uint8_t[4]) {0x8E,0xFF,0xFF,0xFF}, 4, SERIAL_TIMEOUT_TX);
		}
	}
	
	JUMP_TO_APPLICATION:
	_bootloader_configMemory_deinitShadow();
 80005e2:	f000 f84b 	bl	800067c <_bootloader_configMemory_deinitShadow>
	HAL_FLASH_Lock();
 80005e6:	f000 ffe7 	bl	80015b8 <HAL_FLASH_Lock>

	// 3_(0x85) Jump to application
	HAL_Delay(50); // Wait last transmission
 80005ea:	2032      	movs	r0, #50	; 0x32
 80005ec:	f000 fd8c 	bl	8001108 <HAL_Delay>
	COMM_UART_SendData((uint8_t[4]){0x85,0xFF,0xFF,0xFF}, 4, SERIAL_TIMEOUT_TX);
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <bootloader_init+0x15c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2214      	movs	r2, #20
 80005fc:	2104      	movs	r1, #4
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fad6 	bl	8000bb0 <COMM_UART_SendData>
	_bootloader_appMemory_loadApplication(); // Load application file
 8000604:	f000 f9c8 	bl	8000998 <_bootloader_appMemory_loadApplication>
}
 8000608:	bf00      	nop
 800060a:	3730      	adds	r7, #48	; 0x30
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40023c00 	.word	0x40023c00
 8000614:	0800391c 	.word	0x0800391c
 8000618:	2000008c 	.word	0x2000008c
 800061c:	08003920 	.word	0x08003920
 8000620:	08040000 	.word	0x08040000
 8000624:	08003924 	.word	0x08003924
 8000628:	08003928 	.word	0x08003928

0800062c <_bootloader_configMemory_initShadow>:

// ********** SW Config management methods **********

// Create a shadow of the Flash memory (SW configuration sector) in the heap for faster access and manipulation
inline static uint32_t* _bootloader_configMemory_initShadow()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
	// Allocate shadow memory
	swConfigShadow =(uint32_t) malloc(CONFIG_MEMORY_USED_SIZE);
 8000632:	2008      	movs	r0, #8
 8000634:	f003 f850 	bl	80036d8 <malloc>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <_bootloader_configMemory_initShadow+0x48>)
 800063e:	601a      	str	r2, [r3, #0]
	
	// Create shadow copy of parameters
	for(uint32_t idx=0; idx < CONFIG_MEMORY_USED_SIZE; idx+=0x04)
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	e00d      	b.n	8000662 <_bootloader_configMemory_initShadow+0x36>
	{
		*(uint32_t*)(swConfigShadow + idx) = (uint32_t) *(uint32_t*)(sectorAddr[CONFIG_MEMORY_SECINI] + idx);
 8000646:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <_bootloader_configMemory_initShadow+0x4c>)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	4619      	mov	r1, r3
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <_bootloader_configMemory_initShadow+0x48>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	461a      	mov	r2, r3
 8000658:	680b      	ldr	r3, [r1, #0]
 800065a:	6013      	str	r3, [r2, #0]
	for(uint32_t idx=0; idx < CONFIG_MEMORY_USED_SIZE; idx+=0x04)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3304      	adds	r3, #4
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b07      	cmp	r3, #7
 8000666:	d9ee      	bls.n	8000646 <_bootloader_configMemory_initShadow+0x1a>
	}
	return (uint32_t*)swConfigShadow;
 8000668:	4b02      	ldr	r3, [pc, #8]	; (8000674 <_bootloader_configMemory_initShadow+0x48>)
 800066a:	681b      	ldr	r3, [r3, #0]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000090 	.word	0x20000090
 8000678:	08008000 	.word	0x08008000

0800067c <_bootloader_configMemory_deinitShadow>:

inline static uint8_t _bootloader_configMemory_deinitShadow()
{
 800067c:	b5b0      	push	{r4, r5, r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus;

	// Erase config. memory sectors
	for(uint8_t idxS=CONFIG_MEMORY_SECINI; idxS <= CONFIG_MEMORY_SECFIN; idxS++ )
 8000682:	2302      	movs	r3, #2
 8000684:	73fb      	strb	r3, [r7, #15]
 8000686:	e007      	b.n	8000698 <_bootloader_configMemory_deinitShadow+0x1c>
	{
		FLASH_Erase_Sector(idxS,FLASH_VOLTAGE_RANGE_3);
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	2102      	movs	r1, #2
 800068c:	4618      	mov	r0, r3
 800068e:	f001 f8d3 	bl	8001838 <FLASH_Erase_Sector>
	for(uint8_t idxS=CONFIG_MEMORY_SECINI; idxS <= CONFIG_MEMORY_SECFIN; idxS++ )
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	3301      	adds	r3, #1
 8000696:	73fb      	strb	r3, [r7, #15]
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	2b02      	cmp	r3, #2
 800069c:	d9f4      	bls.n	8000688 <_bootloader_configMemory_deinitShadow+0xc>
	}

	// Write config. memory sectors with shadow copy
	for(uint32_t idx=0; idx < CONFIG_MEMORY_USED_SIZE; idx+=0x04)
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	e019      	b.n	80006d8 <_bootloader_configMemory_deinitShadow+0x5c>
	{
		halStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
			sectorAddr[CONFIG_MEMORY_SECINI] + idx, 
 80006a4:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <_bootloader_configMemory_deinitShadow+0x7c>)
		halStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	18d1      	adds	r1, r2, r3
			(uint64_t) *(uint32_t*)(swConfigShadow + idx));
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <_bootloader_configMemory_deinitShadow+0x80>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	4413      	add	r3, r2
 80006b2:	681b      	ldr	r3, [r3, #0]
		halStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80006b4:	2200      	movs	r2, #0
 80006b6:	461c      	mov	r4, r3
 80006b8:	4615      	mov	r5, r2
 80006ba:	4622      	mov	r2, r4
 80006bc:	462b      	mov	r3, r5
 80006be:	2002      	movs	r0, #2
 80006c0:	f000 ff04 	bl	80014cc <HAL_FLASH_Program>
 80006c4:	4603      	mov	r3, r0
 80006c6:	71fb      	strb	r3, [r7, #7]

		if(halStatus != HAL_OK) return 0;
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <_bootloader_configMemory_deinitShadow+0x56>
 80006ce:	2300      	movs	r3, #0
 80006d0:	e00e      	b.n	80006f0 <_bootloader_configMemory_deinitShadow+0x74>
	for(uint32_t idx=0; idx < CONFIG_MEMORY_USED_SIZE; idx+=0x04)
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	3304      	adds	r3, #4
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	2b07      	cmp	r3, #7
 80006dc:	d9e2      	bls.n	80006a4 <_bootloader_configMemory_deinitShadow+0x28>
	}
	free((uint32_t*)swConfigShadow);
 80006de:	4b07      	ldr	r3, [pc, #28]	; (80006fc <_bootloader_configMemory_deinitShadow+0x80>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 f800 	bl	80036e8 <free>
	swConfigShadow = (uint32_t) NULL;
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <_bootloader_configMemory_deinitShadow+0x80>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
	return 1;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bdb0      	pop	{r4, r5, r7, pc}
 80006f8:	08008000 	.word	0x08008000
 80006fc:	20000090 	.word	0x20000090

08000700 <_bootloader_configMemory_getParameter>:

inline static uint32_t _bootloader_configMemory_getParameter(uint32_t memOffset)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	return (uint32_t) *(uint32_t*)(swConfigShadow + memOffset);
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <_bootloader_configMemory_getParameter+0x20>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4413      	add	r3, r2
 8000710:	681b      	ldr	r3, [r3, #0]
}
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000090 	.word	0x20000090

08000724 <_bootloader_configMemory_setParameter>:

inline static uint32_t _bootloader_configMemory_setParameter(uint32_t memOffset, uint32_t paramValue)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
	*(uint32_t*)(swConfigShadow + memOffset) = (uint32_t) paramValue;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <_bootloader_configMemory_setParameter+0x30>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	461a      	mov	r2, r3
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	6013      	str	r3, [r2, #0]
	return (uint32_t) *(uint32_t*)(swConfigShadow + memOffset);
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <_bootloader_configMemory_setParameter+0x30>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4413      	add	r3, r2
 8000744:	681b      	ldr	r3, [r3, #0]
}
 8000746:	4618      	mov	r0, r3
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000090 	.word	0x20000090

08000758 <_bootloader_appMemory_eraseSectors>:

// ********** Flashing procedure & SW Update methods **********
inline static uint8_t _bootloader_appMemory_eraseSectors()
{	
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus;
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET); // Turn-off LED0
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000764:	481f      	ldr	r0, [pc, #124]	; (80007e4 <_bootloader_appMemory_eraseSectors+0x8c>)
 8000766:	f001 fa4b 	bl	8001c00 <HAL_GPIO_WritePin>
	for(uint8_t idxS=APP_MEMORY_SECINI; idxS <= APP_MEMORY_SECFIN; idxS++ )
 800076a:	2306      	movs	r3, #6
 800076c:	71fb      	strb	r3, [r7, #7]
 800076e:	e02a      	b.n	80007c6 <_bootloader_appMemory_eraseSectors+0x6e>
	{
		FLASH_Erase_Sector(idxS,FLASH_VOLTAGE_RANGE_3);
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2102      	movs	r1, #2
 8000774:	4618      	mov	r0, r3
 8000776:	f001 f85f 	bl	8001838 <FLASH_Erase_Sector>
		HAL_Delay(50); // Wait last transmission
 800077a:	2032      	movs	r0, #50	; 0x32
 800077c:	f000 fcc4 	bl	8001108 <HAL_Delay>
		halStatus = COMM_UART_SendData((uint8_t[4]){0x81,
 8000780:	2381      	movs	r3, #129	; 0x81
 8000782:	703b      	strb	r3, [r7, #0]
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	707b      	strb	r3, [r7, #1]
										idxS,
										idxS == APP_MEMORY_SECFIN,
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	2b0a      	cmp	r3, #10
 800078c:	bf0c      	ite	eq
 800078e:	2301      	moveq	r3, #1
 8000790:	2300      	movne	r3, #0
 8000792:	b2db      	uxtb	r3, r3
		halStatus = COMM_UART_SendData((uint8_t[4]){0x81,
 8000794:	70bb      	strb	r3, [r7, #2]
 8000796:	23ff      	movs	r3, #255	; 0xff
 8000798:	70fb      	strb	r3, [r7, #3]
 800079a:	463b      	mov	r3, r7
 800079c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a0:	2104      	movs	r1, #4
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fa04 	bl	8000bb0 <COMM_UART_SendData>
 80007a8:	4603      	mov	r3, r0
 80007aa:	71bb      	strb	r3, [r7, #6]
										0xFF}, 
										4, SERIAL_TIMEOUT_RX); // Send (0x81 + sector no. + isLastSector) to confirm erased sector
		if(halStatus!= HAL_OK) return 0; // Error in TX
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <_bootloader_appMemory_eraseSectors+0x5e>
 80007b2:	2300      	movs	r3, #0
 80007b4:	e011      	b.n	80007da <_bootloader_appMemory_eraseSectors+0x82>
		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_9); // Toggle LED0
 80007b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ba:	480a      	ldr	r0, [pc, #40]	; (80007e4 <_bootloader_appMemory_eraseSectors+0x8c>)
 80007bc:	f001 fa39 	bl	8001c32 <HAL_GPIO_TogglePin>
	for(uint8_t idxS=APP_MEMORY_SECINI; idxS <= APP_MEMORY_SECFIN; idxS++ )
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	3301      	adds	r3, #1
 80007c4:	71fb      	strb	r3, [r7, #7]
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b0a      	cmp	r3, #10
 80007ca:	d9d1      	bls.n	8000770 <_bootloader_appMemory_eraseSectors+0x18>
	}
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET); // Turn-off LED0
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <_bootloader_appMemory_eraseSectors+0x8c>)
 80007d4:	f001 fa14 	bl	8001c00 <HAL_GPIO_WritePin>
	return 1; // OK
 80007d8:	2301      	movs	r3, #1
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021400 	.word	0x40021400

080007e8 <_bootloader_appMemory_acknowledgePackets>:

inline static uint32_t _bootloader_appMemory_acknowledgePackets()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus;

	// Receive packets data in RX
	if(COMM_UART_ReceiveData(rx, 4, SERIAL_TIMEOUT_RX) != HAL_OK) return 0; // Error in RX procedure
 80007ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007f2:	2104      	movs	r1, #4
 80007f4:	4820      	ldr	r0, [pc, #128]	; (8000878 <_bootloader_appMemory_acknowledgePackets+0x90>)
 80007f6:	f000 f9c3 	bl	8000b80 <COMM_UART_ReceiveData>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <_bootloader_appMemory_acknowledgePackets+0x1c>
 8000800:	2300      	movs	r3, #0
 8000802:	e035      	b.n	8000870 <_bootloader_appMemory_acknowledgePackets+0x88>
	
	// Check if a '0xC1' was received
	if(_checkPacket(rx, (uint8_t[4]){0xC1,0xFF,0xFF,0xFF}, (uint8_t) 0b1000))
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <_bootloader_appMemory_acknowledgePackets+0x94>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2208      	movs	r2, #8
 800080e:	4619      	mov	r1, r3
 8000810:	4819      	ldr	r0, [pc, #100]	; (8000878 <_bootloader_appMemory_acknowledgePackets+0x90>)
 8000812:	f000 f95d 	bl	8000ad0 <_checkPacket>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d028      	beq.n	800086e <_bootloader_appMemory_acknowledgePackets+0x86>
	{
		uint32_t nOfPackets = (uint32_t) ((rx[3]<<0) + (rx[2]<<8) + (rx[1]<<16)); // Parse packets data
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <_bootloader_appMemory_acknowledgePackets+0x90>)
 800081e:	78db      	ldrb	r3, [r3, #3]
 8000820:	461a      	mov	r2, r3
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <_bootloader_appMemory_acknowledgePackets+0x90>)
 8000824:	789b      	ldrb	r3, [r3, #2]
 8000826:	021b      	lsls	r3, r3, #8
 8000828:	441a      	add	r2, r3
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <_bootloader_appMemory_acknowledgePackets+0x90>)
 800082c:	785b      	ldrb	r3, [r3, #1]
 800082e:	041b      	lsls	r3, r3, #16
 8000830:	4413      	add	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]
		halStatus = COMM_UART_SendData((uint8_t[4]) {0x82,
 8000834:	2382      	movs	r3, #130	; 0x82
 8000836:	703b      	strb	r3, [r7, #0]
			(uint8_t) ((nOfPackets & 0x00FF0000) >> 16),
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	0c1b      	lsrs	r3, r3, #16
 800083c:	b2db      	uxtb	r3, r3
		halStatus = COMM_UART_SendData((uint8_t[4]) {0x82,
 800083e:	707b      	strb	r3, [r7, #1]
			(uint8_t) ((nOfPackets & 0x0000FF00) >> 8),
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b2db      	uxtb	r3, r3
		halStatus = COMM_UART_SendData((uint8_t[4]) {0x82,
 8000846:	70bb      	strb	r3, [r7, #2]
			(uint8_t) ((nOfPackets & 0x000000FF) >> 0)},
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	b2db      	uxtb	r3, r3
		halStatus = COMM_UART_SendData((uint8_t[4]) {0x82,
 800084c:	70fb      	strb	r3, [r7, #3]
 800084e:	463b      	mov	r3, r7
 8000850:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000854:	2104      	movs	r1, #4
 8000856:	4618      	mov	r0, r3
 8000858:	f000 f9aa 	bl	8000bb0 <COMM_UART_SendData>
 800085c:	4603      	mov	r3, r0
 800085e:	72fb      	strb	r3, [r7, #11]
			4, SERIAL_TIMEOUT_RX); // Answer back acknowledging the received 'nOfPackets' value
		if(halStatus != HAL_OK) return 0; // Error in TX procedure
 8000860:	7afb      	ldrb	r3, [r7, #11]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <_bootloader_appMemory_acknowledgePackets+0x82>
 8000866:	2300      	movs	r3, #0
 8000868:	e002      	b.n	8000870 <_bootloader_appMemory_acknowledgePackets+0x88>
		return nOfPackets;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	e000      	b.n	8000870 <_bootloader_appMemory_acknowledgePackets+0x88>
	}
	else
	{
		return 0; //Error - Unexpected command from serial interface
 800086e:	2300      	movs	r3, #0
	}
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000008c 	.word	0x2000008c
 800087c:	0800392c 	.word	0x0800392c

08000880 <_bootloader_appMemory_receiveAndFlash>:

inline static uint32_t _bootloader_appMemory_receiveAndFlash(uint32_t nOfPackets)
{
 8000880:	b5b0      	push	{r4, r5, r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef halStatus;
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET); // Turn-off LED1
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088e:	483e      	ldr	r0, [pc, #248]	; (8000988 <_bootloader_appMemory_receiveAndFlash+0x108>)
 8000890:	f001 f9b6 	bl	8001c00 <HAL_GPIO_WritePin>
	uint32_t nOfFlashed = 0; // Counter to track progress of flashed packets
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
	for(uint8_t nSector = APP_MEMORY_SECINI; nSector<= APP_MEMORY_SECFIN; nSector++)
 8000898:	2306      	movs	r3, #6
 800089a:	76fb      	strb	r3, [r7, #27]
 800089c:	e061      	b.n	8000962 <_bootloader_appMemory_receiveAndFlash+0xe2>
	{
		// FIXME this command cause all the memory to be shifted by 1 byte - Timing Critical
		//COMM_UART_SendData((uint8_t[4]) {0x83, nSector, 0x00, 0xFF}, 4, SERIAL_TIMEOUT_RX); // Feedback when a sector is starting to be flashed

		// Write all the addresses contained in the current flash sector
		for(uint32_t addr=sectorAddr[nSector]; addr<(sectorAddr[nSector]+sectorSize[nSector]); addr+=0x04)
 800089e:	7efb      	ldrb	r3, [r7, #27]
 80008a0:	4a3a      	ldr	r2, [pc, #232]	; (800098c <_bootloader_appMemory_receiveAndFlash+0x10c>)
 80008a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	e03c      	b.n	8000924 <_bootloader_appMemory_receiveAndFlash+0xa4>
		{
			// Receive a SW packet via serial + parse it (little-endian) + write it to flash memory
			halStatus = COMM_UART_ReceiveData(rx, 4, SERIAL_TIMEOUT_RX);
 80008aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ae:	2104      	movs	r1, #4
 80008b0:	4837      	ldr	r0, [pc, #220]	; (8000990 <_bootloader_appMemory_receiveAndFlash+0x110>)
 80008b2:	f000 f965 	bl	8000b80 <COMM_UART_ReceiveData>
 80008b6:	4603      	mov	r3, r0
 80008b8:	74fb      	strb	r3, [r7, #19]
			if(halStatus != HAL_OK) goto END_PROGRAMMING;
 80008ba:	7cfb      	ldrb	r3, [r7, #19]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d154      	bne.n	800096a <_bootloader_appMemory_receiveAndFlash+0xea>

			uint32_t packetData = (rx[0] << 24) + (rx[1] << 16) + (rx[2] << 8) + (rx[3] << 0);
 80008c0:	4b33      	ldr	r3, [pc, #204]	; (8000990 <_bootloader_appMemory_receiveAndFlash+0x110>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	061a      	lsls	r2, r3, #24
 80008c6:	4b32      	ldr	r3, [pc, #200]	; (8000990 <_bootloader_appMemory_receiveAndFlash+0x110>)
 80008c8:	785b      	ldrb	r3, [r3, #1]
 80008ca:	041b      	lsls	r3, r3, #16
 80008cc:	441a      	add	r2, r3
 80008ce:	4b30      	ldr	r3, [pc, #192]	; (8000990 <_bootloader_appMemory_receiveAndFlash+0x110>)
 80008d0:	789b      	ldrb	r3, [r3, #2]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	4413      	add	r3, r2
 80008d6:	4a2e      	ldr	r2, [pc, #184]	; (8000990 <_bootloader_appMemory_receiveAndFlash+0x110>)
 80008d8:	78d2      	ldrb	r2, [r2, #3]
 80008da:	4413      	add	r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
			halStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, (uint64_t) packetData);
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2200      	movs	r2, #0
 80008e2:	461c      	mov	r4, r3
 80008e4:	4615      	mov	r5, r2
 80008e6:	4622      	mov	r2, r4
 80008e8:	462b      	mov	r3, r5
 80008ea:	6979      	ldr	r1, [r7, #20]
 80008ec:	2002      	movs	r0, #2
 80008ee:	f000 fded 	bl	80014cc <HAL_FLASH_Program>
 80008f2:	4603      	mov	r3, r0
 80008f4:	74fb      	strb	r3, [r7, #19]

			// Check if programmed memory position == received packet OR
			// HAL error during programming OR
			// All packets were flashed / finished
			if(*((uint32_t*)addr) != packetData
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d136      	bne.n	800096e <_bootloader_appMemory_receiveAndFlash+0xee>
				|| halStatus != HAL_OK 
 8000900:	7cfb      	ldrb	r3, [r7, #19]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d133      	bne.n	800096e <_bootloader_appMemory_receiveAndFlash+0xee>
				|| ++nOfFlashed == nOfPackets)	goto END_PROGRAMMING;
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3301      	adds	r3, #1
 800090a:	61fb      	str	r3, [r7, #28]
 800090c:	69fa      	ldr	r2, [r7, #28]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	429a      	cmp	r2, r3
 8000912:	d02c      	beq.n	800096e <_bootloader_appMemory_receiveAndFlash+0xee>
			HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);
 8000914:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000918:	481b      	ldr	r0, [pc, #108]	; (8000988 <_bootloader_appMemory_receiveAndFlash+0x108>)
 800091a:	f001 f98a 	bl	8001c32 <HAL_GPIO_TogglePin>
		for(uint32_t addr=sectorAddr[nSector]; addr<(sectorAddr[nSector]+sectorSize[nSector]); addr+=0x04)
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3304      	adds	r3, #4
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	7efb      	ldrb	r3, [r7, #27]
 8000926:	4a19      	ldr	r2, [pc, #100]	; (800098c <_bootloader_appMemory_receiveAndFlash+0x10c>)
 8000928:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800092c:	7efb      	ldrb	r3, [r7, #27]
 800092e:	4919      	ldr	r1, [pc, #100]	; (8000994 <_bootloader_appMemory_receiveAndFlash+0x114>)
 8000930:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000934:	4413      	add	r3, r2
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	429a      	cmp	r2, r3
 800093a:	d3b6      	bcc.n	80008aa <_bootloader_appMemory_receiveAndFlash+0x2a>
		}
		COMM_UART_SendData((uint8_t[4]) {0x83, nSector, 0x01, 0xFF}, 4, SERIAL_TIMEOUT_RX); // Feedback when a sector is full
 800093c:	2383      	movs	r3, #131	; 0x83
 800093e:	723b      	strb	r3, [r7, #8]
 8000940:	7efb      	ldrb	r3, [r7, #27]
 8000942:	727b      	strb	r3, [r7, #9]
 8000944:	2301      	movs	r3, #1
 8000946:	72bb      	strb	r3, [r7, #10]
 8000948:	23ff      	movs	r3, #255	; 0xff
 800094a:	72fb      	strb	r3, [r7, #11]
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000954:	2104      	movs	r1, #4
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f92a 	bl	8000bb0 <COMM_UART_SendData>
	for(uint8_t nSector = APP_MEMORY_SECINI; nSector<= APP_MEMORY_SECFIN; nSector++)
 800095c:	7efb      	ldrb	r3, [r7, #27]
 800095e:	3301      	adds	r3, #1
 8000960:	76fb      	strb	r3, [r7, #27]
 8000962:	7efb      	ldrb	r3, [r7, #27]
 8000964:	2b0a      	cmp	r3, #10
 8000966:	d99a      	bls.n	800089e <_bootloader_appMemory_receiveAndFlash+0x1e>
	}

	END_PROGRAMMING:
 8000968:	e002      	b.n	8000970 <_bootloader_appMemory_receiveAndFlash+0xf0>
			if(halStatus != HAL_OK) goto END_PROGRAMMING;
 800096a:	bf00      	nop
 800096c:	e000      	b.n	8000970 <_bootloader_appMemory_receiveAndFlash+0xf0>
				|| ++nOfFlashed == nOfPackets)	goto END_PROGRAMMING;
 800096e:	bf00      	nop
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET); // Turn-off LED1
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000976:	4804      	ldr	r0, [pc, #16]	; (8000988 <_bootloader_appMemory_receiveAndFlash+0x108>)
 8000978:	f001 f942 	bl	8001c00 <HAL_GPIO_WritePin>
	return nOfFlashed;
 800097c:	69fb      	ldr	r3, [r7, #28]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3720      	adds	r7, #32
 8000982:	46bd      	mov	sp, r7
 8000984:	bdb0      	pop	{r4, r5, r7, pc}
 8000986:	bf00      	nop
 8000988:	40021400 	.word	0x40021400
 800098c:	08003930 	.word	0x08003930
 8000990:	2000008c 	.word	0x2000008c
 8000994:	08003960 	.word	0x08003960

08000998 <_bootloader_appMemory_loadApplication>:

/**
 * @brief This function ensures a 'clean-state' jump to the application code
 */
inline static void _bootloader_appMemory_loadApplication()
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099e:	b672      	cpsid	i
}
 80009a0:	bf00      	nop
	// Disable all interrupts to perform all steps before loading application code
	__disable_irq();

	// Function pointer to application's reset handler
	void (*app_Reset_Handler)(void) =	(void*)(*(volatile uint32_t*)(sectorAddr[APP_MEMORY_SECINI] + 0x04));
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <_bootloader_appMemory_loadApplication+0x80>)
 80009a4:	3304      	adds	r3, #4
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	607b      	str	r3, [r7, #4]

	// Reset SCB parameters
    SCB -> ICSR = 0x00000000;   // reset value;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <_bootloader_appMemory_loadApplication+0x84>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
    SCB -> SCR = 0;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <_bootloader_appMemory_loadApplication+0x84>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
    SCB -> CCR = 0x00000200;    // reset value
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <_bootloader_appMemory_loadApplication+0x84>)
 80009b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009bc:	615a      	str	r2, [r3, #20]
    SCB -> SHP[0] = 0;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <_bootloader_appMemory_loadApplication+0x84>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	761a      	strb	r2, [r3, #24]
    SCB -> SHCSR = 0;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <_bootloader_appMemory_loadApplication+0x84>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
    SCB -> CFSR = (SCB_CFSR_DIVBYZERO_Msk | SCB_CFSR_UNALIGNED_Msk | SCB_CFSR_UNDEFINSTR_Msk | SCB_CFSR_NOCP_Msk | SCB_CFSR_INVPC_Msk | SCB_CFSR_INVSTATE_Msk);
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <_bootloader_appMemory_loadApplication+0x84>)
 80009cc:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <_bootloader_appMemory_loadApplication+0x88>)
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
    SCB -> HFSR = (SCB_HFSR_DEBUGEVT_Msk | SCB_HFSR_FORCED_Msk | SCB_HFSR_VECTTBL_Msk);
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <_bootloader_appMemory_loadApplication+0x84>)
 80009d2:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <_bootloader_appMemory_loadApplication+0x8c>)
 80009d4:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set the Vector Table Offset Register (VTOR) to the application vector table
	SCB -> VTOR = sectorAddr[APP_MEMORY_SECINI];
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <_bootloader_appMemory_loadApplication+0x84>)
 80009d8:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <_bootloader_appMemory_loadApplication+0x80>)
 80009da:	609a      	str	r2, [r3, #8]

    // Set the Main Stack Pointer (MSP) to the value at the beginning of the application's flash section
	__set_MSP(*(volatile uint32_t *) sectorAddr[APP_MEMORY_SECINI]);
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <_bootloader_appMemory_loadApplication+0x80>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	f383 8808 	msr	MSP, r3
}
 80009e8:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009ea:	f3bf 8f4f 	dsb	sy
}
 80009ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009f0:	f3bf 8f6f 	isb	sy
}
 80009f4:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80009f6:	b662      	cpsie	i
}
 80009f8:	bf00      	nop

	// Re-enable all interrupts
	__enable_irq();

    // Disable / Reset SysTick before jumping to application
    SysTick -> CTRL = 0;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <_bootloader_appMemory_loadApplication+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
    SysTick -> LOAD = 0;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <_bootloader_appMemory_loadApplication+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
    SysTick -> VAL  = 0;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <_bootloader_appMemory_loadApplication+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]

	// Call application's reset handler (starting point)
	app_Reset_Handler();
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4798      	blx	r3
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	08040000 	.word	0x08040000
 8000a1c:	e000ed00 	.word	0xe000ed00
 8000a20:	030f0000 	.word	0x030f0000
 8000a24:	c0000002 	.word	0xc0000002
 8000a28:	e000e010 	.word	0xe000e010

08000a2c <_gen_crc16>:

// ********** Internal Auxiliary methods **********

uint16_t _gen_crc16(const uint8_t* data_p, uint32_t length){
 8000a2c:	b480      	push	{r7}
 8000a2e:	b087      	sub	sp, #28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
    uint8_t x;
    uint16_t crc = 0xFFFF;
 8000a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a3a:	82fb      	strh	r3, [r7, #22]

    //while (length--)
    for(uint32_t idx = 0; idx < length ; idx++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	e03b      	b.n	8000aba <_gen_crc16+0x8e>
    {
        if(idx == 8 || idx==512 || idx==256)
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	2b08      	cmp	r3, #8
 8000a46:	d007      	beq.n	8000a58 <_gen_crc16+0x2c>
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a4e:	d003      	beq.n	8000a58 <_gen_crc16+0x2c>
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a56:	d107      	bne.n	8000a68 <_gen_crc16+0x3c>
        {
            uint8_t xx = 1, xxt = 2;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	73bb      	strb	r3, [r7, #14]
            xx = xx+xxt;
 8000a60:	7bfa      	ldrb	r2, [r7, #15]
 8000a62:	7bbb      	ldrb	r3, [r7, #14]
 8000a64:	4413      	add	r3, r2
 8000a66:	73fb      	strb	r3, [r7, #15]
        }

    	x = (crc >> 8) ^ (*(data_p+idx));
 8000a68:	8afb      	ldrh	r3, [r7, #22]
 8000a6a:	0a1b      	lsrs	r3, r3, #8
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	6879      	ldr	r1, [r7, #4]
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	440b      	add	r3, r1
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4053      	eors	r3, r2
 8000a7a:	737b      	strb	r3, [r7, #13]
        x ^= x>>4;
 8000a7c:	7b7b      	ldrb	r3, [r7, #13]
 8000a7e:	091b      	lsrs	r3, r3, #4
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	7b7b      	ldrb	r3, [r7, #13]
 8000a84:	4053      	eors	r3, r2
 8000a86:	737b      	strb	r3, [r7, #13]
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x); // 0x1021
 8000a88:	8afb      	ldrh	r3, [r7, #22]
 8000a8a:	021b      	lsls	r3, r3, #8
 8000a8c:	b21a      	sxth	r2, r3
 8000a8e:	7b7b      	ldrb	r3, [r7, #13]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	031b      	lsls	r3, r3, #12
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	4053      	eors	r3, r2
 8000a9a:	b21a      	sxth	r2, r3
 8000a9c:	7b7b      	ldrb	r3, [r7, #13]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	015b      	lsls	r3, r3, #5
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	b21b      	sxth	r3, r3
 8000aa6:	4053      	eors	r3, r2
 8000aa8:	b21a      	sxth	r2, r3
 8000aaa:	7b7b      	ldrb	r3, [r7, #13]
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	4053      	eors	r3, r2
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	82fb      	strh	r3, [r7, #22]
    for(uint32_t idx = 0; idx < length ; idx++)
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d3bf      	bcc.n	8000a42 <_gen_crc16+0x16>
    }
    return crc;
 8000ac2:	8afb      	ldrh	r3, [r7, #22]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	371c      	adds	r7, #28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <_checkPacket>:

/*
 * @brief: Method to check if the contents of a packet meet the required content according to the significance.
 */
inline static uint8_t _checkPacket(uint8_t* packet, uint8_t expectedPacket[4],  uint8_t significance)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b087      	sub	sp, #28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	4613      	mov	r3, r2
 8000adc:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	75fb      	strb	r3, [r7, #23]

	if(*packet	   == expectedPacket[0] || ((significance & 0b1000) == 0)) result |= (result | 0b1000);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d004      	beq.n	8000af8 <_checkPacket+0x28>
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d103      	bne.n	8000b00 <_checkPacket+0x30>
 8000af8:	7dfb      	ldrb	r3, [r7, #23]
 8000afa:	f043 0308 	orr.w	r3, r3, #8
 8000afe:	75fb      	strb	r3, [r7, #23]
	if(*(packet+1) == expectedPacket[1] || ((significance & 0b0100) == 0)) result |= (result | 0b0100);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	3301      	adds	r3, #1
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d004      	beq.n	8000b1a <_checkPacket+0x4a>
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d103      	bne.n	8000b22 <_checkPacket+0x52>
 8000b1a:	7dfb      	ldrb	r3, [r7, #23]
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	75fb      	strb	r3, [r7, #23]
	if(*(packet+2) == expectedPacket[2] || ((significance & 0b0010) == 0)) result |= (result | 0b0010);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	3302      	adds	r3, #2
 8000b26:	781a      	ldrb	r2, [r3, #0]
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d004      	beq.n	8000b3c <_checkPacket+0x6c>
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d103      	bne.n	8000b44 <_checkPacket+0x74>
 8000b3c:	7dfb      	ldrb	r3, [r7, #23]
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	75fb      	strb	r3, [r7, #23]
	if(*(packet+3) == expectedPacket[3] || ((significance & 0b0001) == 0)) result |= (result | 0b0001);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3303      	adds	r3, #3
 8000b48:	781a      	ldrb	r2, [r3, #0]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	3303      	adds	r3, #3
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d004      	beq.n	8000b5e <_checkPacket+0x8e>
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d103      	bne.n	8000b66 <_checkPacket+0x96>
 8000b5e:	7dfb      	ldrb	r3, [r7, #23]
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	75fb      	strb	r3, [r7, #23]

	return (result == 0b1111);
 8000b66:	7dfb      	ldrb	r3, [r7, #23]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	bf0c      	ite	eq
 8000b6c:	2301      	moveq	r3, #1
 8000b6e:	2300      	movne	r3, #0
 8000b70:	b2db      	uxtb	r3, r3
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	371c      	adds	r7, #28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <COMM_UART_ReceiveData>:


/* Functions implementation --------------------------------------------------*/

HAL_StatusTypeDef COMM_UART_ReceiveData(uint8_t* dataPtr, uint8_t size, uint32_t delay)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef halStatus;
  halStatus = HAL_UART_Receive(&UART_DEVICE_HANDLER , dataPtr, size, delay);
 8000b8e:	7afb      	ldrb	r3, [r7, #11]
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	68f9      	ldr	r1, [r7, #12]
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <COMM_UART_ReceiveData+0x2c>)
 8000b98:	f001 fd9d 	bl	80026d6 <HAL_UART_Receive>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	75fb      	strb	r3, [r7, #23]
  return halStatus;
 8000ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000094 	.word	0x20000094

08000bb0 <COMM_UART_SendData>:

// Transmit string via UART in blocking mode
HAL_StatusTypeDef COMM_UART_SendData(uint8_t* dataPtr, uint8_t size, uint32_t delay)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	607a      	str	r2, [r7, #4]
 8000bbc:	72fb      	strb	r3, [r7, #11]
  // Start data transmission (force transmission)
  HAL_StatusTypeDef halStatus;
  do{
    halStatus = HAL_UART_Transmit(&UART_DEVICE_HANDLER, dataPtr , size, delay);
 8000bbe:	7afb      	ldrb	r3, [r7, #11]
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68f9      	ldr	r1, [r7, #12]
 8000bc6:	4806      	ldr	r0, [pc, #24]	; (8000be0 <COMM_UART_SendData+0x30>)
 8000bc8:	f001 fcf3 	bl	80025b2 <HAL_UART_Transmit>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	75fb      	strb	r3, [r7, #23]
  }
  while(halStatus == HAL_BUSY);
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d0f3      	beq.n	8000bbe <COMM_UART_SendData+0xe>
  return halStatus;
 8000bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000094 	.word	0x20000094

08000be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be8:	f000 fa1c 	bl	8001024 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bec:	f000 f808 	bl	8000c00 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf0:	f000 f88e 	bl	8000d10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bf4:	f000 f862 	bl	8000cbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //initialise_monitor_handles(); // Semi-hosting
  bootloader_init(); // Start bootloader
 8000bf8:	f7ff fc68 	bl	80004cc <bootloader_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <main+0x18>
	...

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b094      	sub	sp, #80	; 0x50
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0320 	add.w	r3, r7, #32
 8000c0a:	2230      	movs	r2, #48	; 0x30
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 fd72 	bl	80036f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <SystemClock_Config+0xb4>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <SystemClock_Config+0xb4>)
 8000c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c32:	6413      	str	r3, [r2, #64]	; 0x40
 8000c34:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <SystemClock_Config+0xb4>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c40:	2300      	movs	r3, #0
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <SystemClock_Config+0xb8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <SystemClock_Config+0xb8>)
 8000c4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <SystemClock_Config+0xb8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c60:	2301      	movs	r3, #1
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c64:	2310      	movs	r3, #16
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6c:	f107 0320 	add.w	r3, r7, #32
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fff9 	bl	8001c68 <HAL_RCC_OscConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000c7c:	f000 f8ac 	bl	8000dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c80:	230f      	movs	r3, #15
 8000c82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f001 fa5c 	bl	8002158 <HAL_RCC_ClockConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ca6:	f000 f897 	bl	8000dd8 <Error_Handler>
  }
}
 8000caa:	bf00      	nop
 8000cac:	3750      	adds	r7, #80	; 0x50
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40007000 	.word	0x40007000

08000cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <MX_USART2_UART_Init+0x48>)
 8000cc2:	4a11      	ldr	r2, [pc, #68]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 576000;
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_USART2_UART_Init+0x48>)
 8000cc8:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <MX_USART2_UART_Init+0x50>)
 8000cca:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <MX_USART2_UART_Init+0x48>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_USART2_UART_Init+0x48>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <MX_USART2_UART_Init+0x48>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_USART2_UART_Init+0x48>)
 8000ce0:	220c      	movs	r2, #12
 8000ce2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <MX_USART2_UART_Init+0x48>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_USART2_UART_Init+0x48>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cf0:	4804      	ldr	r0, [pc, #16]	; (8000d04 <MX_USART2_UART_Init+0x48>)
 8000cf2:	f001 fc11 	bl	8002518 <HAL_UART_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000cfc:	f000 f86c 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000094 	.word	0x20000094
 8000d08:	40004400 	.word	0x40004400
 8000d0c:	0008ca00 	.word	0x0008ca00

08000d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <MX_GPIO_Init+0xbc>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a27      	ldr	r2, [pc, #156]	; (8000dcc <MX_GPIO_Init+0xbc>)
 8000d30:	f043 0320 	orr.w	r3, r3, #32
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <MX_GPIO_Init+0xbc>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0320 	and.w	r3, r3, #32
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <MX_GPIO_Init+0xbc>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a20      	ldr	r2, [pc, #128]	; (8000dcc <MX_GPIO_Init+0xbc>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_GPIO_Init+0xbc>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_GPIO_Init+0xbc>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <MX_GPIO_Init+0xbc>)
 8000d68:	f043 0304 	orr.w	r3, r3, #4
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <MX_GPIO_Init+0xbc>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000d80:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <MX_GPIO_Init+0xc0>)
 8000d82:	f000 ff3d 	bl	8001c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000d86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <MX_GPIO_Init+0xc0>)
 8000da0:	f000 fd92 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000da4:	2340      	movs	r3, #64	; 0x40
 8000da6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000db4:	230c      	movs	r3, #12
 8000db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_GPIO_Init+0xc4>)
 8000dc0:	f000 fd82 	bl	80018c8 <HAL_GPIO_Init>

}
 8000dc4:	bf00      	nop
 8000dc6:	3720      	adds	r7, #32
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40021400 	.word	0x40021400
 8000dd4:	40020800 	.word	0x40020800

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ddc:	b672      	cpsid	i
}
 8000dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <Error_Handler+0x8>
	...

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <HAL_MspInit+0x4c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <HAL_MspInit+0x4c>)
 8000df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <HAL_MspInit+0x4c>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <HAL_MspInit+0x4c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <HAL_MspInit+0x4c>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_MspInit+0x4c>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800

08000e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a1d      	ldr	r2, [pc, #116]	; (8000ec8 <HAL_UART_MspInit+0x94>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d133      	bne.n	8000ebe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <HAL_UART_MspInit+0x98>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <HAL_UART_MspInit+0x98>)
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_UART_MspInit+0x98>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_UART_MspInit+0x98>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <HAL_UART_MspInit+0x98>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_UART_MspInit+0x98>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e8e:	230c      	movs	r3, #12
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <HAL_UART_MspInit+0x9c>)
 8000eaa:	f000 fd0d 	bl	80018c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2026      	movs	r0, #38	; 0x26
 8000eb4:	f000 fa3d 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eb8:	2026      	movs	r0, #38	; 0x26
 8000eba:	f000 fa56 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40004400 	.word	0x40004400
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8000ede:	f000 fa52 	bl	8001386 <HAL_NVIC_SystemReset>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x8>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f8d0 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <USART2_IRQHandler+0x10>)
 8000f32:	f001 fc73 	bl	800281c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000094 	.word	0x20000094

08000f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <_sbrk+0x5c>)
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <_sbrk+0x60>)
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <_sbrk+0x64>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <_sbrk+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f70:	f002 fb88 	bl	8003684 <__errno>
 8000f74:	4603      	mov	r3, r0
 8000f76:	220c      	movs	r2, #12
 8000f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	e009      	b.n	8000f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <_sbrk+0x64>)
 8000f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20020000 	.word	0x20020000
 8000fa0:	00000400 	.word	0x00000400
 8000fa4:	200000d8 	.word	0x200000d8
 8000fa8:	20000110 	.word	0x20000110

08000fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <SystemInit+0x20>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <SystemInit+0x20>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fd6:	490e      	ldr	r1, [pc, #56]	; (8001010 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd8:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fec:	4c0b      	ldr	r4, [pc, #44]	; (800101c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ffa:	f7ff ffd7 	bl	8000fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f002 fb47 	bl	8003690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff fdef 	bl	8000be4 <main>
  bx  lr    
 8001006:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001008:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001014:	080039b8 	.word	0x080039b8
  ldr r2, =_sbss
 8001018:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800101c:	20000110 	.word	0x20000110

08001020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <HAL_Init+0x40>)
 800102e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_Init+0x40>)
 800103a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_Init+0x40>)
 8001046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f965 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	200f      	movs	r0, #15
 8001054:	f000 f808 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff fec4 	bl	8000de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023c00 	.word	0x40023c00

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x54>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f981 	bl	800138e <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e00e      	b.n	80010b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d80a      	bhi.n	80010b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f000 f945 	bl	8001332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <HAL_InitTick+0x5c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000000 	.word	0x20000000
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000004 	.word	0x20000004

080010c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008
 80010ec:	200000dc 	.word	0x200000dc

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	200000dc 	.word	0x200000dc

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff ffee 	bl	80010f0 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_Delay+0x44>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800112e:	bf00      	nop
 8001130:	f7ff ffde 	bl	80010f0 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0b      	blt.n	80011de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 021f 	and.w	r2, r3, #31
 80011cc:	4907      	ldr	r1, [pc, #28]	; (80011ec <__NVIC_EnableIRQ+0x38>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	2001      	movs	r0, #1
 80011d6:	fa00 f202 	lsl.w	r2, r0, r2
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000e100 	.word	0xe000e100

080011f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	db0a      	blt.n	800121a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	490c      	ldr	r1, [pc, #48]	; (800123c <__NVIC_SetPriority+0x4c>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	0112      	lsls	r2, r2, #4
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	440b      	add	r3, r1
 8001214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001218:	e00a      	b.n	8001230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4908      	ldr	r1, [pc, #32]	; (8001240 <__NVIC_SetPriority+0x50>)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	3b04      	subs	r3, #4
 8001228:	0112      	lsls	r2, r2, #4
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	440b      	add	r3, r1
 800122e:	761a      	strb	r2, [r3, #24]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000e100 	.word	0xe000e100
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f1c3 0307 	rsb	r3, r3, #7
 800125e:	2b04      	cmp	r3, #4
 8001260:	bf28      	it	cs
 8001262:	2304      	movcs	r3, #4
 8001264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3304      	adds	r3, #4
 800126a:	2b06      	cmp	r3, #6
 800126c:	d902      	bls.n	8001274 <NVIC_EncodePriority+0x30>
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3b03      	subs	r3, #3
 8001272:	e000      	b.n	8001276 <NVIC_EncodePriority+0x32>
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	f04f 32ff 	mov.w	r2, #4294967295
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43da      	mvns	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	401a      	ands	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800128c:	f04f 31ff 	mov.w	r1, #4294967295
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	43d9      	mvns	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	4313      	orrs	r3, r2
         );
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3724      	adds	r7, #36	; 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80012b0:	f3bf 8f4f 	dsb	sy
}
 80012b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <__NVIC_SystemReset+0x24>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012be:	4904      	ldr	r1, [pc, #16]	; (80012d0 <__NVIC_SystemReset+0x24>)
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <__NVIC_SystemReset+0x28>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80012c6:	f3bf 8f4f 	dsb	sy
}
 80012ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <__NVIC_SystemReset+0x20>
 80012d0:	e000ed00 	.word	0xe000ed00
 80012d4:	05fa0004 	.word	0x05fa0004

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff78 	bl	80011f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff13 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff28 	bl	8001198 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff78 	bl	8001244 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff47 	bl	80011f0 <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff1b 	bl	80011b4 <__NVIC_EnableIRQ>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800138a:	f7ff ff8f 	bl	80012ac <__NVIC_SystemReset>

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ff9e 	bl	80012d8 <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b084      	sub	sp, #16
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff fe9c 	bl	80010f0 <HAL_GetTick>
 80013b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d008      	beq.n	80013d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e052      	b.n	800147e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0216 	bic.w	r2, r2, #22
 80013e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	695a      	ldr	r2, [r3, #20]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d103      	bne.n	8001408 <HAL_DMA_Abort+0x62>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001404:	2b00      	cmp	r3, #0
 8001406:	d007      	beq.n	8001418 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0208 	bic.w	r2, r2, #8
 8001416:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001428:	e013      	b.n	8001452 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800142a:	f7ff fe61 	bl	80010f0 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b05      	cmp	r3, #5
 8001436:	d90c      	bls.n	8001452 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2220      	movs	r2, #32
 800143c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2203      	movs	r2, #3
 8001442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e015      	b.n	800147e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1e4      	bne.n	800142a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001464:	223f      	movs	r2, #63	; 0x3f
 8001466:	409a      	lsls	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d004      	beq.n	80014a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e00c      	b.n	80014be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2205      	movs	r2, #5
 80014a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80014de:	4b23      	ldr	r3, [pc, #140]	; (800156c <HAL_FLASH_Program+0xa0>)
 80014e0:	7e1b      	ldrb	r3, [r3, #24]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_FLASH_Program+0x1e>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e03b      	b.n	8001562 <HAL_FLASH_Program+0x96>
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <HAL_FLASH_Program+0xa0>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014f4:	f000 f870 	bl	80015d8 <FLASH_WaitForLastOperation>
 80014f8:	4603      	mov	r3, r0
 80014fa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d12b      	bne.n	800155a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d105      	bne.n	8001514 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001508:	783b      	ldrb	r3, [r7, #0]
 800150a:	4619      	mov	r1, r3
 800150c:	68b8      	ldr	r0, [r7, #8]
 800150e:	f000 f91b 	bl	8001748 <FLASH_Program_Byte>
 8001512:	e016      	b.n	8001542 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d105      	bne.n	8001526 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800151a:	883b      	ldrh	r3, [r7, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	68b8      	ldr	r0, [r7, #8]
 8001520:	f000 f8ee 	bl	8001700 <FLASH_Program_HalfWord>
 8001524:	e00d      	b.n	8001542 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d105      	bne.n	8001538 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	4619      	mov	r1, r3
 8001530:	68b8      	ldr	r0, [r7, #8]
 8001532:	f000 f8c3 	bl	80016bc <FLASH_Program_Word>
 8001536:	e004      	b.n	8001542 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800153c:	68b8      	ldr	r0, [r7, #8]
 800153e:	f000 f88b 	bl	8001658 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001542:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001546:	f000 f847 	bl	80015d8 <FLASH_WaitForLastOperation>
 800154a:	4603      	mov	r3, r0
 800154c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_FLASH_Program+0xa4>)
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_FLASH_Program+0xa4>)
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <HAL_FLASH_Program+0xa0>)
 800155c:	2200      	movs	r2, #0
 800155e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001560:	7dfb      	ldrb	r3, [r7, #23]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200000e0 	.word	0x200000e0
 8001570:	40023c00 	.word	0x40023c00

08001574 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_FLASH_Unlock+0x38>)
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2b00      	cmp	r3, #0
 8001584:	da0b      	bge.n	800159e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_FLASH_Unlock+0x38>)
 8001588:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <HAL_FLASH_Unlock+0x3c>)
 800158a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <HAL_FLASH_Unlock+0x38>)
 800158e:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <HAL_FLASH_Unlock+0x40>)
 8001590:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_FLASH_Unlock+0x38>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	2b00      	cmp	r3, #0
 8001598:	da01      	bge.n	800159e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800159e:	79fb      	ldrb	r3, [r7, #7]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	40023c00 	.word	0x40023c00
 80015b0:	45670123 	.word	0x45670123
 80015b4:	cdef89ab 	.word	0xcdef89ab

080015b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_FLASH_Lock+0x1c>)
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <HAL_FLASH_Lock+0x1c>)
 80015c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015c6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40023c00 	.word	0x40023c00

080015d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <FLASH_WaitForLastOperation+0x78>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80015ea:	f7ff fd81 	bl	80010f0 <HAL_GetTick>
 80015ee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80015f0:	e010      	b.n	8001614 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f8:	d00c      	beq.n	8001614 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d007      	beq.n	8001610 <FLASH_WaitForLastOperation+0x38>
 8001600:	f7ff fd76 	bl	80010f0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	d201      	bcs.n	8001614 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e019      	b.n	8001648 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <FLASH_WaitForLastOperation+0x7c>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1e8      	bne.n	80015f2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <FLASH_WaitForLastOperation+0x7c>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d002      	beq.n	8001632 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <FLASH_WaitForLastOperation+0x7c>)
 800162e:	2201      	movs	r2, #1
 8001630:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <FLASH_WaitForLastOperation+0x7c>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800163e:	f000 f8a5 	bl	800178c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
  
}  
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200000e0 	.word	0x200000e0
 8001654:	40023c00 	.word	0x40023c00

08001658 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <FLASH_Program_DoubleWord+0x60>)
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <FLASH_Program_DoubleWord+0x60>)
 800166a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800166e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <FLASH_Program_DoubleWord+0x60>)
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	4a10      	ldr	r2, [pc, #64]	; (80016b8 <FLASH_Program_DoubleWord+0x60>)
 8001676:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800167a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <FLASH_Program_DoubleWord+0x60>)
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <FLASH_Program_DoubleWord+0x60>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800168e:	f3bf 8f6f 	isb	sy
}
 8001692:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001694:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	000a      	movs	r2, r1
 80016a2:	2300      	movs	r3, #0
 80016a4:	68f9      	ldr	r1, [r7, #12]
 80016a6:	3104      	adds	r1, #4
 80016a8:	4613      	mov	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	40023c00 	.word	0x40023c00

080016bc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <FLASH_Program_Word+0x40>)
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	4a0c      	ldr	r2, [pc, #48]	; (80016fc <FLASH_Program_Word+0x40>)
 80016cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <FLASH_Program_Word+0x40>)
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	4a09      	ldr	r2, [pc, #36]	; (80016fc <FLASH_Program_Word+0x40>)
 80016d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <FLASH_Program_Word+0x40>)
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	4a06      	ldr	r2, [pc, #24]	; (80016fc <FLASH_Program_Word+0x40>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	601a      	str	r2, [r3, #0]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	40023c00 	.word	0x40023c00

08001700 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800170c:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <FLASH_Program_HalfWord+0x44>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <FLASH_Program_HalfWord+0x44>)
 8001712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001716:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <FLASH_Program_HalfWord+0x44>)
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	4a09      	ldr	r2, [pc, #36]	; (8001744 <FLASH_Program_HalfWord+0x44>)
 800171e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001722:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <FLASH_Program_HalfWord+0x44>)
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	4a06      	ldr	r2, [pc, #24]	; (8001744 <FLASH_Program_HalfWord+0x44>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	887a      	ldrh	r2, [r7, #2]
 8001734:	801a      	strh	r2, [r3, #0]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40023c00 	.word	0x40023c00

08001748 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <FLASH_Program_Byte+0x40>)
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <FLASH_Program_Byte+0x40>)
 800175a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800175e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <FLASH_Program_Byte+0x40>)
 8001762:	4a09      	ldr	r2, [pc, #36]	; (8001788 <FLASH_Program_Byte+0x40>)
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <FLASH_Program_Byte+0x40>)
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <FLASH_Program_Byte+0x40>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	78fa      	ldrb	r2, [r7, #3]
 8001778:	701a      	strb	r2, [r3, #0]
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40023c00 	.word	0x40023c00

0800178c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <FLASH_SetErrorCode+0xa4>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f003 0310 	and.w	r3, r3, #16
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800179c:	4b25      	ldr	r3, [pc, #148]	; (8001834 <FLASH_SetErrorCode+0xa8>)
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	f043 0310 	orr.w	r3, r3, #16
 80017a4:	4a23      	ldr	r2, [pc, #140]	; (8001834 <FLASH_SetErrorCode+0xa8>)
 80017a6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <FLASH_SetErrorCode+0xa4>)
 80017aa:	2210      	movs	r2, #16
 80017ac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <FLASH_SetErrorCode+0xa4>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f003 0320 	and.w	r3, r3, #32
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d008      	beq.n	80017cc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <FLASH_SetErrorCode+0xa8>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	4a1c      	ldr	r2, [pc, #112]	; (8001834 <FLASH_SetErrorCode+0xa8>)
 80017c4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80017c6:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <FLASH_SetErrorCode+0xa4>)
 80017c8:	2220      	movs	r2, #32
 80017ca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80017cc:	4b18      	ldr	r3, [pc, #96]	; (8001830 <FLASH_SetErrorCode+0xa4>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d008      	beq.n	80017ea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <FLASH_SetErrorCode+0xa8>)
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	4a14      	ldr	r2, [pc, #80]	; (8001834 <FLASH_SetErrorCode+0xa8>)
 80017e2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <FLASH_SetErrorCode+0xa4>)
 80017e6:	2240      	movs	r2, #64	; 0x40
 80017e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <FLASH_SetErrorCode+0xa4>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d008      	beq.n	8001808 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <FLASH_SetErrorCode+0xa8>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <FLASH_SetErrorCode+0xa8>)
 8001800:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <FLASH_SetErrorCode+0xa4>)
 8001804:	2280      	movs	r2, #128	; 0x80
 8001806:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <FLASH_SetErrorCode+0xa4>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <FLASH_SetErrorCode+0xa8>)
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	f043 0320 	orr.w	r3, r3, #32
 800181c:	4a05      	ldr	r2, [pc, #20]	; (8001834 <FLASH_SetErrorCode+0xa8>)
 800181e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <FLASH_SetErrorCode+0xa4>)
 8001822:	2202      	movs	r2, #2
 8001824:	60da      	str	r2, [r3, #12]
  }
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40023c00 	.word	0x40023c00
 8001834:	200000e0 	.word	0x200000e0

08001838 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001848:	78fb      	ldrb	r3, [r7, #3]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	e010      	b.n	8001876 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d103      	bne.n	8001862 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800185a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e009      	b.n	8001876 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d103      	bne.n	8001870 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	e002      	b.n	8001876 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001870:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001874:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <FLASH_Erase_Sector+0x8c>)
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <FLASH_Erase_Sector+0x8c>)
 800187c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001880:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <FLASH_Erase_Sector+0x8c>)
 8001884:	691a      	ldr	r2, [r3, #16]
 8001886:	490f      	ldr	r1, [pc, #60]	; (80018c4 <FLASH_Erase_Sector+0x8c>)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <FLASH_Erase_Sector+0x8c>)
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	4a0c      	ldr	r2, [pc, #48]	; (80018c4 <FLASH_Erase_Sector+0x8c>)
 8001894:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001898:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <FLASH_Erase_Sector+0x8c>)
 800189c:	691a      	ldr	r2, [r3, #16]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4313      	orrs	r3, r2
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <FLASH_Erase_Sector+0x8c>)
 80018a6:	f043 0302 	orr.w	r3, r3, #2
 80018aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <FLASH_Erase_Sector+0x8c>)
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <FLASH_Erase_Sector+0x8c>)
 80018b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b6:	6113      	str	r3, [r2, #16]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40023c00 	.word	0x40023c00

080018c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	e16b      	b.n	8001bbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018e4:	2201      	movs	r2, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	f040 815a 	bne.w	8001bb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d005      	beq.n	800191a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001916:	2b02      	cmp	r3, #2
 8001918:	d130      	bne.n	800197c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001950:	2201      	movs	r2, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 0201 	and.w	r2, r3, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b03      	cmp	r3, #3
 8001986:	d017      	beq.n	80019b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d123      	bne.n	8001a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3208      	adds	r2, #8
 80019cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	220f      	movs	r2, #15
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	69b9      	ldr	r1, [r7, #24]
 8001a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0203 	and.w	r2, r3, #3
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80b4 	beq.w	8001bb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b60      	ldr	r3, [pc, #384]	; (8001bd4 <HAL_GPIO_Init+0x30c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a5f      	ldr	r2, [pc, #380]	; (8001bd4 <HAL_GPIO_Init+0x30c>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	; (8001bd4 <HAL_GPIO_Init+0x30c>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a6a:	4a5b      	ldr	r2, [pc, #364]	; (8001bd8 <HAL_GPIO_Init+0x310>)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	3302      	adds	r3, #2
 8001a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	220f      	movs	r2, #15
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a52      	ldr	r2, [pc, #328]	; (8001bdc <HAL_GPIO_Init+0x314>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d02b      	beq.n	8001aee <HAL_GPIO_Init+0x226>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a51      	ldr	r2, [pc, #324]	; (8001be0 <HAL_GPIO_Init+0x318>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d025      	beq.n	8001aea <HAL_GPIO_Init+0x222>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a50      	ldr	r2, [pc, #320]	; (8001be4 <HAL_GPIO_Init+0x31c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d01f      	beq.n	8001ae6 <HAL_GPIO_Init+0x21e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4f      	ldr	r2, [pc, #316]	; (8001be8 <HAL_GPIO_Init+0x320>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d019      	beq.n	8001ae2 <HAL_GPIO_Init+0x21a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4e      	ldr	r2, [pc, #312]	; (8001bec <HAL_GPIO_Init+0x324>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d013      	beq.n	8001ade <HAL_GPIO_Init+0x216>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4d      	ldr	r2, [pc, #308]	; (8001bf0 <HAL_GPIO_Init+0x328>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00d      	beq.n	8001ada <HAL_GPIO_Init+0x212>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4c      	ldr	r2, [pc, #304]	; (8001bf4 <HAL_GPIO_Init+0x32c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d007      	beq.n	8001ad6 <HAL_GPIO_Init+0x20e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4b      	ldr	r2, [pc, #300]	; (8001bf8 <HAL_GPIO_Init+0x330>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d101      	bne.n	8001ad2 <HAL_GPIO_Init+0x20a>
 8001ace:	2307      	movs	r3, #7
 8001ad0:	e00e      	b.n	8001af0 <HAL_GPIO_Init+0x228>
 8001ad2:	2308      	movs	r3, #8
 8001ad4:	e00c      	b.n	8001af0 <HAL_GPIO_Init+0x228>
 8001ad6:	2306      	movs	r3, #6
 8001ad8:	e00a      	b.n	8001af0 <HAL_GPIO_Init+0x228>
 8001ada:	2305      	movs	r3, #5
 8001adc:	e008      	b.n	8001af0 <HAL_GPIO_Init+0x228>
 8001ade:	2304      	movs	r3, #4
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x228>
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e004      	b.n	8001af0 <HAL_GPIO_Init+0x228>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e002      	b.n	8001af0 <HAL_GPIO_Init+0x228>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <HAL_GPIO_Init+0x228>
 8001aee:	2300      	movs	r3, #0
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	f002 0203 	and.w	r2, r2, #3
 8001af6:	0092      	lsls	r2, r2, #2
 8001af8:	4093      	lsls	r3, r2
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b00:	4935      	ldr	r1, [pc, #212]	; (8001bd8 <HAL_GPIO_Init+0x310>)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	3302      	adds	r3, #2
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0e:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <HAL_GPIO_Init+0x334>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b32:	4a32      	ldr	r2, [pc, #200]	; (8001bfc <HAL_GPIO_Init+0x334>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b38:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <HAL_GPIO_Init+0x334>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b5c:	4a27      	ldr	r2, [pc, #156]	; (8001bfc <HAL_GPIO_Init+0x334>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b62:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <HAL_GPIO_Init+0x334>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b86:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <HAL_GPIO_Init+0x334>)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <HAL_GPIO_Init+0x334>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bb0:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <HAL_GPIO_Init+0x334>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	2b0f      	cmp	r3, #15
 8001bc0:	f67f ae90 	bls.w	80018e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	3724      	adds	r7, #36	; 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40013800 	.word	0x40013800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40020400 	.word	0x40020400
 8001be4:	40020800 	.word	0x40020800
 8001be8:	40020c00 	.word	0x40020c00
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40021400 	.word	0x40021400
 8001bf4:	40021800 	.word	0x40021800
 8001bf8:	40021c00 	.word	0x40021c00
 8001bfc:	40013c00 	.word	0x40013c00

08001c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c10:	787b      	ldrb	r3, [r7, #1]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c16:	887a      	ldrh	r2, [r7, #2]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c1c:	e003      	b.n	8001c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c1e:	887b      	ldrh	r3, [r7, #2]
 8001c20:	041a      	lsls	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	619a      	str	r2, [r3, #24]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b085      	sub	sp, #20
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c44:	887a      	ldrh	r2, [r7, #2]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	041a      	lsls	r2, r3, #16
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	43d9      	mvns	r1, r3
 8001c50:	887b      	ldrh	r3, [r7, #2]
 8001c52:	400b      	ands	r3, r1
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	619a      	str	r2, [r3, #24]
}
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e267      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d075      	beq.n	8001d72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c86:	4b88      	ldr	r3, [pc, #544]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d00c      	beq.n	8001cac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c92:	4b85      	ldr	r3, [pc, #532]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d112      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c9e:	4b82      	ldr	r3, [pc, #520]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001caa:	d10b      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cac:	4b7e      	ldr	r3, [pc, #504]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d05b      	beq.n	8001d70 <HAL_RCC_OscConfig+0x108>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d157      	bne.n	8001d70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e242      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ccc:	d106      	bne.n	8001cdc <HAL_RCC_OscConfig+0x74>
 8001cce:	4b76      	ldr	r3, [pc, #472]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a75      	ldr	r2, [pc, #468]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e01d      	b.n	8001d18 <HAL_RCC_OscConfig+0xb0>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x98>
 8001ce6:	4b70      	ldr	r3, [pc, #448]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a6f      	ldr	r2, [pc, #444]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b6d      	ldr	r3, [pc, #436]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a6c      	ldr	r2, [pc, #432]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e00b      	b.n	8001d18 <HAL_RCC_OscConfig+0xb0>
 8001d00:	4b69      	ldr	r3, [pc, #420]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a68      	ldr	r2, [pc, #416]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	4b66      	ldr	r3, [pc, #408]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a65      	ldr	r2, [pc, #404]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d013      	beq.n	8001d48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff f9e6 	bl	80010f0 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff f9e2 	bl	80010f0 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	; 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e207      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	4b5b      	ldr	r3, [pc, #364]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0xc0>
 8001d46:	e014      	b.n	8001d72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff f9d2 	bl	80010f0 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d50:	f7ff f9ce 	bl	80010f0 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	; 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e1f3      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d62:	4b51      	ldr	r3, [pc, #324]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0xe8>
 8001d6e:	e000      	b.n	8001d72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d063      	beq.n	8001e46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d8a:	4b47      	ldr	r3, [pc, #284]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d11c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d96:	4b44      	ldr	r3, [pc, #272]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d116      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da2:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_RCC_OscConfig+0x152>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d001      	beq.n	8001dba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e1c7      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dba:	4b3b      	ldr	r3, [pc, #236]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4937      	ldr	r1, [pc, #220]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dce:	e03a      	b.n	8001e46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd8:	4b34      	ldr	r3, [pc, #208]	; (8001eac <HAL_RCC_OscConfig+0x244>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7ff f987 	bl	80010f0 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de6:	f7ff f983 	bl	80010f0 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e1a8      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e04:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4925      	ldr	r1, [pc, #148]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]
 8001e18:	e015      	b.n	8001e46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1a:	4b24      	ldr	r3, [pc, #144]	; (8001eac <HAL_RCC_OscConfig+0x244>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7ff f966 	bl	80010f0 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e28:	f7ff f962 	bl	80010f0 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e187      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d036      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d016      	beq.n	8001e88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <HAL_RCC_OscConfig+0x248>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7ff f946 	bl	80010f0 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e68:	f7ff f942 	bl	80010f0 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e167      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x200>
 8001e86:	e01b      	b.n	8001ec0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_OscConfig+0x248>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8e:	f7ff f92f 	bl	80010f0 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e94:	e00e      	b.n	8001eb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e96:	f7ff f92b 	bl	80010f0 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d907      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e150      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	42470000 	.word	0x42470000
 8001eb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	4b88      	ldr	r3, [pc, #544]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1ea      	bne.n	8001e96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8097 	beq.w	8001ffc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed2:	4b81      	ldr	r3, [pc, #516]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10f      	bne.n	8001efe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	4b7d      	ldr	r3, [pc, #500]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	4a7c      	ldr	r2, [pc, #496]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eec:	6413      	str	r3, [r2, #64]	; 0x40
 8001eee:	4b7a      	ldr	r3, [pc, #488]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efa:	2301      	movs	r3, #1
 8001efc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efe:	4b77      	ldr	r3, [pc, #476]	; (80020dc <HAL_RCC_OscConfig+0x474>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d118      	bne.n	8001f3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0a:	4b74      	ldr	r3, [pc, #464]	; (80020dc <HAL_RCC_OscConfig+0x474>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a73      	ldr	r2, [pc, #460]	; (80020dc <HAL_RCC_OscConfig+0x474>)
 8001f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f16:	f7ff f8eb 	bl	80010f0 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1e:	f7ff f8e7 	bl	80010f0 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e10c      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	4b6a      	ldr	r3, [pc, #424]	; (80020dc <HAL_RCC_OscConfig+0x474>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x2ea>
 8001f44:	4b64      	ldr	r3, [pc, #400]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f48:	4a63      	ldr	r2, [pc, #396]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f50:	e01c      	b.n	8001f8c <HAL_RCC_OscConfig+0x324>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b05      	cmp	r3, #5
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x30c>
 8001f5a:	4b5f      	ldr	r3, [pc, #380]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	4a5e      	ldr	r2, [pc, #376]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	6713      	str	r3, [r2, #112]	; 0x70
 8001f66:	4b5c      	ldr	r3, [pc, #368]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	4a5b      	ldr	r2, [pc, #364]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6713      	str	r3, [r2, #112]	; 0x70
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0x324>
 8001f74:	4b58      	ldr	r3, [pc, #352]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f78:	4a57      	ldr	r2, [pc, #348]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f80:	4b55      	ldr	r3, [pc, #340]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	4a54      	ldr	r2, [pc, #336]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f86:	f023 0304 	bic.w	r3, r3, #4
 8001f8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d015      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7ff f8ac 	bl	80010f0 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9c:	f7ff f8a8 	bl	80010f0 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e0cb      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb2:	4b49      	ldr	r3, [pc, #292]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0ee      	beq.n	8001f9c <HAL_RCC_OscConfig+0x334>
 8001fbe:	e014      	b.n	8001fea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc0:	f7ff f896 	bl	80010f0 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc8:	f7ff f892 	bl	80010f0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e0b5      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fde:	4b3e      	ldr	r3, [pc, #248]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1ee      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fea:	7dfb      	ldrb	r3, [r7, #23]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d105      	bne.n	8001ffc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff0:	4b39      	ldr	r3, [pc, #228]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	4a38      	ldr	r2, [pc, #224]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80a1 	beq.w	8002148 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002006:	4b34      	ldr	r3, [pc, #208]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b08      	cmp	r3, #8
 8002010:	d05c      	beq.n	80020cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d141      	bne.n	800209e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201a:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <HAL_RCC_OscConfig+0x478>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7ff f866 	bl	80010f0 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002028:	f7ff f862 	bl	80010f0 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e087      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69da      	ldr	r2, [r3, #28]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	019b      	lsls	r3, r3, #6
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	085b      	lsrs	r3, r3, #1
 800205e:	3b01      	subs	r3, #1
 8002060:	041b      	lsls	r3, r3, #16
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	061b      	lsls	r3, r3, #24
 800206a:	491b      	ldr	r1, [pc, #108]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_RCC_OscConfig+0x478>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7ff f83b 	bl	80010f0 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207e:	f7ff f837 	bl	80010f0 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e05c      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x416>
 800209c:	e054      	b.n	8002148 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_RCC_OscConfig+0x478>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff f824 	bl	80010f0 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ac:	f7ff f820 	bl	80010f0 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e045      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_RCC_OscConfig+0x470>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x444>
 80020ca:	e03d      	b.n	8002148 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d107      	bne.n	80020e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e038      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40007000 	.word	0x40007000
 80020e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_RCC_OscConfig+0x4ec>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d028      	beq.n	8002144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d121      	bne.n	8002144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d11a      	bne.n	8002144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002114:	4013      	ands	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800211a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800211c:	4293      	cmp	r3, r2
 800211e:	d111      	bne.n	8002144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	085b      	lsrs	r3, r3, #1
 800212c:	3b01      	subs	r3, #1
 800212e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d107      	bne.n	8002144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800

08002158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0cc      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800216c:	4b68      	ldr	r3, [pc, #416]	; (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d90c      	bls.n	8002194 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b65      	ldr	r3, [pc, #404]	; (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b63      	ldr	r3, [pc, #396]	; (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0b8      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d020      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021ac:	4b59      	ldr	r3, [pc, #356]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4a58      	ldr	r2, [pc, #352]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c4:	4b53      	ldr	r3, [pc, #332]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	4a52      	ldr	r2, [pc, #328]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d0:	4b50      	ldr	r3, [pc, #320]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	494d      	ldr	r1, [pc, #308]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d044      	beq.n	8002278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	4b47      	ldr	r3, [pc, #284]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d119      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e07f      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d003      	beq.n	8002216 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002212:	2b03      	cmp	r3, #3
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002216:	4b3f      	ldr	r3, [pc, #252]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e06f      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002226:	4b3b      	ldr	r3, [pc, #236]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e067      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002236:	4b37      	ldr	r3, [pc, #220]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f023 0203 	bic.w	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4934      	ldr	r1, [pc, #208]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	4313      	orrs	r3, r2
 8002246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002248:	f7fe ff52 	bl	80010f0 <HAL_GetTick>
 800224c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	e00a      	b.n	8002266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002250:	f7fe ff4e 	bl	80010f0 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f241 3288 	movw	r2, #5000	; 0x1388
 800225e:	4293      	cmp	r3, r2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e04f      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002266:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 020c 	and.w	r2, r3, #12
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	429a      	cmp	r2, r3
 8002276:	d1eb      	bne.n	8002250 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002278:	4b25      	ldr	r3, [pc, #148]	; (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d20c      	bcs.n	80022a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e032      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4916      	ldr	r1, [pc, #88]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ca:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	490e      	ldr	r1, [pc, #56]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022de:	f000 f821 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 80022e2:	4602      	mov	r2, r0
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	490a      	ldr	r1, [pc, #40]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	5ccb      	ldrb	r3, [r1, r3]
 80022f2:	fa22 f303 	lsr.w	r3, r2, r3
 80022f6:	4a09      	ldr	r2, [pc, #36]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe feb2 	bl	8001068 <HAL_InitTick>

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40023c00 	.word	0x40023c00
 8002314:	40023800 	.word	0x40023800
 8002318:	08003990 	.word	0x08003990
 800231c:	20000000 	.word	0x20000000
 8002320:	20000004 	.word	0x20000004

08002324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002328:	b090      	sub	sp, #64	; 0x40
 800232a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
 8002330:	2300      	movs	r3, #0
 8002332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002334:	2300      	movs	r3, #0
 8002336:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800233c:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	d00d      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x40>
 8002348:	2b08      	cmp	r3, #8
 800234a:	f200 80a1 	bhi.w	8002490 <HAL_RCC_GetSysClockFreq+0x16c>
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x34>
 8002352:	2b04      	cmp	r3, #4
 8002354:	d003      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0x3a>
 8002356:	e09b      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002358:	4b53      	ldr	r3, [pc, #332]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800235a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800235c:	e09b      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800235e:	4b53      	ldr	r3, [pc, #332]	; (80024ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002360:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002362:	e098      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002364:	4b4f      	ldr	r3, [pc, #316]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800236c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800236e:	4b4d      	ldr	r3, [pc, #308]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d028      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800237a:	4b4a      	ldr	r3, [pc, #296]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	099b      	lsrs	r3, r3, #6
 8002380:	2200      	movs	r2, #0
 8002382:	623b      	str	r3, [r7, #32]
 8002384:	627a      	str	r2, [r7, #36]	; 0x24
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800238c:	2100      	movs	r1, #0
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002390:	fb03 f201 	mul.w	r2, r3, r1
 8002394:	2300      	movs	r3, #0
 8002396:	fb00 f303 	mul.w	r3, r0, r3
 800239a:	4413      	add	r3, r2
 800239c:	4a43      	ldr	r2, [pc, #268]	; (80024ac <HAL_RCC_GetSysClockFreq+0x188>)
 800239e:	fba0 1202 	umull	r1, r2, r0, r2
 80023a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023a4:	460a      	mov	r2, r1
 80023a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80023a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023aa:	4413      	add	r3, r2
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b0:	2200      	movs	r2, #0
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	61fa      	str	r2, [r7, #28]
 80023b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023be:	f7fd ff03 	bl	80001c8 <__aeabi_uldivmod>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4613      	mov	r3, r2
 80023c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ca:	e053      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023cc:	4b35      	ldr	r3, [pc, #212]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	099b      	lsrs	r3, r3, #6
 80023d2:	2200      	movs	r2, #0
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	617a      	str	r2, [r7, #20]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023de:	f04f 0b00 	mov.w	fp, #0
 80023e2:	4652      	mov	r2, sl
 80023e4:	465b      	mov	r3, fp
 80023e6:	f04f 0000 	mov.w	r0, #0
 80023ea:	f04f 0100 	mov.w	r1, #0
 80023ee:	0159      	lsls	r1, r3, #5
 80023f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023f4:	0150      	lsls	r0, r2, #5
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	ebb2 080a 	subs.w	r8, r2, sl
 80023fe:	eb63 090b 	sbc.w	r9, r3, fp
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800240e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002412:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002416:	ebb2 0408 	subs.w	r4, r2, r8
 800241a:	eb63 0509 	sbc.w	r5, r3, r9
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	00eb      	lsls	r3, r5, #3
 8002428:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800242c:	00e2      	lsls	r2, r4, #3
 800242e:	4614      	mov	r4, r2
 8002430:	461d      	mov	r5, r3
 8002432:	eb14 030a 	adds.w	r3, r4, sl
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	eb45 030b 	adc.w	r3, r5, fp
 800243c:	607b      	str	r3, [r7, #4]
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	e9d7 4500 	ldrd	r4, r5, [r7]
 800244a:	4629      	mov	r1, r5
 800244c:	028b      	lsls	r3, r1, #10
 800244e:	4621      	mov	r1, r4
 8002450:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002454:	4621      	mov	r1, r4
 8002456:	028a      	lsls	r2, r1, #10
 8002458:	4610      	mov	r0, r2
 800245a:	4619      	mov	r1, r3
 800245c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245e:	2200      	movs	r2, #0
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	60fa      	str	r2, [r7, #12]
 8002464:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002468:	f7fd feae 	bl	80001c8 <__aeabi_uldivmod>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4613      	mov	r3, r2
 8002472:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	0c1b      	lsrs	r3, r3, #16
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	3301      	adds	r3, #1
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002484:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800248e:	e002      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002498:	4618      	mov	r0, r3
 800249a:	3740      	adds	r7, #64	; 0x40
 800249c:	46bd      	mov	sp, r7
 800249e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800
 80024a8:	00f42400 	.word	0x00f42400
 80024ac:	017d7840 	.word	0x017d7840

080024b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024b6:	681b      	ldr	r3, [r3, #0]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000000 	.word	0x20000000

080024c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024cc:	f7ff fff0 	bl	80024b0 <HAL_RCC_GetHCLKFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	0a9b      	lsrs	r3, r3, #10
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	4903      	ldr	r1, [pc, #12]	; (80024ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80024de:	5ccb      	ldrb	r3, [r1, r3]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40023800 	.word	0x40023800
 80024ec:	080039a0 	.word	0x080039a0

080024f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024f4:	f7ff ffdc 	bl	80024b0 <HAL_RCC_GetHCLKFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	0b5b      	lsrs	r3, r3, #13
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4903      	ldr	r1, [pc, #12]	; (8002514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002506:	5ccb      	ldrb	r3, [r1, r3]
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40023800 	.word	0x40023800
 8002514:	080039a0 	.word	0x080039a0

08002518 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e03f      	b.n	80025aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7fe fc78 	bl	8000e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2224      	movs	r2, #36	; 0x24
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800255a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 fe1d 	bl	800319c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002570:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002580:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002590:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b08a      	sub	sp, #40	; 0x28
 80025b6:	af02      	add	r7, sp, #8
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	603b      	str	r3, [r7, #0]
 80025be:	4613      	mov	r3, r2
 80025c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d17c      	bne.n	80026cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_UART_Transmit+0x2c>
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e075      	b.n	80026ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_UART_Transmit+0x3e>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e06e      	b.n	80026ce <HAL_UART_Transmit+0x11c>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2221      	movs	r2, #33	; 0x21
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002606:	f7fe fd73 	bl	80010f0 <HAL_GetTick>
 800260a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	88fa      	ldrh	r2, [r7, #6]
 8002610:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	88fa      	ldrh	r2, [r7, #6]
 8002616:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002620:	d108      	bne.n	8002634 <HAL_UART_Transmit+0x82>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d104      	bne.n	8002634 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	e003      	b.n	800263c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002644:	e02a      	b.n	800269c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2200      	movs	r2, #0
 800264e:	2180      	movs	r1, #128	; 0x80
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 fb9b 	bl	8002d8c <UART_WaitOnFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e036      	b.n	80026ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10b      	bne.n	800267e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002674:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	3302      	adds	r3, #2
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	e007      	b.n	800268e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	781a      	ldrb	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	3301      	adds	r3, #1
 800268c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1cf      	bne.n	8002646 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2200      	movs	r2, #0
 80026ae:	2140      	movs	r1, #64	; 0x40
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 fb6b 	bl	8002d8c <UART_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e006      	b.n	80026ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b08a      	sub	sp, #40	; 0x28
 80026da:	af02      	add	r7, sp, #8
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	4613      	mov	r3, r2
 80026e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	f040 808c 	bne.w	8002810 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <HAL_UART_Receive+0x2e>
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e084      	b.n	8002812 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_UART_Receive+0x40>
 8002712:	2302      	movs	r3, #2
 8002714:	e07d      	b.n	8002812 <HAL_UART_Receive+0x13c>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2222      	movs	r2, #34	; 0x22
 8002728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002732:	f7fe fcdd 	bl	80010f0 <HAL_GetTick>
 8002736:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	88fa      	ldrh	r2, [r7, #6]
 800273c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	88fa      	ldrh	r2, [r7, #6]
 8002742:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274c:	d108      	bne.n	8002760 <HAL_UART_Receive+0x8a>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d104      	bne.n	8002760 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	e003      	b.n	8002768 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002770:	e043      	b.n	80027fa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2200      	movs	r2, #0
 800277a:	2120      	movs	r1, #32
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fb05 	bl	8002d8c <UART_WaitOnFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e042      	b.n	8002812 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10c      	bne.n	80027ac <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	b29b      	uxth	r3, r3
 800279a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800279e:	b29a      	uxth	r2, r3
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	3302      	adds	r3, #2
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	e01f      	b.n	80027ec <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b4:	d007      	beq.n	80027c6 <HAL_UART_Receive+0xf0>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10a      	bne.n	80027d4 <HAL_UART_Receive+0xfe>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	701a      	strb	r2, [r3, #0]
 80027d2:	e008      	b.n	80027e6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3301      	adds	r3, #1
 80027ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1b6      	bne.n	8002772 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	e000      	b.n	8002812 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002810:	2302      	movs	r3, #2
  }
}
 8002812:	4618      	mov	r0, r3
 8002814:	3720      	adds	r7, #32
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b0ba      	sub	sp, #232	; 0xe8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002848:	2300      	movs	r3, #0
 800284a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800284e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800285a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10f      	bne.n	8002882 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <HAL_UART_IRQHandler+0x66>
 800286e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fbd3 	bl	8003026 <UART_Receive_IT>
      return;
 8002880:	e256      	b.n	8002d30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002882:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80de 	beq.w	8002a48 <HAL_UART_IRQHandler+0x22c>
 800288c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d106      	bne.n	80028a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800289c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80d1 	beq.w	8002a48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00b      	beq.n	80028ca <HAL_UART_IRQHandler+0xae>
 80028b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <HAL_UART_IRQHandler+0xd2>
 80028d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f043 0202 	orr.w	r2, r3, #2
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <HAL_UART_IRQHandler+0xf6>
 80028fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f043 0204 	orr.w	r2, r3, #4
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d011      	beq.n	8002942 <HAL_UART_IRQHandler+0x126>
 800291e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d105      	bne.n	8002936 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800292a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d005      	beq.n	8002942 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f043 0208 	orr.w	r2, r3, #8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 81ed 	beq.w	8002d26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800294c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_UART_IRQHandler+0x14e>
 8002958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fb5e 	bl	8003026 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d103      	bne.n	8002996 <HAL_UART_IRQHandler+0x17a>
 800298e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d04f      	beq.n	8002a36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fa66 	bl	8002e68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	2b40      	cmp	r3, #64	; 0x40
 80029a8:	d141      	bne.n	8002a2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3314      	adds	r3, #20
 80029b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029b8:	e853 3f00 	ldrex	r3, [r3]
 80029bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3314      	adds	r3, #20
 80029d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029e6:	e841 2300 	strex	r3, r2, [r1]
 80029ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1d9      	bne.n	80029aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d013      	beq.n	8002a26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a02:	4a7d      	ldr	r2, [pc, #500]	; (8002bf8 <HAL_UART_IRQHandler+0x3dc>)
 8002a04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fd3b 	bl	8001486 <HAL_DMA_Abort_IT>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d016      	beq.n	8002a44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a20:	4610      	mov	r0, r2
 8002a22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a24:	e00e      	b.n	8002a44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f99a 	bl	8002d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2c:	e00a      	b.n	8002a44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f996 	bl	8002d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a34:	e006      	b.n	8002a44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f992 	bl	8002d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a42:	e170      	b.n	8002d26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a44:	bf00      	nop
    return;
 8002a46:	e16e      	b.n	8002d26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	f040 814a 	bne.w	8002ce6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 8143 	beq.w	8002ce6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 813c 	beq.w	8002ce6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	2b40      	cmp	r3, #64	; 0x40
 8002a90:	f040 80b4 	bne.w	8002bfc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002aa0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8140 	beq.w	8002d2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	f080 8139 	bcs.w	8002d2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002abe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aca:	f000 8088 	beq.w	8002bde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	330c      	adds	r3, #12
 8002ad4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002adc:	e853 3f00 	ldrex	r3, [r3]
 8002ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ae4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	330c      	adds	r3, #12
 8002af6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002afa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002afe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b0a:	e841 2300 	strex	r3, r2, [r1]
 8002b0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1d9      	bne.n	8002ace <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3314      	adds	r3, #20
 8002b20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b24:	e853 3f00 	ldrex	r3, [r3]
 8002b28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b2c:	f023 0301 	bic.w	r3, r3, #1
 8002b30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3314      	adds	r3, #20
 8002b3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e1      	bne.n	8002b1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3314      	adds	r3, #20
 8002b5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b60:	e853 3f00 	ldrex	r3, [r3]
 8002b64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3314      	adds	r3, #20
 8002b76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b82:	e841 2300 	strex	r3, r2, [r1]
 8002b86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1e3      	bne.n	8002b56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	330c      	adds	r3, #12
 8002ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba6:	e853 3f00 	ldrex	r3, [r3]
 8002baa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bae:	f023 0310 	bic.w	r3, r3, #16
 8002bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	330c      	adds	r3, #12
 8002bbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002bc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bc8:	e841 2300 	strex	r3, r2, [r1]
 8002bcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e3      	bne.n	8002b9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe fbe4 	bl	80013a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	4619      	mov	r1, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f8c0 	bl	8002d74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bf4:	e099      	b.n	8002d2a <HAL_UART_IRQHandler+0x50e>
 8002bf6:	bf00      	nop
 8002bf8:	08002f2f 	.word	0x08002f2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 808b 	beq.w	8002d2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8086 	beq.w	8002d2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	330c      	adds	r3, #12
 8002c28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2c:	e853 3f00 	ldrex	r3, [r3]
 8002c30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c46:	647a      	str	r2, [r7, #68]	; 0x44
 8002c48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c4e:	e841 2300 	strex	r3, r2, [r1]
 8002c52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1e3      	bne.n	8002c22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3314      	adds	r3, #20
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	e853 3f00 	ldrex	r3, [r3]
 8002c68:	623b      	str	r3, [r7, #32]
   return(result);
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	f023 0301 	bic.w	r3, r3, #1
 8002c70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3314      	adds	r3, #20
 8002c7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c7e:	633a      	str	r2, [r7, #48]	; 0x30
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c86:	e841 2300 	strex	r3, r2, [r1]
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1e3      	bne.n	8002c5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	330c      	adds	r3, #12
 8002ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	e853 3f00 	ldrex	r3, [r3]
 8002cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0310 	bic.w	r3, r3, #16
 8002cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	330c      	adds	r3, #12
 8002cc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002cc4:	61fa      	str	r2, [r7, #28]
 8002cc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc8:	69b9      	ldr	r1, [r7, #24]
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	e841 2300 	strex	r3, r2, [r1]
 8002cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1e3      	bne.n	8002ca0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f848 	bl	8002d74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ce4:	e023      	b.n	8002d2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d009      	beq.n	8002d06 <HAL_UART_IRQHandler+0x4ea>
 8002cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f929 	bl	8002f56 <UART_Transmit_IT>
    return;
 8002d04:	e014      	b.n	8002d30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00e      	beq.n	8002d30 <HAL_UART_IRQHandler+0x514>
 8002d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d008      	beq.n	8002d30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f969 	bl	8002ff6 <UART_EndTransmit_IT>
    return;
 8002d24:	e004      	b.n	8002d30 <HAL_UART_IRQHandler+0x514>
    return;
 8002d26:	bf00      	nop
 8002d28:	e002      	b.n	8002d30 <HAL_UART_IRQHandler+0x514>
      return;
 8002d2a:	bf00      	nop
 8002d2c:	e000      	b.n	8002d30 <HAL_UART_IRQHandler+0x514>
      return;
 8002d2e:	bf00      	nop
  }
}
 8002d30:	37e8      	adds	r7, #232	; 0xe8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop

08002d38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b090      	sub	sp, #64	; 0x40
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d9c:	e050      	b.n	8002e40 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d04c      	beq.n	8002e40 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d007      	beq.n	8002dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8002dac:	f7fe f9a0 	bl	80010f0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d241      	bcs.n	8002e40 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	330c      	adds	r3, #12
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc6:	e853 3f00 	ldrex	r3, [r3]
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	330c      	adds	r3, #12
 8002dda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ddc:	637a      	str	r2, [r7, #52]	; 0x34
 8002dde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002de4:	e841 2300 	strex	r3, r2, [r1]
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e5      	bne.n	8002dbc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3314      	adds	r3, #20
 8002df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	e853 3f00 	ldrex	r3, [r3]
 8002dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f023 0301 	bic.w	r3, r3, #1
 8002e06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3314      	adds	r3, #20
 8002e0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e10:	623a      	str	r2, [r7, #32]
 8002e12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	69f9      	ldr	r1, [r7, #28]
 8002e16:	6a3a      	ldr	r2, [r7, #32]
 8002e18:	e841 2300 	strex	r3, r2, [r1]
 8002e1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e5      	bne.n	8002df0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e00f      	b.n	8002e60 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d09f      	beq.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3740      	adds	r7, #64	; 0x40
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b095      	sub	sp, #84	; 0x54
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7a:	e853 3f00 	ldrex	r3, [r3]
 8002e7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	330c      	adds	r3, #12
 8002e8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e90:	643a      	str	r2, [r7, #64]	; 0x40
 8002e92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e98:	e841 2300 	strex	r3, r2, [r1]
 8002e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e5      	bne.n	8002e70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3314      	adds	r3, #20
 8002eaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	e853 3f00 	ldrex	r3, [r3]
 8002eb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3314      	adds	r3, #20
 8002ec2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ec4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e5      	bne.n	8002ea4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d119      	bne.n	8002f14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	e853 3f00 	ldrex	r3, [r3]
 8002eee:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f023 0310 	bic.w	r3, r3, #16
 8002ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	330c      	adds	r3, #12
 8002efe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f00:	61ba      	str	r2, [r7, #24]
 8002f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f04:	6979      	ldr	r1, [r7, #20]
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	e841 2300 	strex	r3, r2, [r1]
 8002f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e5      	bne.n	8002ee0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f22:	bf00      	nop
 8002f24:	3754      	adds	r7, #84	; 0x54
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f7ff ff09 	bl	8002d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b085      	sub	sp, #20
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b21      	cmp	r3, #33	; 0x21
 8002f68:	d13e      	bne.n	8002fe8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f72:	d114      	bne.n	8002f9e <UART_Transmit_IT+0x48>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d110      	bne.n	8002f9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	1c9a      	adds	r2, r3, #2
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	621a      	str	r2, [r3, #32]
 8002f9c:	e008      	b.n	8002fb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	1c59      	adds	r1, r3, #1
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6211      	str	r1, [r2, #32]
 8002fa8:	781a      	ldrb	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10f      	bne.n	8002fe4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fe2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e000      	b.n	8002fea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fe8:	2302      	movs	r3, #2
  }
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800300c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff fe8e 	bl	8002d38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b08c      	sub	sp, #48	; 0x30
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b22      	cmp	r3, #34	; 0x22
 8003038:	f040 80ab 	bne.w	8003192 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003044:	d117      	bne.n	8003076 <UART_Receive_IT+0x50>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d113      	bne.n	8003076 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800304e:	2300      	movs	r3, #0
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	b29b      	uxth	r3, r3
 8003060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003064:	b29a      	uxth	r2, r3
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	1c9a      	adds	r2, r3, #2
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28
 8003074:	e026      	b.n	80030c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800307c:	2300      	movs	r3, #0
 800307e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003088:	d007      	beq.n	800309a <UART_Receive_IT+0x74>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10a      	bne.n	80030a8 <UART_Receive_IT+0x82>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	e008      	b.n	80030ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4619      	mov	r1, r3
 80030d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d15a      	bne.n	800318e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0220 	bic.w	r2, r2, #32
 80030e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	2b01      	cmp	r3, #1
 8003116:	d135      	bne.n	8003184 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	e853 3f00 	ldrex	r3, [r3]
 800312c:	613b      	str	r3, [r7, #16]
   return(result);
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f023 0310 	bic.w	r3, r3, #16
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	330c      	adds	r3, #12
 800313c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313e:	623a      	str	r2, [r7, #32]
 8003140:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003142:	69f9      	ldr	r1, [r7, #28]
 8003144:	6a3a      	ldr	r2, [r7, #32]
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	61bb      	str	r3, [r7, #24]
   return(result);
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e5      	bne.n	800311e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b10      	cmp	r3, #16
 800315e:	d10a      	bne.n	8003176 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800317a:	4619      	mov	r1, r3
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff fdf9 	bl	8002d74 <HAL_UARTEx_RxEventCallback>
 8003182:	e002      	b.n	800318a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff fde1 	bl	8002d4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	e002      	b.n	8003194 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	e000      	b.n	8003194 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
  }
}
 8003194:	4618      	mov	r0, r3
 8003196:	3730      	adds	r7, #48	; 0x30
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800319c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031a0:	b0c0      	sub	sp, #256	; 0x100
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b8:	68d9      	ldr	r1, [r3, #12]
 80031ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	ea40 0301 	orr.w	r3, r0, r1
 80031c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	431a      	orrs	r2, r3
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031f4:	f021 010c 	bic.w	r1, r1, #12
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003202:	430b      	orrs	r3, r1
 8003204:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003216:	6999      	ldr	r1, [r3, #24]
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	ea40 0301 	orr.w	r3, r0, r1
 8003222:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	4b8f      	ldr	r3, [pc, #572]	; (8003468 <UART_SetConfig+0x2cc>)
 800322c:	429a      	cmp	r2, r3
 800322e:	d005      	beq.n	800323c <UART_SetConfig+0xa0>
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4b8d      	ldr	r3, [pc, #564]	; (800346c <UART_SetConfig+0x2d0>)
 8003238:	429a      	cmp	r2, r3
 800323a:	d104      	bne.n	8003246 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800323c:	f7ff f958 	bl	80024f0 <HAL_RCC_GetPCLK2Freq>
 8003240:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003244:	e003      	b.n	800324e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003246:	f7ff f93f 	bl	80024c8 <HAL_RCC_GetPCLK1Freq>
 800324a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800324e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003258:	f040 810c 	bne.w	8003474 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800325c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003260:	2200      	movs	r2, #0
 8003262:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003266:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800326a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800326e:	4622      	mov	r2, r4
 8003270:	462b      	mov	r3, r5
 8003272:	1891      	adds	r1, r2, r2
 8003274:	65b9      	str	r1, [r7, #88]	; 0x58
 8003276:	415b      	adcs	r3, r3
 8003278:	65fb      	str	r3, [r7, #92]	; 0x5c
 800327a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800327e:	4621      	mov	r1, r4
 8003280:	eb12 0801 	adds.w	r8, r2, r1
 8003284:	4629      	mov	r1, r5
 8003286:	eb43 0901 	adc.w	r9, r3, r1
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003296:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800329a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800329e:	4690      	mov	r8, r2
 80032a0:	4699      	mov	r9, r3
 80032a2:	4623      	mov	r3, r4
 80032a4:	eb18 0303 	adds.w	r3, r8, r3
 80032a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032ac:	462b      	mov	r3, r5
 80032ae:	eb49 0303 	adc.w	r3, r9, r3
 80032b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032ca:	460b      	mov	r3, r1
 80032cc:	18db      	adds	r3, r3, r3
 80032ce:	653b      	str	r3, [r7, #80]	; 0x50
 80032d0:	4613      	mov	r3, r2
 80032d2:	eb42 0303 	adc.w	r3, r2, r3
 80032d6:	657b      	str	r3, [r7, #84]	; 0x54
 80032d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032e0:	f7fc ff72 	bl	80001c8 <__aeabi_uldivmod>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4b61      	ldr	r3, [pc, #388]	; (8003470 <UART_SetConfig+0x2d4>)
 80032ea:	fba3 2302 	umull	r2, r3, r3, r2
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	011c      	lsls	r4, r3, #4
 80032f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032f6:	2200      	movs	r2, #0
 80032f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003300:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003304:	4642      	mov	r2, r8
 8003306:	464b      	mov	r3, r9
 8003308:	1891      	adds	r1, r2, r2
 800330a:	64b9      	str	r1, [r7, #72]	; 0x48
 800330c:	415b      	adcs	r3, r3
 800330e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003310:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003314:	4641      	mov	r1, r8
 8003316:	eb12 0a01 	adds.w	sl, r2, r1
 800331a:	4649      	mov	r1, r9
 800331c:	eb43 0b01 	adc.w	fp, r3, r1
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800332c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003334:	4692      	mov	sl, r2
 8003336:	469b      	mov	fp, r3
 8003338:	4643      	mov	r3, r8
 800333a:	eb1a 0303 	adds.w	r3, sl, r3
 800333e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003342:	464b      	mov	r3, r9
 8003344:	eb4b 0303 	adc.w	r3, fp, r3
 8003348:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003358:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800335c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003360:	460b      	mov	r3, r1
 8003362:	18db      	adds	r3, r3, r3
 8003364:	643b      	str	r3, [r7, #64]	; 0x40
 8003366:	4613      	mov	r3, r2
 8003368:	eb42 0303 	adc.w	r3, r2, r3
 800336c:	647b      	str	r3, [r7, #68]	; 0x44
 800336e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003372:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003376:	f7fc ff27 	bl	80001c8 <__aeabi_uldivmod>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4611      	mov	r1, r2
 8003380:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <UART_SetConfig+0x2d4>)
 8003382:	fba3 2301 	umull	r2, r3, r3, r1
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	2264      	movs	r2, #100	; 0x64
 800338a:	fb02 f303 	mul.w	r3, r2, r3
 800338e:	1acb      	subs	r3, r1, r3
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003396:	4b36      	ldr	r3, [pc, #216]	; (8003470 <UART_SetConfig+0x2d4>)
 8003398:	fba3 2302 	umull	r2, r3, r3, r2
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033a4:	441c      	add	r4, r3
 80033a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033b8:	4642      	mov	r2, r8
 80033ba:	464b      	mov	r3, r9
 80033bc:	1891      	adds	r1, r2, r2
 80033be:	63b9      	str	r1, [r7, #56]	; 0x38
 80033c0:	415b      	adcs	r3, r3
 80033c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033c8:	4641      	mov	r1, r8
 80033ca:	1851      	adds	r1, r2, r1
 80033cc:	6339      	str	r1, [r7, #48]	; 0x30
 80033ce:	4649      	mov	r1, r9
 80033d0:	414b      	adcs	r3, r1
 80033d2:	637b      	str	r3, [r7, #52]	; 0x34
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033e0:	4659      	mov	r1, fp
 80033e2:	00cb      	lsls	r3, r1, #3
 80033e4:	4651      	mov	r1, sl
 80033e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ea:	4651      	mov	r1, sl
 80033ec:	00ca      	lsls	r2, r1, #3
 80033ee:	4610      	mov	r0, r2
 80033f0:	4619      	mov	r1, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	4642      	mov	r2, r8
 80033f6:	189b      	adds	r3, r3, r2
 80033f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033fc:	464b      	mov	r3, r9
 80033fe:	460a      	mov	r2, r1
 8003400:	eb42 0303 	adc.w	r3, r2, r3
 8003404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003414:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003418:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800341c:	460b      	mov	r3, r1
 800341e:	18db      	adds	r3, r3, r3
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
 8003422:	4613      	mov	r3, r2
 8003424:	eb42 0303 	adc.w	r3, r2, r3
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800342a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800342e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003432:	f7fc fec9 	bl	80001c8 <__aeabi_uldivmod>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4b0d      	ldr	r3, [pc, #52]	; (8003470 <UART_SetConfig+0x2d4>)
 800343c:	fba3 1302 	umull	r1, r3, r3, r2
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	2164      	movs	r1, #100	; 0x64
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	3332      	adds	r3, #50	; 0x32
 800344e:	4a08      	ldr	r2, [pc, #32]	; (8003470 <UART_SetConfig+0x2d4>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	f003 0207 	and.w	r2, r3, #7
 800345a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4422      	add	r2, r4
 8003462:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003464:	e105      	b.n	8003672 <UART_SetConfig+0x4d6>
 8003466:	bf00      	nop
 8003468:	40011000 	.word	0x40011000
 800346c:	40011400 	.word	0x40011400
 8003470:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003478:	2200      	movs	r2, #0
 800347a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800347e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003482:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003486:	4642      	mov	r2, r8
 8003488:	464b      	mov	r3, r9
 800348a:	1891      	adds	r1, r2, r2
 800348c:	6239      	str	r1, [r7, #32]
 800348e:	415b      	adcs	r3, r3
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
 8003492:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003496:	4641      	mov	r1, r8
 8003498:	1854      	adds	r4, r2, r1
 800349a:	4649      	mov	r1, r9
 800349c:	eb43 0501 	adc.w	r5, r3, r1
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	00eb      	lsls	r3, r5, #3
 80034aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ae:	00e2      	lsls	r2, r4, #3
 80034b0:	4614      	mov	r4, r2
 80034b2:	461d      	mov	r5, r3
 80034b4:	4643      	mov	r3, r8
 80034b6:	18e3      	adds	r3, r4, r3
 80034b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034bc:	464b      	mov	r3, r9
 80034be:	eb45 0303 	adc.w	r3, r5, r3
 80034c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034e2:	4629      	mov	r1, r5
 80034e4:	008b      	lsls	r3, r1, #2
 80034e6:	4621      	mov	r1, r4
 80034e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ec:	4621      	mov	r1, r4
 80034ee:	008a      	lsls	r2, r1, #2
 80034f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034f4:	f7fc fe68 	bl	80001c8 <__aeabi_uldivmod>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4b60      	ldr	r3, [pc, #384]	; (8003680 <UART_SetConfig+0x4e4>)
 80034fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	011c      	lsls	r4, r3, #4
 8003506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800350a:	2200      	movs	r2, #0
 800350c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003510:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003514:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003518:	4642      	mov	r2, r8
 800351a:	464b      	mov	r3, r9
 800351c:	1891      	adds	r1, r2, r2
 800351e:	61b9      	str	r1, [r7, #24]
 8003520:	415b      	adcs	r3, r3
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003528:	4641      	mov	r1, r8
 800352a:	1851      	adds	r1, r2, r1
 800352c:	6139      	str	r1, [r7, #16]
 800352e:	4649      	mov	r1, r9
 8003530:	414b      	adcs	r3, r1
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003540:	4659      	mov	r1, fp
 8003542:	00cb      	lsls	r3, r1, #3
 8003544:	4651      	mov	r1, sl
 8003546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800354a:	4651      	mov	r1, sl
 800354c:	00ca      	lsls	r2, r1, #3
 800354e:	4610      	mov	r0, r2
 8003550:	4619      	mov	r1, r3
 8003552:	4603      	mov	r3, r0
 8003554:	4642      	mov	r2, r8
 8003556:	189b      	adds	r3, r3, r2
 8003558:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800355c:	464b      	mov	r3, r9
 800355e:	460a      	mov	r2, r1
 8003560:	eb42 0303 	adc.w	r3, r2, r3
 8003564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	67bb      	str	r3, [r7, #120]	; 0x78
 8003572:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003580:	4649      	mov	r1, r9
 8003582:	008b      	lsls	r3, r1, #2
 8003584:	4641      	mov	r1, r8
 8003586:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800358a:	4641      	mov	r1, r8
 800358c:	008a      	lsls	r2, r1, #2
 800358e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003592:	f7fc fe19 	bl	80001c8 <__aeabi_uldivmod>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4b39      	ldr	r3, [pc, #228]	; (8003680 <UART_SetConfig+0x4e4>)
 800359c:	fba3 1302 	umull	r1, r3, r3, r2
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	2164      	movs	r1, #100	; 0x64
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	3332      	adds	r3, #50	; 0x32
 80035ae:	4a34      	ldr	r2, [pc, #208]	; (8003680 <UART_SetConfig+0x4e4>)
 80035b0:	fba2 2303 	umull	r2, r3, r2, r3
 80035b4:	095b      	lsrs	r3, r3, #5
 80035b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ba:	441c      	add	r4, r3
 80035bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035c0:	2200      	movs	r2, #0
 80035c2:	673b      	str	r3, [r7, #112]	; 0x70
 80035c4:	677a      	str	r2, [r7, #116]	; 0x74
 80035c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035ca:	4642      	mov	r2, r8
 80035cc:	464b      	mov	r3, r9
 80035ce:	1891      	adds	r1, r2, r2
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	415b      	adcs	r3, r3
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035da:	4641      	mov	r1, r8
 80035dc:	1851      	adds	r1, r2, r1
 80035de:	6039      	str	r1, [r7, #0]
 80035e0:	4649      	mov	r1, r9
 80035e2:	414b      	adcs	r3, r1
 80035e4:	607b      	str	r3, [r7, #4]
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035f2:	4659      	mov	r1, fp
 80035f4:	00cb      	lsls	r3, r1, #3
 80035f6:	4651      	mov	r1, sl
 80035f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035fc:	4651      	mov	r1, sl
 80035fe:	00ca      	lsls	r2, r1, #3
 8003600:	4610      	mov	r0, r2
 8003602:	4619      	mov	r1, r3
 8003604:	4603      	mov	r3, r0
 8003606:	4642      	mov	r2, r8
 8003608:	189b      	adds	r3, r3, r2
 800360a:	66bb      	str	r3, [r7, #104]	; 0x68
 800360c:	464b      	mov	r3, r9
 800360e:	460a      	mov	r2, r1
 8003610:	eb42 0303 	adc.w	r3, r2, r3
 8003614:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	663b      	str	r3, [r7, #96]	; 0x60
 8003620:	667a      	str	r2, [r7, #100]	; 0x64
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800362e:	4649      	mov	r1, r9
 8003630:	008b      	lsls	r3, r1, #2
 8003632:	4641      	mov	r1, r8
 8003634:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003638:	4641      	mov	r1, r8
 800363a:	008a      	lsls	r2, r1, #2
 800363c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003640:	f7fc fdc2 	bl	80001c8 <__aeabi_uldivmod>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <UART_SetConfig+0x4e4>)
 800364a:	fba3 1302 	umull	r1, r3, r3, r2
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	2164      	movs	r1, #100	; 0x64
 8003652:	fb01 f303 	mul.w	r3, r1, r3
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	3332      	adds	r3, #50	; 0x32
 800365c:	4a08      	ldr	r2, [pc, #32]	; (8003680 <UART_SetConfig+0x4e4>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	f003 020f 	and.w	r2, r3, #15
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4422      	add	r2, r4
 8003670:	609a      	str	r2, [r3, #8]
}
 8003672:	bf00      	nop
 8003674:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003678:	46bd      	mov	sp, r7
 800367a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800367e:	bf00      	nop
 8003680:	51eb851f 	.word	0x51eb851f

08003684 <__errno>:
 8003684:	4b01      	ldr	r3, [pc, #4]	; (800368c <__errno+0x8>)
 8003686:	6818      	ldr	r0, [r3, #0]
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	2000000c 	.word	0x2000000c

08003690 <__libc_init_array>:
 8003690:	b570      	push	{r4, r5, r6, lr}
 8003692:	4d0d      	ldr	r5, [pc, #52]	; (80036c8 <__libc_init_array+0x38>)
 8003694:	4c0d      	ldr	r4, [pc, #52]	; (80036cc <__libc_init_array+0x3c>)
 8003696:	1b64      	subs	r4, r4, r5
 8003698:	10a4      	asrs	r4, r4, #2
 800369a:	2600      	movs	r6, #0
 800369c:	42a6      	cmp	r6, r4
 800369e:	d109      	bne.n	80036b4 <__libc_init_array+0x24>
 80036a0:	4d0b      	ldr	r5, [pc, #44]	; (80036d0 <__libc_init_array+0x40>)
 80036a2:	4c0c      	ldr	r4, [pc, #48]	; (80036d4 <__libc_init_array+0x44>)
 80036a4:	f000 f92e 	bl	8003904 <_init>
 80036a8:	1b64      	subs	r4, r4, r5
 80036aa:	10a4      	asrs	r4, r4, #2
 80036ac:	2600      	movs	r6, #0
 80036ae:	42a6      	cmp	r6, r4
 80036b0:	d105      	bne.n	80036be <__libc_init_array+0x2e>
 80036b2:	bd70      	pop	{r4, r5, r6, pc}
 80036b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b8:	4798      	blx	r3
 80036ba:	3601      	adds	r6, #1
 80036bc:	e7ee      	b.n	800369c <__libc_init_array+0xc>
 80036be:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c2:	4798      	blx	r3
 80036c4:	3601      	adds	r6, #1
 80036c6:	e7f2      	b.n	80036ae <__libc_init_array+0x1e>
 80036c8:	080039b0 	.word	0x080039b0
 80036cc:	080039b0 	.word	0x080039b0
 80036d0:	080039b0 	.word	0x080039b0
 80036d4:	080039b4 	.word	0x080039b4

080036d8 <malloc>:
 80036d8:	4b02      	ldr	r3, [pc, #8]	; (80036e4 <malloc+0xc>)
 80036da:	4601      	mov	r1, r0
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	f000 b87f 	b.w	80037e0 <_malloc_r>
 80036e2:	bf00      	nop
 80036e4:	2000000c 	.word	0x2000000c

080036e8 <free>:
 80036e8:	4b02      	ldr	r3, [pc, #8]	; (80036f4 <free+0xc>)
 80036ea:	4601      	mov	r1, r0
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	f000 b80b 	b.w	8003708 <_free_r>
 80036f2:	bf00      	nop
 80036f4:	2000000c 	.word	0x2000000c

080036f8 <memset>:
 80036f8:	4402      	add	r2, r0
 80036fa:	4603      	mov	r3, r0
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d100      	bne.n	8003702 <memset+0xa>
 8003700:	4770      	bx	lr
 8003702:	f803 1b01 	strb.w	r1, [r3], #1
 8003706:	e7f9      	b.n	80036fc <memset+0x4>

08003708 <_free_r>:
 8003708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800370a:	2900      	cmp	r1, #0
 800370c:	d044      	beq.n	8003798 <_free_r+0x90>
 800370e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003712:	9001      	str	r0, [sp, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	f1a1 0404 	sub.w	r4, r1, #4
 800371a:	bfb8      	it	lt
 800371c:	18e4      	addlt	r4, r4, r3
 800371e:	f000 f8e3 	bl	80038e8 <__malloc_lock>
 8003722:	4a1e      	ldr	r2, [pc, #120]	; (800379c <_free_r+0x94>)
 8003724:	9801      	ldr	r0, [sp, #4]
 8003726:	6813      	ldr	r3, [r2, #0]
 8003728:	b933      	cbnz	r3, 8003738 <_free_r+0x30>
 800372a:	6063      	str	r3, [r4, #4]
 800372c:	6014      	str	r4, [r2, #0]
 800372e:	b003      	add	sp, #12
 8003730:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003734:	f000 b8de 	b.w	80038f4 <__malloc_unlock>
 8003738:	42a3      	cmp	r3, r4
 800373a:	d908      	bls.n	800374e <_free_r+0x46>
 800373c:	6825      	ldr	r5, [r4, #0]
 800373e:	1961      	adds	r1, r4, r5
 8003740:	428b      	cmp	r3, r1
 8003742:	bf01      	itttt	eq
 8003744:	6819      	ldreq	r1, [r3, #0]
 8003746:	685b      	ldreq	r3, [r3, #4]
 8003748:	1949      	addeq	r1, r1, r5
 800374a:	6021      	streq	r1, [r4, #0]
 800374c:	e7ed      	b.n	800372a <_free_r+0x22>
 800374e:	461a      	mov	r2, r3
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	b10b      	cbz	r3, 8003758 <_free_r+0x50>
 8003754:	42a3      	cmp	r3, r4
 8003756:	d9fa      	bls.n	800374e <_free_r+0x46>
 8003758:	6811      	ldr	r1, [r2, #0]
 800375a:	1855      	adds	r5, r2, r1
 800375c:	42a5      	cmp	r5, r4
 800375e:	d10b      	bne.n	8003778 <_free_r+0x70>
 8003760:	6824      	ldr	r4, [r4, #0]
 8003762:	4421      	add	r1, r4
 8003764:	1854      	adds	r4, r2, r1
 8003766:	42a3      	cmp	r3, r4
 8003768:	6011      	str	r1, [r2, #0]
 800376a:	d1e0      	bne.n	800372e <_free_r+0x26>
 800376c:	681c      	ldr	r4, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	6053      	str	r3, [r2, #4]
 8003772:	4421      	add	r1, r4
 8003774:	6011      	str	r1, [r2, #0]
 8003776:	e7da      	b.n	800372e <_free_r+0x26>
 8003778:	d902      	bls.n	8003780 <_free_r+0x78>
 800377a:	230c      	movs	r3, #12
 800377c:	6003      	str	r3, [r0, #0]
 800377e:	e7d6      	b.n	800372e <_free_r+0x26>
 8003780:	6825      	ldr	r5, [r4, #0]
 8003782:	1961      	adds	r1, r4, r5
 8003784:	428b      	cmp	r3, r1
 8003786:	bf04      	itt	eq
 8003788:	6819      	ldreq	r1, [r3, #0]
 800378a:	685b      	ldreq	r3, [r3, #4]
 800378c:	6063      	str	r3, [r4, #4]
 800378e:	bf04      	itt	eq
 8003790:	1949      	addeq	r1, r1, r5
 8003792:	6021      	streq	r1, [r4, #0]
 8003794:	6054      	str	r4, [r2, #4]
 8003796:	e7ca      	b.n	800372e <_free_r+0x26>
 8003798:	b003      	add	sp, #12
 800379a:	bd30      	pop	{r4, r5, pc}
 800379c:	20000100 	.word	0x20000100

080037a0 <sbrk_aligned>:
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	4e0e      	ldr	r6, [pc, #56]	; (80037dc <sbrk_aligned+0x3c>)
 80037a4:	460c      	mov	r4, r1
 80037a6:	6831      	ldr	r1, [r6, #0]
 80037a8:	4605      	mov	r5, r0
 80037aa:	b911      	cbnz	r1, 80037b2 <sbrk_aligned+0x12>
 80037ac:	f000 f88c 	bl	80038c8 <_sbrk_r>
 80037b0:	6030      	str	r0, [r6, #0]
 80037b2:	4621      	mov	r1, r4
 80037b4:	4628      	mov	r0, r5
 80037b6:	f000 f887 	bl	80038c8 <_sbrk_r>
 80037ba:	1c43      	adds	r3, r0, #1
 80037bc:	d00a      	beq.n	80037d4 <sbrk_aligned+0x34>
 80037be:	1cc4      	adds	r4, r0, #3
 80037c0:	f024 0403 	bic.w	r4, r4, #3
 80037c4:	42a0      	cmp	r0, r4
 80037c6:	d007      	beq.n	80037d8 <sbrk_aligned+0x38>
 80037c8:	1a21      	subs	r1, r4, r0
 80037ca:	4628      	mov	r0, r5
 80037cc:	f000 f87c 	bl	80038c8 <_sbrk_r>
 80037d0:	3001      	adds	r0, #1
 80037d2:	d101      	bne.n	80037d8 <sbrk_aligned+0x38>
 80037d4:	f04f 34ff 	mov.w	r4, #4294967295
 80037d8:	4620      	mov	r0, r4
 80037da:	bd70      	pop	{r4, r5, r6, pc}
 80037dc:	20000104 	.word	0x20000104

080037e0 <_malloc_r>:
 80037e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037e4:	1ccd      	adds	r5, r1, #3
 80037e6:	f025 0503 	bic.w	r5, r5, #3
 80037ea:	3508      	adds	r5, #8
 80037ec:	2d0c      	cmp	r5, #12
 80037ee:	bf38      	it	cc
 80037f0:	250c      	movcc	r5, #12
 80037f2:	2d00      	cmp	r5, #0
 80037f4:	4607      	mov	r7, r0
 80037f6:	db01      	blt.n	80037fc <_malloc_r+0x1c>
 80037f8:	42a9      	cmp	r1, r5
 80037fa:	d905      	bls.n	8003808 <_malloc_r+0x28>
 80037fc:	230c      	movs	r3, #12
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	2600      	movs	r6, #0
 8003802:	4630      	mov	r0, r6
 8003804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003808:	4e2e      	ldr	r6, [pc, #184]	; (80038c4 <_malloc_r+0xe4>)
 800380a:	f000 f86d 	bl	80038e8 <__malloc_lock>
 800380e:	6833      	ldr	r3, [r6, #0]
 8003810:	461c      	mov	r4, r3
 8003812:	bb34      	cbnz	r4, 8003862 <_malloc_r+0x82>
 8003814:	4629      	mov	r1, r5
 8003816:	4638      	mov	r0, r7
 8003818:	f7ff ffc2 	bl	80037a0 <sbrk_aligned>
 800381c:	1c43      	adds	r3, r0, #1
 800381e:	4604      	mov	r4, r0
 8003820:	d14d      	bne.n	80038be <_malloc_r+0xde>
 8003822:	6834      	ldr	r4, [r6, #0]
 8003824:	4626      	mov	r6, r4
 8003826:	2e00      	cmp	r6, #0
 8003828:	d140      	bne.n	80038ac <_malloc_r+0xcc>
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	4631      	mov	r1, r6
 800382e:	4638      	mov	r0, r7
 8003830:	eb04 0803 	add.w	r8, r4, r3
 8003834:	f000 f848 	bl	80038c8 <_sbrk_r>
 8003838:	4580      	cmp	r8, r0
 800383a:	d13a      	bne.n	80038b2 <_malloc_r+0xd2>
 800383c:	6821      	ldr	r1, [r4, #0]
 800383e:	3503      	adds	r5, #3
 8003840:	1a6d      	subs	r5, r5, r1
 8003842:	f025 0503 	bic.w	r5, r5, #3
 8003846:	3508      	adds	r5, #8
 8003848:	2d0c      	cmp	r5, #12
 800384a:	bf38      	it	cc
 800384c:	250c      	movcc	r5, #12
 800384e:	4629      	mov	r1, r5
 8003850:	4638      	mov	r0, r7
 8003852:	f7ff ffa5 	bl	80037a0 <sbrk_aligned>
 8003856:	3001      	adds	r0, #1
 8003858:	d02b      	beq.n	80038b2 <_malloc_r+0xd2>
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	442b      	add	r3, r5
 800385e:	6023      	str	r3, [r4, #0]
 8003860:	e00e      	b.n	8003880 <_malloc_r+0xa0>
 8003862:	6822      	ldr	r2, [r4, #0]
 8003864:	1b52      	subs	r2, r2, r5
 8003866:	d41e      	bmi.n	80038a6 <_malloc_r+0xc6>
 8003868:	2a0b      	cmp	r2, #11
 800386a:	d916      	bls.n	800389a <_malloc_r+0xba>
 800386c:	1961      	adds	r1, r4, r5
 800386e:	42a3      	cmp	r3, r4
 8003870:	6025      	str	r5, [r4, #0]
 8003872:	bf18      	it	ne
 8003874:	6059      	strne	r1, [r3, #4]
 8003876:	6863      	ldr	r3, [r4, #4]
 8003878:	bf08      	it	eq
 800387a:	6031      	streq	r1, [r6, #0]
 800387c:	5162      	str	r2, [r4, r5]
 800387e:	604b      	str	r3, [r1, #4]
 8003880:	4638      	mov	r0, r7
 8003882:	f104 060b 	add.w	r6, r4, #11
 8003886:	f000 f835 	bl	80038f4 <__malloc_unlock>
 800388a:	f026 0607 	bic.w	r6, r6, #7
 800388e:	1d23      	adds	r3, r4, #4
 8003890:	1af2      	subs	r2, r6, r3
 8003892:	d0b6      	beq.n	8003802 <_malloc_r+0x22>
 8003894:	1b9b      	subs	r3, r3, r6
 8003896:	50a3      	str	r3, [r4, r2]
 8003898:	e7b3      	b.n	8003802 <_malloc_r+0x22>
 800389a:	6862      	ldr	r2, [r4, #4]
 800389c:	42a3      	cmp	r3, r4
 800389e:	bf0c      	ite	eq
 80038a0:	6032      	streq	r2, [r6, #0]
 80038a2:	605a      	strne	r2, [r3, #4]
 80038a4:	e7ec      	b.n	8003880 <_malloc_r+0xa0>
 80038a6:	4623      	mov	r3, r4
 80038a8:	6864      	ldr	r4, [r4, #4]
 80038aa:	e7b2      	b.n	8003812 <_malloc_r+0x32>
 80038ac:	4634      	mov	r4, r6
 80038ae:	6876      	ldr	r6, [r6, #4]
 80038b0:	e7b9      	b.n	8003826 <_malloc_r+0x46>
 80038b2:	230c      	movs	r3, #12
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	4638      	mov	r0, r7
 80038b8:	f000 f81c 	bl	80038f4 <__malloc_unlock>
 80038bc:	e7a1      	b.n	8003802 <_malloc_r+0x22>
 80038be:	6025      	str	r5, [r4, #0]
 80038c0:	e7de      	b.n	8003880 <_malloc_r+0xa0>
 80038c2:	bf00      	nop
 80038c4:	20000100 	.word	0x20000100

080038c8 <_sbrk_r>:
 80038c8:	b538      	push	{r3, r4, r5, lr}
 80038ca:	4d06      	ldr	r5, [pc, #24]	; (80038e4 <_sbrk_r+0x1c>)
 80038cc:	2300      	movs	r3, #0
 80038ce:	4604      	mov	r4, r0
 80038d0:	4608      	mov	r0, r1
 80038d2:	602b      	str	r3, [r5, #0]
 80038d4:	f7fd fb34 	bl	8000f40 <_sbrk>
 80038d8:	1c43      	adds	r3, r0, #1
 80038da:	d102      	bne.n	80038e2 <_sbrk_r+0x1a>
 80038dc:	682b      	ldr	r3, [r5, #0]
 80038de:	b103      	cbz	r3, 80038e2 <_sbrk_r+0x1a>
 80038e0:	6023      	str	r3, [r4, #0]
 80038e2:	bd38      	pop	{r3, r4, r5, pc}
 80038e4:	20000108 	.word	0x20000108

080038e8 <__malloc_lock>:
 80038e8:	4801      	ldr	r0, [pc, #4]	; (80038f0 <__malloc_lock+0x8>)
 80038ea:	f000 b809 	b.w	8003900 <__retarget_lock_acquire_recursive>
 80038ee:	bf00      	nop
 80038f0:	2000010c 	.word	0x2000010c

080038f4 <__malloc_unlock>:
 80038f4:	4801      	ldr	r0, [pc, #4]	; (80038fc <__malloc_unlock+0x8>)
 80038f6:	f000 b804 	b.w	8003902 <__retarget_lock_release_recursive>
 80038fa:	bf00      	nop
 80038fc:	2000010c 	.word	0x2000010c

08003900 <__retarget_lock_acquire_recursive>:
 8003900:	4770      	bx	lr

08003902 <__retarget_lock_release_recursive>:
 8003902:	4770      	bx	lr

08003904 <_init>:
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003906:	bf00      	nop
 8003908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390a:	bc08      	pop	{r3}
 800390c:	469e      	mov	lr, r3
 800390e:	4770      	bx	lr

08003910 <_fini>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	bf00      	nop
 8003914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003916:	bc08      	pop	{r3}
 8003918:	469e      	mov	lr, r3
 800391a:	4770      	bx	lr
