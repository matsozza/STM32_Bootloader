
STM32_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800474c  0800474c  0001474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004794  08004794  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004794  08004794  00014794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800479c  0800479c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800479c  0800479c  0001479c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047a0  080047a0  000147a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080047a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000110  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000180  20000180  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d3f6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002364  00000000  00000000  0002d496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af8  00000000  00000000  0002f800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009f0  00000000  00000000  000302f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022da1  00000000  00000000  00030ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e946  00000000  00000000  00053a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8c28  00000000  00000000  000623cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012aff7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cc8  00000000  00000000  0012b048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004734 	.word	0x08004734

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004734 	.word	0x08004734

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <bootloader_init>:
/* Internal functions prototypes ---------------------------------------------*/
static void bootloader_loadApplication(void);

/* Functions implementation --------------------------------------------------*/
void bootloader_init()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	//printf("\n\rBootloader - Start - Ver.(%d.%d) \r\n\0", PROG_VER[0], PROG_VER[1]);

	// Turn board LEDs off
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d8:	480c      	ldr	r0, [pc, #48]	; (800050c <bootloader_init+0x40>)
 80004da:	f000 fe71 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e4:	4809      	ldr	r0, [pc, #36]	; (800050c <bootloader_init+0x40>)
 80004e6:	f000 fe6b 	bl	80011c0 <HAL_GPIO_WritePin>

	// Send communication open command to UART interface
	//printf("\n\rBootloader - Check for OTA communication\r\n\0");
	COMM_UART_SendString("blc_0000");// Open communication with OTA interface
 80004ea:	4809      	ldr	r0, [pc, #36]	; (8000510 <bootloader_init+0x44>)
 80004ec:	f000 f84c 	bl	8000588 <COMM_UART_SendString>

	char *str_tmp = malloc(sizeof(char)*64);
 80004f0:	2040      	movs	r0, #64	; 0x40
 80004f2:	f004 f85d 	bl	80045b0 <malloc>
 80004f6:	4603      	mov	r3, r0
 80004f8:	607b      	str	r3, [r7, #4]
	COMM_UART_ReceiveString(str_tmp);
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f000 f820 	bl	8000540 <COMM_UART_ReceiveString>

	//printf("\n\r\0");

	bootloader_loadApplication(); // Load application file
 8000500:	f000 f808 	bl	8000514 <bootloader_loadApplication>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021400 	.word	0x40021400
 8000510:	0800474c 	.word	0x0800474c

08000514 <bootloader_loadApplication>:

static void bootloader_loadApplication()
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	//printf("Bootloader - Jumping to application \r\n\0");

	// Function pointer to application's reset handler
	void (*app_Reset_Handler)(void) =	(void*)(*(volatile uint32_t*)(APP_FLASH_ADDRESS + 0x04));
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <bootloader_loadApplication+0x24>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	607b      	str	r3, [r7, #4]

	// Turn-on board LED0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <bootloader_loadApplication+0x28>)
 8000528:	f000 fe4a 	bl	80011c0 <HAL_GPIO_WritePin>

	app_Reset_Handler(); // Application starting point
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4798      	blx	r3
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	08040004 	.word	0x08040004
 800053c:	40021400 	.word	0x40021400

08000540 <COMM_UART_ReceiveString>:
/* Internal functions prototypes ---------------------------------------------*/


/* Functions implementation --------------------------------------------------*/
void COMM_UART_ReceiveString(char* str)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
    uint8_t idx;
    for(idx = 0; idx<0xFF; idx++)
 8000548:	2300      	movs	r3, #0
 800054a:	73fb      	strb	r3, [r7, #15]
 800054c:	e011      	b.n	8000572 <COMM_UART_ReceiveString+0x32>
    {
      HAL_UART_Receive(&UART_DEVICE_HANDLER , (uint8_t *) (str + idx), 1, HAL_MAX_DELAY);
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	18d1      	adds	r1, r2, r3
 8000554:	f04f 33ff 	mov.w	r3, #4294967295
 8000558:	2201      	movs	r2, #1
 800055a:	480a      	ldr	r0, [pc, #40]	; (8000584 <COMM_UART_ReceiveString+0x44>)
 800055c:	f002 fd0c 	bl	8002f78 <HAL_UART_Receive>
      if( (char) *(str + idx) == '\0') break;
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d006      	beq.n	800057a <COMM_UART_ReceiveString+0x3a>
    for(idx = 0; idx<0xFF; idx++)
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	3301      	adds	r3, #1
 8000570:	73fb      	strb	r3, [r7, #15]
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	2bff      	cmp	r3, #255	; 0xff
 8000576:	d1ea      	bne.n	800054e <COMM_UART_ReceiveString+0xe>
    }
}
 8000578:	e000      	b.n	800057c <COMM_UART_ReceiveString+0x3c>
      if( (char) *(str + idx) == '\0') break;
 800057a:	bf00      	nop
}
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000110 	.word	0x20000110

08000588 <COMM_UART_SendString>:


// Transmit string via UART in blocking mode
void COMM_UART_SendString(char* str)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
    uint8_t idx;
    for(idx = 0; idx<0xFF; idx++)
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e011      	b.n	80005ba <COMM_UART_SendString+0x32>
    {
	    HAL_UART_Transmit(&UART_DEVICE_HANDLER, (uint8_t *) (str + idx), 1, HAL_MAX_DELAY);
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	18d1      	adds	r1, r2, r3
 800059c:	f04f 33ff 	mov.w	r3, #4294967295
 80005a0:	2201      	movs	r2, #1
 80005a2:	480a      	ldr	r0, [pc, #40]	; (80005cc <COMM_UART_SendString+0x44>)
 80005a4:	f002 fc56 	bl	8002e54 <HAL_UART_Transmit>
      if( (char) *(str + idx) == '\0') break;
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d006      	beq.n	80005c2 <COMM_UART_SendString+0x3a>
    for(idx = 0; idx<0xFF; idx++)
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	3301      	adds	r3, #1
 80005b8:	73fb      	strb	r3, [r7, #15]
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	2bff      	cmp	r3, #255	; 0xff
 80005be:	d1ea      	bne.n	8000596 <COMM_UART_SendString+0xe>
    }
}
 80005c0:	e000      	b.n	80005c4 <COMM_UART_SendString+0x3c>
      if( (char) *(str + idx) == '\0') break;
 80005c2:	bf00      	nop
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000110 	.word	0x20000110

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fac4 	bl	8000b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f80c 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f8bc 	bl	8000758 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80005e0:	f000 f870 	bl	80006c4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80005e4:	f003 fdc0 	bl	8004168 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 f88c 	bl	8000704 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  bootloader_init(); // Start bootloader
 80005ec:	f7ff ff6e 	bl	80004cc <bootloader_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0x20>
	...

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f003 ffdc 	bl	80045c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b27      	ldr	r3, [pc, #156]	; (80006bc <SystemClock_Config+0xc8>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a26      	ldr	r2, [pc, #152]	; (80006bc <SystemClock_Config+0xc8>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <SystemClock_Config+0xc8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <SystemClock_Config+0xcc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <SystemClock_Config+0xcc>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <SystemClock_Config+0xcc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000664:	2310      	movs	r3, #16
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000668:	23c0      	movs	r3, #192	; 0xc0
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fdbb 	bl	80011f4 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000684:	f000 f8e4 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f81e 	bl	80016e4 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006ae:	f000 f8cf 	bl	8000850 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	; 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_SDIO_SD_Init+0x38>)
 80006ca:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <MX_SDIO_SD_Init+0x3c>)
 80006cc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_SDIO_SD_Init+0x38>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_SDIO_SD_Init+0x38>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_SDIO_SD_Init+0x38>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_SDIO_SD_Init+0x38>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <MX_SDIO_SD_Init+0x38>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80006ec:	4b03      	ldr	r3, [pc, #12]	; (80006fc <MX_SDIO_SD_Init+0x38>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	2000008c 	.word	0x2000008c
 8000700:	40012c00 	.word	0x40012c00

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_USART2_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800073c:	f002 fb3d 	bl	8002dba <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f883 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000110 	.word	0x20000110
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b34      	ldr	r3, [pc, #208]	; (8000844 <MX_GPIO_Init+0xec>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a33      	ldr	r2, [pc, #204]	; (8000844 <MX_GPIO_Init+0xec>)
 8000778:	f043 0310 	orr.w	r3, r3, #16
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b31      	ldr	r3, [pc, #196]	; (8000844 <MX_GPIO_Init+0xec>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0310 	and.w	r3, r3, #16
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <MX_GPIO_Init+0xec>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a2c      	ldr	r2, [pc, #176]	; (8000844 <MX_GPIO_Init+0xec>)
 8000794:	f043 0320 	orr.w	r3, r3, #32
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <MX_GPIO_Init+0xec>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0320 	and.w	r3, r3, #32
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_GPIO_Init+0xec>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a25      	ldr	r2, [pc, #148]	; (8000844 <MX_GPIO_Init+0xec>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_GPIO_Init+0xec>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_GPIO_Init+0xec>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <MX_GPIO_Init+0xec>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_GPIO_Init+0xec>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_GPIO_Init+0xec>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <MX_GPIO_Init+0xec>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_GPIO_Init+0xec>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000800:	4811      	ldr	r0, [pc, #68]	; (8000848 <MX_GPIO_Init+0xf0>)
 8000802:	f000 fcdd 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000806:	2310      	movs	r3, #16
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_GPIO_Init+0xf4>)
 800081a:	f000 fb1d 	bl	8000e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 800081e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_GPIO_Init+0xf0>)
 8000838:	f000 fb0e 	bl	8000e58 <HAL_GPIO_Init>

}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40021400 	.word	0x40021400
 800084c:	40021000 	.word	0x40021000

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <HAL_MspInit+0x4c>)
 800086c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000870:	6453      	str	r3, [r2, #68]	; 0x44
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <HAL_MspInit+0x4c>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <HAL_MspInit+0x4c>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	6413      	str	r3, [r2, #64]	; 0x40
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_MspInit+0x4c>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a28      	ldr	r2, [pc, #160]	; (800096c <HAL_SD_MspInit+0xc0>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d14a      	bne.n	8000964 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b27      	ldr	r3, [pc, #156]	; (8000970 <HAL_SD_MspInit+0xc4>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a26      	ldr	r2, [pc, #152]	; (8000970 <HAL_SD_MspInit+0xc4>)
 80008d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
 80008de:	4b24      	ldr	r3, [pc, #144]	; (8000970 <HAL_SD_MspInit+0xc4>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <HAL_SD_MspInit+0xc4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a1f      	ldr	r2, [pc, #124]	; (8000970 <HAL_SD_MspInit+0xc4>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <HAL_SD_MspInit+0xc4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <HAL_SD_MspInit+0xc4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a18      	ldr	r2, [pc, #96]	; (8000970 <HAL_SD_MspInit+0xc4>)
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <HAL_SD_MspInit+0xc4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000922:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000926:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000934:	230c      	movs	r3, #12
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <HAL_SD_MspInit+0xc8>)
 8000940:	f000 fa8a 	bl	8000e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000944:	2304      	movs	r3, #4
 8000946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000954:	230c      	movs	r3, #12
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	4806      	ldr	r0, [pc, #24]	; (8000978 <HAL_SD_MspInit+0xcc>)
 8000960:	f000 fa7a 	bl	8000e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40012c00 	.word	0x40012c00
 8000970:	40023800 	.word	0x40023800
 8000974:	40020800 	.word	0x40020800
 8000978:	40020c00 	.word	0x40020c00

0800097c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <HAL_UART_MspInit+0x84>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12b      	bne.n	80009f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009d6:	230c      	movs	r3, #12
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e6:	2307      	movs	r3, #7
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <HAL_UART_MspInit+0x8c>)
 80009f2:	f000 fa31 	bl	8000e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	; 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40004400 	.word	0x40004400
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <NMI_Handler+0x4>
	...

08000a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	// Turn-on board LED1 - Error State
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1e:	4803      	ldr	r0, [pc, #12]	; (8000a2c <HardFault_Handler+0x18>)
 8000a20:	f000 fbce 	bl	80011c0 <HAL_GPIO_WritePin>

	// Send error message to UART
	COMM_UART_SendString("HardFault Error");
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <HardFault_Handler+0x1c>)
 8000a26:	f7ff fdaf 	bl	8000588 <COMM_UART_SendString>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x16>
 8000a2c:	40021400 	.word	0x40021400
 8000a30:	08004758 	.word	0x08004758

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a74:	f000 f8c6 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a84:	4a14      	ldr	r2, [pc, #80]	; (8000ad8 <_sbrk+0x5c>)
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <_sbrk+0x60>)
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <_sbrk+0x64>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <_sbrk+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d207      	bcs.n	8000abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aac:	f003 fd56 	bl	800455c <__errno>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	e009      	b.n	8000ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <_sbrk+0x64>)
 8000acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20020000 	.word	0x20020000
 8000adc:	00000400 	.word	0x00000400
 8000ae0:	20000154 	.word	0x20000154
 8000ae4:	20000180 	.word	0x20000180

08000ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <SystemInit+0x20>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <SystemInit+0x20>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b12:	490e      	ldr	r1, [pc, #56]	; (8000b4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b28:	4c0b      	ldr	r4, [pc, #44]	; (8000b58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b36:	f7ff ffd7 	bl	8000ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f003 fd15 	bl	8004568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3e:	f7ff fd47 	bl	80005d0 <main>
  bx  lr    
 8000b42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b50:	080047a4 	.word	0x080047a4
  ldr r2, =_sbss
 8000b54:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b58:	20000180 	.word	0x20000180

08000b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC_IRQHandler>
	...

08000b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <HAL_Init+0x40>)
 8000b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <HAL_Init+0x40>)
 8000b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_Init+0x40>)
 8000b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 f931 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8e:	200f      	movs	r0, #15
 8000b90:	f000 f808 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b94:	f7ff fe62 	bl	800085c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023c00 	.word	0x40023c00

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_InitTick+0x54>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_InitTick+0x58>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f93b 	bl	8000e3e <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00e      	b.n	8000bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d80a      	bhi.n	8000bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f000 f911 	bl	8000e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be4:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <HAL_InitTick+0x5c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x20>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x24>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <HAL_IncTick+0x24>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000158 	.word	0x20000158

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000158 	.word	0x20000158

08000c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c4c:	f7ff ffee 	bl	8000c2c <HAL_GetTick>
 8000c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c5c:	d005      	beq.n	8000c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_Delay+0x44>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c6a:	bf00      	nop
 8000c6c:	f7ff ffde 	bl	8000c2c <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d8f7      	bhi.n	8000c6c <HAL_Delay+0x28>
  {
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008

08000c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	; (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	; (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dbc:	d301      	bcc.n	8000dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00f      	b.n	8000de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <SysTick_Config+0x40>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dca:	210f      	movs	r1, #15
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f7ff ff8e 	bl	8000cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <SysTick_Config+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <SysTick_Config+0x40>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff47 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff5c 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff8e 	bl	8000d44 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5d 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ffb0 	bl	8000dac <SysTick_Config>
 8000e4c:	4603      	mov	r3, r0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	e16b      	b.n	800114c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e74:	2201      	movs	r2, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	f040 815a 	bne.w	8001146 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d005      	beq.n	8000eaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d130      	bne.n	8000f0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	68da      	ldr	r2, [r3, #12]
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	091b      	lsrs	r3, r3, #4
 8000ef6:	f003 0201 	and.w	r2, r3, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d017      	beq.n	8000f48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d123      	bne.n	8000f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	08da      	lsrs	r2, r3, #3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3208      	adds	r2, #8
 8000f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	691a      	ldr	r2, [r3, #16]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	08da      	lsrs	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3208      	adds	r2, #8
 8000f96:	69b9      	ldr	r1, [r7, #24]
 8000f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0203 	and.w	r2, r3, #3
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 80b4 	beq.w	8001146 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b60      	ldr	r3, [pc, #384]	; (8001164 <HAL_GPIO_Init+0x30c>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a5f      	ldr	r2, [pc, #380]	; (8001164 <HAL_GPIO_Init+0x30c>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b5d      	ldr	r3, [pc, #372]	; (8001164 <HAL_GPIO_Init+0x30c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ffa:	4a5b      	ldr	r2, [pc, #364]	; (8001168 <HAL_GPIO_Init+0x310>)
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	220f      	movs	r2, #15
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a52      	ldr	r2, [pc, #328]	; (800116c <HAL_GPIO_Init+0x314>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d02b      	beq.n	800107e <HAL_GPIO_Init+0x226>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a51      	ldr	r2, [pc, #324]	; (8001170 <HAL_GPIO_Init+0x318>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d025      	beq.n	800107a <HAL_GPIO_Init+0x222>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a50      	ldr	r2, [pc, #320]	; (8001174 <HAL_GPIO_Init+0x31c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d01f      	beq.n	8001076 <HAL_GPIO_Init+0x21e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4f      	ldr	r2, [pc, #316]	; (8001178 <HAL_GPIO_Init+0x320>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d019      	beq.n	8001072 <HAL_GPIO_Init+0x21a>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4e      	ldr	r2, [pc, #312]	; (800117c <HAL_GPIO_Init+0x324>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0x216>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4d      	ldr	r2, [pc, #308]	; (8001180 <HAL_GPIO_Init+0x328>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <HAL_GPIO_Init+0x212>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4c      	ldr	r2, [pc, #304]	; (8001184 <HAL_GPIO_Init+0x32c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x20e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4b      	ldr	r2, [pc, #300]	; (8001188 <HAL_GPIO_Init+0x330>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_GPIO_Init+0x20a>
 800105e:	2307      	movs	r3, #7
 8001060:	e00e      	b.n	8001080 <HAL_GPIO_Init+0x228>
 8001062:	2308      	movs	r3, #8
 8001064:	e00c      	b.n	8001080 <HAL_GPIO_Init+0x228>
 8001066:	2306      	movs	r3, #6
 8001068:	e00a      	b.n	8001080 <HAL_GPIO_Init+0x228>
 800106a:	2305      	movs	r3, #5
 800106c:	e008      	b.n	8001080 <HAL_GPIO_Init+0x228>
 800106e:	2304      	movs	r3, #4
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x228>
 8001072:	2303      	movs	r3, #3
 8001074:	e004      	b.n	8001080 <HAL_GPIO_Init+0x228>
 8001076:	2302      	movs	r3, #2
 8001078:	e002      	b.n	8001080 <HAL_GPIO_Init+0x228>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <HAL_GPIO_Init+0x228>
 800107e:	2300      	movs	r3, #0
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	f002 0203 	and.w	r2, r2, #3
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	4093      	lsls	r3, r2
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001090:	4935      	ldr	r1, [pc, #212]	; (8001168 <HAL_GPIO_Init+0x310>)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109e:	4b3b      	ldr	r3, [pc, #236]	; (800118c <HAL_GPIO_Init+0x334>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010c2:	4a32      	ldr	r2, [pc, #200]	; (800118c <HAL_GPIO_Init+0x334>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <HAL_GPIO_Init+0x334>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ec:	4a27      	ldr	r2, [pc, #156]	; (800118c <HAL_GPIO_Init+0x334>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <HAL_GPIO_Init+0x334>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001116:	4a1d      	ldr	r2, [pc, #116]	; (800118c <HAL_GPIO_Init+0x334>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_GPIO_Init+0x334>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001140:	4a12      	ldr	r2, [pc, #72]	; (800118c <HAL_GPIO_Init+0x334>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3301      	adds	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	f67f ae90 	bls.w	8000e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40013800 	.word	0x40013800
 800116c:	40020000 	.word	0x40020000
 8001170:	40020400 	.word	0x40020400
 8001174:	40020800 	.word	0x40020800
 8001178:	40020c00 	.word	0x40020c00
 800117c:	40021000 	.word	0x40021000
 8001180:	40021400 	.word	0x40021400
 8001184:	40021800 	.word	0x40021800
 8001188:	40021c00 	.word	0x40021c00
 800118c:	40013c00 	.word	0x40013c00

08001190 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e001      	b.n	80011b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011dc:	e003      	b.n	80011e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	041a      	lsls	r2, r3, #16
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	619a      	str	r2, [r3, #24]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e267      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d075      	beq.n	80012fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001212:	4b88      	ldr	r3, [pc, #544]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b04      	cmp	r3, #4
 800121c:	d00c      	beq.n	8001238 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121e:	4b85      	ldr	r3, [pc, #532]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001226:	2b08      	cmp	r3, #8
 8001228:	d112      	bne.n	8001250 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122a:	4b82      	ldr	r3, [pc, #520]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001236:	d10b      	bne.n	8001250 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001238:	4b7e      	ldr	r3, [pc, #504]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d05b      	beq.n	80012fc <HAL_RCC_OscConfig+0x108>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d157      	bne.n	80012fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e242      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001258:	d106      	bne.n	8001268 <HAL_RCC_OscConfig+0x74>
 800125a:	4b76      	ldr	r3, [pc, #472]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a75      	ldr	r2, [pc, #468]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e01d      	b.n	80012a4 <HAL_RCC_OscConfig+0xb0>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001270:	d10c      	bne.n	800128c <HAL_RCC_OscConfig+0x98>
 8001272:	4b70      	ldr	r3, [pc, #448]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a6f      	ldr	r2, [pc, #444]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	4b6d      	ldr	r3, [pc, #436]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a6c      	ldr	r2, [pc, #432]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e00b      	b.n	80012a4 <HAL_RCC_OscConfig+0xb0>
 800128c:	4b69      	ldr	r3, [pc, #420]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a68      	ldr	r2, [pc, #416]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b66      	ldr	r3, [pc, #408]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a65      	ldr	r2, [pc, #404]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800129e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d013      	beq.n	80012d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fcbe 	bl	8000c2c <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fcba 	bl	8000c2c <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	; 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e207      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	4b5b      	ldr	r3, [pc, #364]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0xc0>
 80012d2:	e014      	b.n	80012fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fcaa 	bl	8000c2c <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fca6 	bl	8000c2c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e1f3      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	4b51      	ldr	r3, [pc, #324]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f0      	bne.n	80012dc <HAL_RCC_OscConfig+0xe8>
 80012fa:	e000      	b.n	80012fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d063      	beq.n	80013d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800130a:	4b4a      	ldr	r3, [pc, #296]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00b      	beq.n	800132e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001316:	4b47      	ldr	r3, [pc, #284]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131e:	2b08      	cmp	r3, #8
 8001320:	d11c      	bne.n	800135c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001322:	4b44      	ldr	r3, [pc, #272]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d116      	bne.n	800135c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132e:	4b41      	ldr	r3, [pc, #260]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d005      	beq.n	8001346 <HAL_RCC_OscConfig+0x152>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d001      	beq.n	8001346 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e1c7      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001346:	4b3b      	ldr	r3, [pc, #236]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4937      	ldr	r1, [pc, #220]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135a:	e03a      	b.n	80013d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d020      	beq.n	80013a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001364:	4b34      	ldr	r3, [pc, #208]	; (8001438 <HAL_RCC_OscConfig+0x244>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136a:	f7ff fc5f 	bl	8000c2c <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001372:	f7ff fc5b 	bl	8000c2c <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e1a8      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f0      	beq.n	8001372 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001390:	4b28      	ldr	r3, [pc, #160]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4925      	ldr	r1, [pc, #148]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	600b      	str	r3, [r1, #0]
 80013a4:	e015      	b.n	80013d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a6:	4b24      	ldr	r3, [pc, #144]	; (8001438 <HAL_RCC_OscConfig+0x244>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc3e 	bl	8000c2c <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b4:	f7ff fc3a 	bl	8000c2c <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e187      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d036      	beq.n	800144c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d016      	beq.n	8001414 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_RCC_OscConfig+0x248>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ec:	f7ff fc1e 	bl	8000c2c <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f4:	f7ff fc1a 	bl	8000c2c <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e167      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0x200>
 8001412:	e01b      	b.n	800144c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_RCC_OscConfig+0x248>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff fc07 	bl	8000c2c <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001420:	e00e      	b.n	8001440 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001422:	f7ff fc03 	bl	8000c2c <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d907      	bls.n	8001440 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e150      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
 8001434:	40023800 	.word	0x40023800
 8001438:	42470000 	.word	0x42470000
 800143c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001440:	4b88      	ldr	r3, [pc, #544]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1ea      	bne.n	8001422 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 8097 	beq.w	8001588 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145e:	4b81      	ldr	r3, [pc, #516]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10f      	bne.n	800148a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b7d      	ldr	r3, [pc, #500]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a7c      	ldr	r2, [pc, #496]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b7a      	ldr	r3, [pc, #488]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001486:	2301      	movs	r3, #1
 8001488:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148a:	4b77      	ldr	r3, [pc, #476]	; (8001668 <HAL_RCC_OscConfig+0x474>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	2b00      	cmp	r3, #0
 8001494:	d118      	bne.n	80014c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001496:	4b74      	ldr	r3, [pc, #464]	; (8001668 <HAL_RCC_OscConfig+0x474>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a73      	ldr	r2, [pc, #460]	; (8001668 <HAL_RCC_OscConfig+0x474>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fbc3 	bl	8000c2c <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014aa:	f7ff fbbf 	bl	8000c2c <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e10c      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x474>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x2ea>
 80014d0:	4b64      	ldr	r3, [pc, #400]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d4:	4a63      	ldr	r2, [pc, #396]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6713      	str	r3, [r2, #112]	; 0x70
 80014dc:	e01c      	b.n	8001518 <HAL_RCC_OscConfig+0x324>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x30c>
 80014e6:	4b5f      	ldr	r3, [pc, #380]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ea:	4a5e      	ldr	r2, [pc, #376]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6713      	str	r3, [r2, #112]	; 0x70
 80014f2:	4b5c      	ldr	r3, [pc, #368]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a5b      	ldr	r2, [pc, #364]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
 80014fe:	e00b      	b.n	8001518 <HAL_RCC_OscConfig+0x324>
 8001500:	4b58      	ldr	r3, [pc, #352]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001504:	4a57      	ldr	r2, [pc, #348]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	6713      	str	r3, [r2, #112]	; 0x70
 800150c:	4b55      	ldr	r3, [pc, #340]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a54      	ldr	r2, [pc, #336]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001512:	f023 0304 	bic.w	r3, r3, #4
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d015      	beq.n	800154c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001520:	f7ff fb84 	bl	8000c2c <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001526:	e00a      	b.n	800153e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001528:	f7ff fb80 	bl	8000c2c <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f241 3288 	movw	r2, #5000	; 0x1388
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e0cb      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153e:	4b49      	ldr	r3, [pc, #292]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0ee      	beq.n	8001528 <HAL_RCC_OscConfig+0x334>
 800154a:	e014      	b.n	8001576 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154c:	f7ff fb6e 	bl	8000c2c <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001552:	e00a      	b.n	800156a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001554:	f7ff fb6a 	bl	8000c2c <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001562:	4293      	cmp	r3, r2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e0b5      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800156a:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1ee      	bne.n	8001554 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001576:	7dfb      	ldrb	r3, [r7, #23]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d105      	bne.n	8001588 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800157c:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	4a38      	ldr	r2, [pc, #224]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001586:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80a1 	beq.w	80016d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001592:	4b34      	ldr	r3, [pc, #208]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	2b08      	cmp	r3, #8
 800159c:	d05c      	beq.n	8001658 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d141      	bne.n	800162a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a6:	4b31      	ldr	r3, [pc, #196]	; (800166c <HAL_RCC_OscConfig+0x478>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fb3e 	bl	8000c2c <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fb3a 	bl	8000c2c <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e087      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	4b27      	ldr	r3, [pc, #156]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69da      	ldr	r2, [r3, #28]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	019b      	lsls	r3, r3, #6
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	085b      	lsrs	r3, r3, #1
 80015ea:	3b01      	subs	r3, #1
 80015ec:	041b      	lsls	r3, r3, #16
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	061b      	lsls	r3, r3, #24
 80015f6:	491b      	ldr	r1, [pc, #108]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_RCC_OscConfig+0x478>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fb13 	bl	8000c2c <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160a:	f7ff fb0f 	bl	8000c2c <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e05c      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x416>
 8001628:	e054      	b.n	80016d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_RCC_OscConfig+0x478>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fafc 	bl	8000c2c <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001638:	f7ff faf8 	bl	8000c2c <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e045      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x444>
 8001656:	e03d      	b.n	80016d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d107      	bne.n	8001670 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e038      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
 8001664:	40023800 	.word	0x40023800
 8001668:	40007000 	.word	0x40007000
 800166c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_RCC_OscConfig+0x4ec>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d028      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001688:	429a      	cmp	r2, r3
 800168a:	d121      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d11a      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016a0:	4013      	ands	r3, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d111      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	085b      	lsrs	r3, r3, #1
 80016b8:	3b01      	subs	r3, #1
 80016ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d107      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800

080016e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0cc      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f8:	4b68      	ldr	r3, [pc, #416]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d90c      	bls.n	8001720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b65      	ldr	r3, [pc, #404]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b63      	ldr	r3, [pc, #396]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0b8      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d020      	beq.n	800176e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001738:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4a58      	ldr	r2, [pc, #352]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001742:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001750:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4a52      	ldr	r2, [pc, #328]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800175a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800175c:	4b50      	ldr	r3, [pc, #320]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	494d      	ldr	r1, [pc, #308]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	4313      	orrs	r3, r2
 800176c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d044      	beq.n	8001804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d119      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e07f      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d003      	beq.n	80017a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d107      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a2:	4b3f      	ldr	r3, [pc, #252]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e06f      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b2:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e067      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c2:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f023 0203 	bic.w	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4934      	ldr	r1, [pc, #208]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d4:	f7ff fa2a 	bl	8000c2c <HAL_GetTick>
 80017d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017dc:	f7ff fa26 	bl	8000c2c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e04f      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f2:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 020c 	and.w	r2, r3, #12
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	429a      	cmp	r2, r3
 8001802:	d1eb      	bne.n	80017dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001804:	4b25      	ldr	r3, [pc, #148]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d20c      	bcs.n	800182c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e032      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4916      	ldr	r1, [pc, #88]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	490e      	ldr	r1, [pc, #56]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	4313      	orrs	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800186a:	f000 f821 	bl	80018b0 <HAL_RCC_GetSysClockFreq>
 800186e:	4602      	mov	r2, r0
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	490a      	ldr	r1, [pc, #40]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	5ccb      	ldrb	r3, [r1, r3]
 800187e:	fa22 f303 	lsr.w	r3, r2, r3
 8001882:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff f98a 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023c00 	.word	0x40023c00
 80018a0:	40023800 	.word	0x40023800
 80018a4:	08004768 	.word	0x08004768
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000004 	.word	0x20000004

080018b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018b4:	b090      	sub	sp, #64	; 0x40
 80018b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
 80018bc:	2300      	movs	r3, #0
 80018be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018c0:	2300      	movs	r3, #0
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c8:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d00d      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x40>
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	f200 80a1 	bhi.w	8001a1c <HAL_RCC_GetSysClockFreq+0x16c>
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x34>
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d003      	beq.n	80018ea <HAL_RCC_GetSysClockFreq+0x3a>
 80018e2:	e09b      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018e4:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x184>)
 80018e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80018e8:	e09b      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ea:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x188>)
 80018ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018ee:	e098      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f0:	4b4f      	ldr	r3, [pc, #316]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x180>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018fa:	4b4d      	ldr	r3, [pc, #308]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x180>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d028      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001906:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	099b      	lsrs	r3, r3, #6
 800190c:	2200      	movs	r2, #0
 800190e:	623b      	str	r3, [r7, #32]
 8001910:	627a      	str	r2, [r7, #36]	; 0x24
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001918:	2100      	movs	r1, #0
 800191a:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x188>)
 800191c:	fb03 f201 	mul.w	r2, r3, r1
 8001920:	2300      	movs	r3, #0
 8001922:	fb00 f303 	mul.w	r3, r0, r3
 8001926:	4413      	add	r3, r2
 8001928:	4a43      	ldr	r2, [pc, #268]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x188>)
 800192a:	fba0 1202 	umull	r1, r2, r0, r2
 800192e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001930:	460a      	mov	r2, r1
 8001932:	62ba      	str	r2, [r7, #40]	; 0x28
 8001934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001936:	4413      	add	r3, r2
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193c:	2200      	movs	r2, #0
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	61fa      	str	r2, [r7, #28]
 8001942:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001946:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800194a:	f7fe fc3d 	bl	80001c8 <__aeabi_uldivmod>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4613      	mov	r3, r2
 8001954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001956:	e053      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001958:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x180>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	099b      	lsrs	r3, r3, #6
 800195e:	2200      	movs	r2, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	617a      	str	r2, [r7, #20]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800196a:	f04f 0b00 	mov.w	fp, #0
 800196e:	4652      	mov	r2, sl
 8001970:	465b      	mov	r3, fp
 8001972:	f04f 0000 	mov.w	r0, #0
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	0159      	lsls	r1, r3, #5
 800197c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001980:	0150      	lsls	r0, r2, #5
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	ebb2 080a 	subs.w	r8, r2, sl
 800198a:	eb63 090b 	sbc.w	r9, r3, fp
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800199a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800199e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019a2:	ebb2 0408 	subs.w	r4, r2, r8
 80019a6:	eb63 0509 	sbc.w	r5, r3, r9
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	00eb      	lsls	r3, r5, #3
 80019b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019b8:	00e2      	lsls	r2, r4, #3
 80019ba:	4614      	mov	r4, r2
 80019bc:	461d      	mov	r5, r3
 80019be:	eb14 030a 	adds.w	r3, r4, sl
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	eb45 030b 	adc.w	r3, r5, fp
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019d6:	4629      	mov	r1, r5
 80019d8:	028b      	lsls	r3, r1, #10
 80019da:	4621      	mov	r1, r4
 80019dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019e0:	4621      	mov	r1, r4
 80019e2:	028a      	lsls	r2, r1, #10
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ea:	2200      	movs	r2, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	60fa      	str	r2, [r7, #12]
 80019f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019f4:	f7fe fbe8 	bl	80001c8 <__aeabi_uldivmod>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4613      	mov	r3, r2
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	0c1b      	lsrs	r3, r3, #16
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a1a:	e002      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3740      	adds	r7, #64	; 0x40
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	00f42400 	.word	0x00f42400
 8001a38:	017d7840 	.word	0x017d7840

08001a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000000 	.word	0x20000000

08001a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a58:	f7ff fff0 	bl	8001a3c <HAL_RCC_GetHCLKFreq>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	0a9b      	lsrs	r3, r3, #10
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	4903      	ldr	r1, [pc, #12]	; (8001a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40023800 	.word	0x40023800
 8001a78:	08004778 	.word	0x08004778

08001a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a80:	f7ff ffdc 	bl	8001a3c <HAL_RCC_GetHCLKFreq>
 8001a84:	4602      	mov	r2, r0
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	0b5b      	lsrs	r3, r3, #13
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	4903      	ldr	r1, [pc, #12]	; (8001aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a92:	5ccb      	ldrb	r3, [r1, r3]
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	08004778 	.word	0x08004778

08001aa4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e022      	b.n	8001afc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d105      	bne.n	8001ace <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7fe feef 	bl	80008ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f814 	bl	8001b04 <HAL_SD_InitCard>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00a      	b.n	8001afc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001b04:	b5b0      	push	{r4, r5, r7, lr}
 8001b06:	b08e      	sub	sp, #56	; 0x38
 8001b08:	af04      	add	r7, sp, #16
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001b20:	2376      	movs	r3, #118	; 0x76
 8001b22:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681d      	ldr	r5, [r3, #0]
 8001b28:	466c      	mov	r4, sp
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b3c:	4628      	mov	r0, r5
 8001b3e:	f001 fd9f 	bl	8003680 <SDIO_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e04f      	b.n	8001bf4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001b54:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <HAL_SD_InitCard+0xf8>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f001 fdd7 	bl	8003712 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001b64:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <HAL_SD_InitCard+0xf8>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8001b6a:	2002      	movs	r0, #2
 8001b6c:	f7ff f86a 	bl	8000c44 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 ff03 	bl	800297c <SD_PowerON>
 8001b76:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00b      	beq.n	8001b96 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e02e      	b.n	8001bf4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 fe22 	bl	80027e0 <SD_InitCard>
 8001b9c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00b      	beq.n	8001bbc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e01b      	b.n	8001bf4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f001 fe36 	bl	8003836 <SDMMC_CmdBlockLength>
 8001bca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00f      	beq.n	8001bf2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <HAL_SD_InitCard+0xfc>)
 8001bd8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3728      	adds	r7, #40	; 0x28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8001bfc:	422580a0 	.word	0x422580a0
 8001c00:	004005ff 	.word	0x004005ff

08001c04 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b092      	sub	sp, #72	; 0x48
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001c12:	f7ff f80b 	bl	8000c2c <HAL_GetTick>
 8001c16:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d107      	bne.n	8001c36 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e1bd      	b.n	8001fb2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	f040 81b0 	bne.w	8001fa4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001c4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	441a      	add	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d907      	bls.n	8001c68 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e1a4      	b.n	8001fb2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2200      	movs	r2, #0
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d002      	beq.n	8001c86 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8001c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c82:	025b      	lsls	r3, r3, #9
 8001c84:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	025b      	lsls	r3, r3, #9
 8001c90:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001c92:	2390      	movs	r3, #144	; 0x90
 8001c94:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001c96:	2302      	movs	r3, #2
 8001c98:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f107 0214 	add.w	r2, r7, #20
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f001 fd96 	bl	80037de <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d90a      	bls.n	8001cce <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f001 fdfa 	bl	80038be <SDMMC_CmdReadMultiBlock>
 8001cca:	6478      	str	r0, [r7, #68]	; 0x44
 8001ccc:	e009      	b.n	8001ce2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 fdcd 	bl	800387a <SDMMC_CmdReadSingleBlock>
 8001ce0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d012      	beq.n	8001d0e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a7a      	ldr	r2, [pc, #488]	; (8001ed8 <HAL_SD_ReadBlocks+0x2d4>)
 8001cee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e151      	b.n	8001fb2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001d12:	e061      	b.n	8001dd8 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d03c      	beq.n	8001d9c <HAL_SD_ReadBlocks+0x198>
 8001d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d039      	beq.n	8001d9c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	643b      	str	r3, [r7, #64]	; 0x40
 8001d2c:	e033      	b.n	8001d96 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f001 fccf 	bl	80036d6 <SDIO_ReadFIFO>
 8001d38:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d40:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d44:	3301      	adds	r3, #1
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d56:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d60:	3b01      	subs	r3, #1
 8001d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d66:	0c1b      	lsrs	r3, r3, #16
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d70:	3301      	adds	r3, #1
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d76:	3b01      	subs	r3, #1
 8001d78:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7c:	0e1b      	lsrs	r3, r3, #24
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d82:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d86:	3301      	adds	r3, #1
 8001d88:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8001d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d92:	3301      	adds	r3, #1
 8001d94:	643b      	str	r3, [r7, #64]	; 0x40
 8001d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d98:	2b07      	cmp	r3, #7
 8001d9a:	d9c8      	bls.n	8001d2e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001d9c:	f7fe ff46 	bl	8000c2c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d902      	bls.n	8001db2 <HAL_SD_ReadBlocks+0x1ae>
 8001dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d112      	bne.n	8001dd8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a48      	ldr	r2, [pc, #288]	; (8001ed8 <HAL_SD_ReadBlocks+0x2d4>)
 8001db8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e0ec      	b.n	8001fb2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dde:	f240 332a 	movw	r3, #810	; 0x32a
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d095      	beq.n	8001d14 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d022      	beq.n	8001e3c <HAL_SD_ReadBlocks+0x238>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d91f      	bls.n	8001e3c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d01b      	beq.n	8001e3c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f001 fdbf 	bl	800398c <SDMMC_CmdStopTransfer>
 8001e0e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d012      	beq.n	8001e3c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a2f      	ldr	r2, [pc, #188]	; (8001ed8 <HAL_SD_ReadBlocks+0x2d4>)
 8001e1c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e24:	431a      	orrs	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0ba      	b.n	8001fb2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d012      	beq.n	8001e70 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a22      	ldr	r2, [pc, #136]	; (8001ed8 <HAL_SD_ReadBlocks+0x2d4>)
 8001e50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e56:	f043 0208 	orr.w	r2, r3, #8
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0a0      	b.n	8001fb2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d012      	beq.n	8001ea4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a15      	ldr	r2, [pc, #84]	; (8001ed8 <HAL_SD_ReadBlocks+0x2d4>)
 8001e84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	f043 0202 	orr.w	r2, r3, #2
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e086      	b.n	8001fb2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d063      	beq.n	8001f7a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <HAL_SD_ReadBlocks+0x2d4>)
 8001eb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebe:	f043 0220 	orr.w	r2, r3, #32
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e06c      	b.n	8001fb2 <HAL_SD_ReadBlocks+0x3ae>
 8001ed8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 fbf8 	bl	80036d6 <SDIO_ReadFIFO>
 8001ee6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8001ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efe:	0a1b      	lsrs	r3, r3, #8
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f04:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f08:	3301      	adds	r3, #1
 8001f0a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f14:	0c1b      	lsrs	r3, r3, #16
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1e:	3301      	adds	r3, #1
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f24:	3b01      	subs	r3, #1
 8001f26:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2a:	0e1b      	lsrs	r3, r3, #24
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f30:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f34:	3301      	adds	r3, #1
 8001f36:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001f3e:	f7fe fe75 	bl	8000c2c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d902      	bls.n	8001f54 <HAL_SD_ReadBlocks+0x350>
 8001f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d112      	bne.n	8001f7a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <HAL_SD_ReadBlocks+0x3b8>)
 8001f5a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e01b      	b.n	8001fb2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d002      	beq.n	8001f8e <HAL_SD_ReadBlocks+0x38a>
 8001f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1a6      	bne.n	8001edc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f240 523a 	movw	r2, #1338	; 0x53a
 8001f96:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e006      	b.n	8001fb2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
  }
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3748      	adds	r7, #72	; 0x48
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	004005ff 	.word	0x004005ff

08001fc0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b092      	sub	sp, #72	; 0x48
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001fce:	f7fe fe2d 	bl	8000c2c <HAL_GetTick>
 8001fd2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d107      	bne.n	8001ff2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e166      	b.n	80022c0 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	f040 8159 	bne.w	80022b2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	441a      	add	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	429a      	cmp	r2, r3
 8002012:	d907      	bls.n	8002024 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002018:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e14d      	b.n	80022c0 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2203      	movs	r2, #3
 8002028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2200      	movs	r2, #0
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	2b01      	cmp	r3, #1
 800203a:	d002      	beq.n	8002042 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800203c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203e:	025b      	lsls	r3, r3, #9
 8002040:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	025b      	lsls	r3, r3, #9
 800204c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800204e:	2390      	movs	r3, #144	; 0x90
 8002050:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002056:	2300      	movs	r3, #0
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800205a:	2301      	movs	r3, #1
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f107 0218 	add.w	r2, r7, #24
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f001 fbb8 	bl	80037de <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d90a      	bls.n	800208a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002080:	4618      	mov	r0, r3
 8002082:	f001 fc60 	bl	8003946 <SDMMC_CmdWriteMultiBlock>
 8002086:	6478      	str	r0, [r7, #68]	; 0x44
 8002088:	e009      	b.n	800209e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2210      	movs	r2, #16
 800208e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002096:	4618      	mov	r0, r3
 8002098:	f001 fc33 	bl	8003902 <SDMMC_CmdWriteSingleBlock>
 800209c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800209e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d012      	beq.n	80020ca <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a87      	ldr	r2, [pc, #540]	; (80022c8 <HAL_SD_WriteBlocks+0x308>)
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b2:	431a      	orrs	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0fa      	b.n	80022c0 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80020ce:	e065      	b.n	800219c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d040      	beq.n	8002160 <HAL_SD_WriteBlocks+0x1a0>
 80020de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d03d      	beq.n	8002160 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80020e4:	2300      	movs	r3, #0
 80020e6:	643b      	str	r3, [r7, #64]	; 0x40
 80020e8:	e037      	b.n	800215a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80020ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80020f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f2:	3301      	adds	r3, #1
 80020f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80020f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f8:	3b01      	subs	r3, #1
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	021a      	lsls	r2, r3, #8
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210a:	3301      	adds	r3, #1
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800210e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002110:	3b01      	subs	r3, #1
 8002112:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	041a      	lsls	r2, r3, #16
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002122:	3301      	adds	r3, #1
 8002124:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002128:	3b01      	subs	r3, #1
 800212a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800212c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	061a      	lsls	r2, r3, #24
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213a:	3301      	adds	r3, #1
 800213c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800213e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002140:	3b01      	subs	r3, #1
 8002142:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f107 0214 	add.w	r2, r7, #20
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f001 face 	bl	80036f0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002156:	3301      	adds	r3, #1
 8002158:	643b      	str	r3, [r7, #64]	; 0x40
 800215a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215c:	2b07      	cmp	r3, #7
 800215e:	d9c4      	bls.n	80020ea <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002160:	f7fe fd64 	bl	8000c2c <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800216c:	429a      	cmp	r2, r3
 800216e:	d902      	bls.n	8002176 <HAL_SD_WriteBlocks+0x1b6>
 8002170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002172:	2b00      	cmp	r3, #0
 8002174:	d112      	bne.n	800219c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a53      	ldr	r2, [pc, #332]	; (80022c8 <HAL_SD_WriteBlocks+0x308>)
 800217c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002184:	431a      	orrs	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e091      	b.n	80022c0 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a2:	f240 331a 	movw	r3, #794	; 0x31a
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d091      	beq.n	80020d0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d022      	beq.n	8002200 <HAL_SD_WriteBlocks+0x240>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d91f      	bls.n	8002200 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d01b      	beq.n	8002200 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f001 fbdd 	bl	800398c <SDMMC_CmdStopTransfer>
 80021d2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80021d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d012      	beq.n	8002200 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a3a      	ldr	r2, [pc, #232]	; (80022c8 <HAL_SD_WriteBlocks+0x308>)
 80021e0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e05f      	b.n	80022c0 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d012      	beq.n	8002234 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2d      	ldr	r2, [pc, #180]	; (80022c8 <HAL_SD_WriteBlocks+0x308>)
 8002214:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221a:	f043 0208 	orr.w	r2, r3, #8
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e045      	b.n	80022c0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d012      	beq.n	8002268 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a20      	ldr	r2, [pc, #128]	; (80022c8 <HAL_SD_WriteBlocks+0x308>)
 8002248:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224e:	f043 0202 	orr.w	r2, r3, #2
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e02b      	b.n	80022c0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	2b00      	cmp	r3, #0
 8002274:	d012      	beq.n	800229c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a13      	ldr	r2, [pc, #76]	; (80022c8 <HAL_SD_WriteBlocks+0x308>)
 800227c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002282:	f043 0210 	orr.w	r2, r3, #16
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e011      	b.n	80022c0 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f240 523a 	movw	r2, #1338	; 0x53a
 80022a4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e006      	b.n	80022c0 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
  }
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3748      	adds	r7, #72	; 0x48
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	004005ff 	.word	0x004005ff

080022cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022da:	0f9b      	lsrs	r3, r3, #30
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022e6:	0e9b      	lsrs	r3, r3, #26
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022f8:	0e1b      	lsrs	r3, r3, #24
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	b2da      	uxtb	r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800230a:	0c1b      	lsrs	r3, r3, #16
 800230c:	b2da      	uxtb	r2, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	b2da      	uxtb	r2, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002322:	b2da      	uxtb	r2, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800232c:	0d1b      	lsrs	r3, r3, #20
 800232e:	b29a      	uxth	r2, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	b2da      	uxtb	r2, r3
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800234a:	0bdb      	lsrs	r3, r3, #15
 800234c:	b2db      	uxtb	r3, r3
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	b2da      	uxtb	r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800235c:	0b9b      	lsrs	r3, r3, #14
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	b2da      	uxtb	r2, r3
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800236e:	0b5b      	lsrs	r3, r3, #13
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	b2da      	uxtb	r2, r3
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002380:	0b1b      	lsrs	r3, r3, #12
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	b2da      	uxtb	r2, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2200      	movs	r2, #0
 8002392:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	2b00      	cmp	r3, #0
 800239a:	d163      	bne.n	8002464 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023a0:	009a      	lsls	r2, r3, #2
 80023a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023a6:	4013      	ands	r3, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80023ac:	0f92      	lsrs	r2, r2, #30
 80023ae:	431a      	orrs	r2, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023b8:	0edb      	lsrs	r3, r3, #27
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ca:	0e1b      	lsrs	r3, r3, #24
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023dc:	0d5b      	lsrs	r3, r3, #21
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ee:	0c9b      	lsrs	r3, r3, #18
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002400:	0bdb      	lsrs	r3, r3, #15
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	b2da      	uxtb	r2, r3
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	7e1b      	ldrb	r3, [r3, #24]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	3302      	adds	r3, #2
 8002424:	2201      	movs	r2, #1
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800242e:	fb03 f202 	mul.w	r2, r3, r2
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	7a1b      	ldrb	r3, [r3, #8]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	2201      	movs	r2, #1
 8002442:	409a      	lsls	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002450:	0a52      	lsrs	r2, r2, #9
 8002452:	fb03 f202 	mul.w	r2, r3, r2
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002460:	661a      	str	r2, [r3, #96]	; 0x60
 8002462:	e031      	b.n	80024c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	2b01      	cmp	r3, #1
 800246a:	d11d      	bne.n	80024a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002470:	041b      	lsls	r3, r3, #16
 8002472:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800247a:	0c1b      	lsrs	r3, r3, #16
 800247c:	431a      	orrs	r2, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	3301      	adds	r3, #1
 8002488:	029a      	lsls	r2, r3, #10
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800249c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	661a      	str	r2, [r3, #96]	; 0x60
 80024a6:	e00f      	b.n	80024c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a58      	ldr	r2, [pc, #352]	; (8002610 <HAL_SD_GetCardCSD+0x344>)
 80024ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e09d      	b.n	8002604 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024cc:	0b9b      	lsrs	r3, r3, #14
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024de:	09db      	lsrs	r3, r3, #7
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002500:	0fdb      	lsrs	r3, r3, #31
 8002502:	b2da      	uxtb	r2, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	0f5b      	lsrs	r3, r3, #29
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	b2da      	uxtb	r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251e:	0e9b      	lsrs	r3, r3, #26
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	b2da      	uxtb	r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	0d9b      	lsrs	r3, r3, #22
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	b2da      	uxtb	r2, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002542:	0d5b      	lsrs	r3, r3, #21
 8002544:	b2db      	uxtb	r3, r3
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	b2da      	uxtb	r2, r3
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	0c1b      	lsrs	r3, r3, #16
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	b2da      	uxtb	r2, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002572:	0bdb      	lsrs	r3, r3, #15
 8002574:	b2db      	uxtb	r3, r3
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	b2da      	uxtb	r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	0b9b      	lsrs	r3, r3, #14
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	b2da      	uxtb	r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	0b5b      	lsrs	r3, r3, #13
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ae:	0b1b      	lsrs	r3, r3, #12
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	0a9b      	lsrs	r3, r3, #10
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	0a1b      	lsrs	r3, r3, #8
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	085b      	lsrs	r3, r3, #1
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	004005ff 	.word	0x004005ff

08002614 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800266c:	b5b0      	push	{r4, r5, r7, lr}
 800266e:	b08e      	sub	sp, #56	; 0x38
 8002670:	af04      	add	r7, sp, #16
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2203      	movs	r2, #3
 8002680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	2b03      	cmp	r3, #3
 800268a:	d02e      	beq.n	80026ea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002692:	d106      	bne.n	80026a2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002698:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	639a      	str	r2, [r3, #56]	; 0x38
 80026a0:	e029      	b.n	80026f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026a8:	d10a      	bne.n	80026c0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fa1c 	bl	8002ae8 <SD_WideBus_Enable>
 80026b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	639a      	str	r2, [r3, #56]	; 0x38
 80026be:	e01a      	b.n	80026f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10a      	bne.n	80026dc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fa59 	bl	8002b7e <SD_WideBus_Disable>
 80026cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	639a      	str	r2, [r3, #56]	; 0x38
 80026da:	e00c      	b.n	80026f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	639a      	str	r2, [r3, #56]	; 0x38
 80026e8:	e005      	b.n	80026f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a26      	ldr	r2, [pc, #152]	; (800279c <HAL_SD_ConfigWideBusOperation+0x130>)
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002714:	e01f      	b.n	8002756 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681d      	ldr	r5, [r3, #0]
 800273c:	466c      	mov	r4, sp
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002746:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800274a:	f107 0308 	add.w	r3, r7, #8
 800274e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002750:	4628      	mov	r0, r5
 8002752:	f000 ff95 	bl	8003680 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800275e:	4618      	mov	r0, r3
 8002760:	f001 f869 	bl	8003836 <SDMMC_CmdBlockLength>
 8002764:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00c      	beq.n	8002786 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <HAL_SD_ConfigWideBusOperation+0x130>)
 8002772:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800278e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002792:	4618      	mov	r0, r3
 8002794:	3728      	adds	r7, #40	; 0x28
 8002796:	46bd      	mov	sp, r7
 8002798:	bdb0      	pop	{r4, r5, r7, pc}
 800279a:	bf00      	nop
 800279c:	004005ff 	.word	0x004005ff

080027a0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80027ac:	f107 030c 	add.w	r3, r7, #12
 80027b0:	4619      	mov	r1, r3
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f970 	bl	8002a98 <SD_SendStatus>
 80027b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	0a5b      	lsrs	r3, r3, #9
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80027d6:	693b      	ldr	r3, [r7, #16]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80027e0:	b5b0      	push	{r4, r5, r7, lr}
 80027e2:	b094      	sub	sp, #80	; 0x50
 80027e4:	af04      	add	r7, sp, #16
 80027e6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80027e8:	2301      	movs	r3, #1
 80027ea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 ff9c 	bl	800372e <SDIO_GetPowerState>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80027fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002800:	e0b8      	b.n	8002974 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	2b03      	cmp	r3, #3
 8002808:	d02f      	beq.n	800286a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f001 f9c6 	bl	8003ba0 <SDMMC_CmdSendCID>
 8002814:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <SD_InitCard+0x40>
    {
      return errorstate;
 800281c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281e:	e0a9      	b.n	8002974 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2100      	movs	r1, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f000 ffc6 	bl	80037b8 <SDIO_GetResponse>
 800282c:	4602      	mov	r2, r0
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2104      	movs	r1, #4
 8002838:	4618      	mov	r0, r3
 800283a:	f000 ffbd 	bl	80037b8 <SDIO_GetResponse>
 800283e:	4602      	mov	r2, r0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2108      	movs	r1, #8
 800284a:	4618      	mov	r0, r3
 800284c:	f000 ffb4 	bl	80037b8 <SDIO_GetResponse>
 8002850:	4602      	mov	r2, r0
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	210c      	movs	r1, #12
 800285c:	4618      	mov	r0, r3
 800285e:	f000 ffab 	bl	80037b8 <SDIO_GetResponse>
 8002862:	4602      	mov	r2, r0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	2b03      	cmp	r3, #3
 8002870:	d00d      	beq.n	800288e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f107 020e 	add.w	r2, r7, #14
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f001 f9cc 	bl	8003c1a <SDMMC_CmdSetRelAdd>
 8002882:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <SD_InitCard+0xae>
    {
      return errorstate;
 800288a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800288c:	e072      	b.n	8002974 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	2b03      	cmp	r3, #3
 8002894:	d036      	beq.n	8002904 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002896:	89fb      	ldrh	r3, [r7, #14]
 8002898:	461a      	mov	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	4619      	mov	r1, r3
 80028aa:	4610      	mov	r0, r2
 80028ac:	f001 f996 	bl	8003bdc <SDMMC_CmdSendCSD>
 80028b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80028b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <SD_InitCard+0xdc>
    {
      return errorstate;
 80028b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ba:	e05b      	b.n	8002974 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 ff78 	bl	80037b8 <SDIO_GetResponse>
 80028c8:	4602      	mov	r2, r0
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2104      	movs	r1, #4
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 ff6f 	bl	80037b8 <SDIO_GetResponse>
 80028da:	4602      	mov	r2, r0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2108      	movs	r1, #8
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 ff66 	bl	80037b8 <SDIO_GetResponse>
 80028ec:	4602      	mov	r2, r0
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	210c      	movs	r1, #12
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 ff5d 	bl	80037b8 <SDIO_GetResponse>
 80028fe:	4602      	mov	r2, r0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2104      	movs	r1, #4
 800290a:	4618      	mov	r0, r3
 800290c:	f000 ff54 	bl	80037b8 <SDIO_GetResponse>
 8002910:	4603      	mov	r3, r0
 8002912:	0d1a      	lsrs	r2, r3, #20
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002918:	f107 0310 	add.w	r3, r7, #16
 800291c:	4619      	mov	r1, r3
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff fcd4 	bl	80022cc <HAL_SD_GetCardCSD>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800292a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800292e:	e021      	b.n	8002974 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6819      	ldr	r1, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002938:	041b      	lsls	r3, r3, #16
 800293a:	2200      	movs	r2, #0
 800293c:	461c      	mov	r4, r3
 800293e:	4615      	mov	r5, r2
 8002940:	4622      	mov	r2, r4
 8002942:	462b      	mov	r3, r5
 8002944:	4608      	mov	r0, r1
 8002946:	f001 f843 	bl	80039d0 <SDMMC_CmdSelDesel>
 800294a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800294c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <SD_InitCard+0x176>
  {
    return errorstate;
 8002952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002954:	e00e      	b.n	8002974 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681d      	ldr	r5, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	466c      	mov	r4, sp
 800295e:	f103 0210 	add.w	r2, r3, #16
 8002962:	ca07      	ldmia	r2, {r0, r1, r2}
 8002964:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002968:	3304      	adds	r3, #4
 800296a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800296c:	4628      	mov	r0, r5
 800296e:	f000 fe87 	bl	8003680 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3740      	adds	r7, #64	; 0x40
 8002978:	46bd      	mov	sp, r7
 800297a:	bdb0      	pop	{r4, r5, r7, pc}

0800297c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	2300      	movs	r3, #0
 800298e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f001 f83e 	bl	8003a16 <SDMMC_CmdGoIdleState>
 800299a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	e072      	b.n	8002a8c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 f851 	bl	8003a52 <SDMMC_CmdOperCond>
 80029b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00d      	beq.n	80029d4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f001 f827 	bl	8003a16 <SDMMC_CmdGoIdleState>
 80029c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d004      	beq.n	80029da <SD_PowerON+0x5e>
    {
      return errorstate;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	e05b      	b.n	8002a8c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d137      	bne.n	8002a52 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 f851 	bl	8003a90 <SDMMC_CmdAppCommand>
 80029ee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d02d      	beq.n	8002a52 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80029f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80029fa:	e047      	b.n	8002a8c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2100      	movs	r1, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 f844 	bl	8003a90 <SDMMC_CmdAppCommand>
 8002a08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <SD_PowerON+0x98>
    {
      return errorstate;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	e03b      	b.n	8002a8c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	491e      	ldr	r1, [pc, #120]	; (8002a94 <SD_PowerON+0x118>)
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f001 f85a 	bl	8003ad4 <SDMMC_CmdAppOperCommand>
 8002a20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002a28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002a2c:	e02e      	b.n	8002a8c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 febf 	bl	80037b8 <SDIO_GetResponse>
 8002a3a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	0fdb      	lsrs	r3, r3, #31
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <SD_PowerON+0xcc>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <SD_PowerON+0xce>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]

    count++;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d802      	bhi.n	8002a62 <SD_PowerON+0xe6>
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0cc      	beq.n	80029fc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d902      	bls.n	8002a72 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a70:	e00c      	b.n	8002a8c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	645a      	str	r2, [r3, #68]	; 0x44
 8002a82:	e002      	b.n	8002a8a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	c1100000 	.word	0xc1100000

08002a98 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d102      	bne.n	8002aae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002aa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002aac:	e018      	b.n	8002ae0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab6:	041b      	lsls	r3, r3, #16
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4610      	mov	r0, r2
 8002abc:	f001 f8ce 	bl	8003c5c <SDMMC_CmdSendStatus>
 8002ac0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <SD_SendStatus+0x34>
  {
    return errorstate;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	e009      	b.n	8002ae0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fe70 	bl	80037b8 <SDIO_GetResponse>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fe5a 	bl	80037b8 <SDIO_GetResponse>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b0e:	d102      	bne.n	8002b16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002b10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b14:	e02f      	b.n	8002b76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002b16:	f107 030c 	add.w	r3, r7, #12
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f879 	bl	8002c14 <SD_FindSCR>
 8002b22:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	e023      	b.n	8002b76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01c      	beq.n	8002b72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b40:	041b      	lsls	r3, r3, #16
 8002b42:	4619      	mov	r1, r3
 8002b44:	4610      	mov	r0, r2
 8002b46:	f000 ffa3 	bl	8003a90 <SDMMC_CmdAppCommand>
 8002b4a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	e00f      	b.n	8002b76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 ffdc 	bl	8003b1a <SDMMC_CmdBusWidth>
 8002b62:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	e003      	b.n	8002b76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e001      	b.n	8002b76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002b72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b086      	sub	sp, #24
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fe0f 	bl	80037b8 <SDIO_GetResponse>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ba4:	d102      	bne.n	8002bac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002ba6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002baa:	e02f      	b.n	8002c0c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f82e 	bl	8002c14 <SD_FindSCR>
 8002bb8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	e023      	b.n	8002c0c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01c      	beq.n	8002c08 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd6:	041b      	lsls	r3, r3, #16
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4610      	mov	r0, r2
 8002bdc:	f000 ff58 	bl	8003a90 <SDMMC_CmdAppCommand>
 8002be0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	e00f      	b.n	8002c0c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 ff91 	bl	8003b1a <SDMMC_CmdBusWidth>
 8002bf8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	e003      	b.n	8002c0c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e001      	b.n	8002c0c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002c08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002c14:	b590      	push	{r4, r7, lr}
 8002c16:	b08f      	sub	sp, #60	; 0x3c
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002c1e:	f7fe f805 	bl	8000c2c <HAL_GetTick>
 8002c22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2108      	movs	r1, #8
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fdfb 	bl	8003836 <SDMMC_CmdBlockLength>
 8002c40:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <SD_FindSCR+0x38>
  {
    return errorstate;
 8002c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4a:	e0b2      	b.n	8002db2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	4619      	mov	r1, r3
 8002c58:	4610      	mov	r0, r2
 8002c5a:	f000 ff19 	bl	8003a90 <SDMMC_CmdAppCommand>
 8002c5e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <SD_FindSCR+0x56>
  {
    return errorstate;
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	e0a3      	b.n	8002db2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8002c70:	2308      	movs	r3, #8
 8002c72:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002c74:	2330      	movs	r3, #48	; 0x30
 8002c76:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002c80:	2301      	movs	r3, #1
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f107 0210 	add.w	r2, r7, #16
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fda5 	bl	80037de <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 ff60 	bl	8003b5e <SDMMC_CmdSendSCR>
 8002c9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d02a      	beq.n	8002cfc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8002ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca8:	e083      	b.n	8002db2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00f      	beq.n	8002cd8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6819      	ldr	r1, [r3, #0]
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	f107 0208 	add.w	r2, r7, #8
 8002cc4:	18d4      	adds	r4, r2, r3
 8002cc6:	4608      	mov	r0, r1
 8002cc8:	f000 fd05 	bl	80036d6 <SDIO_ReadFIFO>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	6023      	str	r3, [r4, #0]
      index++;
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cd6:	e006      	b.n	8002ce6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d012      	beq.n	8002d0c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002ce6:	f7fd ffa1 	bl	8000c2c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d102      	bne.n	8002cfc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8002cf6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002cfa:	e05a      	b.n	8002db2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0cf      	beq.n	8002caa <SD_FindSCR+0x96>
 8002d0a:	e000      	b.n	8002d0e <SD_FindSCR+0xfa>
      break;
 8002d0c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2208      	movs	r2, #8
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002d24:	2308      	movs	r3, #8
 8002d26:	e044      	b.n	8002db2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e037      	b.n	8002db2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2220      	movs	r2, #32
 8002d56:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8002d58:	2320      	movs	r3, #32
 8002d5a:	e02a      	b.n	8002db2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f240 523a 	movw	r2, #1338	; 0x53a
 8002d64:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	061a      	lsls	r2, r3, #24
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	021b      	lsls	r3, r3, #8
 8002d6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d72:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002d7c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	0e1b      	lsrs	r3, r3, #24
 8002d82:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	601a      	str	r2, [r3, #0]
    scr++;
 8002d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	061a      	lsls	r2, r3, #24
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	021b      	lsls	r3, r3, #8
 8002d96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d9a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002da4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	0e1b      	lsrs	r3, r3, #24
 8002daa:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dae:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	373c      	adds	r7, #60	; 0x3c
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd90      	pop	{r4, r7, pc}

08002dba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e03f      	b.n	8002e4c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7fd fdcb 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2224      	movs	r2, #36	; 0x24
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dfc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f9ca 	bl	8003198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e22:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e32:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	; 0x28
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d17c      	bne.n	8002f6e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <HAL_UART_Transmit+0x2c>
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e075      	b.n	8002f70 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_UART_Transmit+0x3e>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e06e      	b.n	8002f70 <HAL_UART_Transmit+0x11c>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2221      	movs	r2, #33	; 0x21
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ea8:	f7fd fec0 	bl	8000c2c <HAL_GetTick>
 8002eac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	88fa      	ldrh	r2, [r7, #6]
 8002eb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	88fa      	ldrh	r2, [r7, #6]
 8002eb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec2:	d108      	bne.n	8002ed6 <HAL_UART_Transmit+0x82>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d104      	bne.n	8002ed6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	61bb      	str	r3, [r7, #24]
 8002ed4:	e003      	b.n	8002ede <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ee6:	e02a      	b.n	8002f3e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2180      	movs	r1, #128	; 0x80
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f8e2 	bl	80030bc <UART_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e036      	b.n	8002f70 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10b      	bne.n	8002f20 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f16:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	e007      	b.n	8002f30 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1cf      	bne.n	8002ee8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2140      	movs	r1, #64	; 0x40
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f8b2 	bl	80030bc <UART_WaitOnFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e006      	b.n	8002f70 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e000      	b.n	8002f70 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
  }
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3720      	adds	r7, #32
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	; 0x28
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	f040 808c 	bne.w	80030b2 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HAL_UART_Receive+0x2e>
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e084      	b.n	80030b4 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_UART_Receive+0x40>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e07d      	b.n	80030b4 <HAL_UART_Receive+0x13c>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2222      	movs	r2, #34	; 0x22
 8002fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fd4:	f7fd fe2a 	bl	8000c2c <HAL_GetTick>
 8002fd8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	88fa      	ldrh	r2, [r7, #6]
 8002fde:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fee:	d108      	bne.n	8003002 <HAL_UART_Receive+0x8a>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d104      	bne.n	8003002 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	e003      	b.n	800300a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003006:	2300      	movs	r3, #0
 8003008:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003012:	e043      	b.n	800309c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2200      	movs	r2, #0
 800301c:	2120      	movs	r1, #32
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f84c 	bl	80030bc <UART_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e042      	b.n	80030b4 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10c      	bne.n	800304e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	b29b      	uxth	r3, r3
 800303c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003040:	b29a      	uxth	r2, r3
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	3302      	adds	r3, #2
 800304a:	61bb      	str	r3, [r7, #24]
 800304c:	e01f      	b.n	800308e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003056:	d007      	beq.n	8003068 <HAL_UART_Receive+0xf0>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <HAL_UART_Receive+0xfe>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d106      	bne.n	8003076 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	b2da      	uxtb	r2, r3
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	701a      	strb	r2, [r3, #0]
 8003074:	e008      	b.n	8003088 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003082:	b2da      	uxtb	r2, r3
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	3301      	adds	r3, #1
 800308c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1b6      	bne.n	8003014 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e000      	b.n	80030b4 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80030b2:	2302      	movs	r3, #2
  }
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b090      	sub	sp, #64	; 0x40
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030cc:	e050      	b.n	8003170 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d4:	d04c      	beq.n	8003170 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <UART_WaitOnFlagUntilTimeout+0x30>
 80030dc:	f7fd fda6 	bl	8000c2c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d241      	bcs.n	8003170 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	330c      	adds	r3, #12
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f6:	e853 3f00 	ldrex	r3, [r3]
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	330c      	adds	r3, #12
 800310a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800310c:	637a      	str	r2, [r7, #52]	; 0x34
 800310e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003110:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003114:	e841 2300 	strex	r3, r2, [r1]
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e5      	bne.n	80030ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3314      	adds	r3, #20
 8003126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	e853 3f00 	ldrex	r3, [r3]
 800312e:	613b      	str	r3, [r7, #16]
   return(result);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f023 0301 	bic.w	r3, r3, #1
 8003136:	63bb      	str	r3, [r7, #56]	; 0x38
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3314      	adds	r3, #20
 800313e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003140:	623a      	str	r2, [r7, #32]
 8003142:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003144:	69f9      	ldr	r1, [r7, #28]
 8003146:	6a3a      	ldr	r2, [r7, #32]
 8003148:	e841 2300 	strex	r3, r2, [r1]
 800314c:	61bb      	str	r3, [r7, #24]
   return(result);
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e5      	bne.n	8003120 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e00f      	b.n	8003190 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	4013      	ands	r3, r2
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	429a      	cmp	r2, r3
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	429a      	cmp	r2, r3
 800318c:	d09f      	beq.n	80030ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3740      	adds	r7, #64	; 0x40
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800319c:	b0c0      	sub	sp, #256	; 0x100
 800319e:	af00      	add	r7, sp, #0
 80031a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	68d9      	ldr	r1, [r3, #12]
 80031b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	ea40 0301 	orr.w	r3, r0, r1
 80031c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031f0:	f021 010c 	bic.w	r1, r1, #12
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031fe:	430b      	orrs	r3, r1
 8003200:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003212:	6999      	ldr	r1, [r3, #24]
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	ea40 0301 	orr.w	r3, r0, r1
 800321e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4b8f      	ldr	r3, [pc, #572]	; (8003464 <UART_SetConfig+0x2cc>)
 8003228:	429a      	cmp	r2, r3
 800322a:	d005      	beq.n	8003238 <UART_SetConfig+0xa0>
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4b8d      	ldr	r3, [pc, #564]	; (8003468 <UART_SetConfig+0x2d0>)
 8003234:	429a      	cmp	r2, r3
 8003236:	d104      	bne.n	8003242 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003238:	f7fe fc20 	bl	8001a7c <HAL_RCC_GetPCLK2Freq>
 800323c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003240:	e003      	b.n	800324a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003242:	f7fe fc07 	bl	8001a54 <HAL_RCC_GetPCLK1Freq>
 8003246:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800324a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003254:	f040 810c 	bne.w	8003470 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800325c:	2200      	movs	r2, #0
 800325e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003262:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003266:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800326a:	4622      	mov	r2, r4
 800326c:	462b      	mov	r3, r5
 800326e:	1891      	adds	r1, r2, r2
 8003270:	65b9      	str	r1, [r7, #88]	; 0x58
 8003272:	415b      	adcs	r3, r3
 8003274:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003276:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800327a:	4621      	mov	r1, r4
 800327c:	eb12 0801 	adds.w	r8, r2, r1
 8003280:	4629      	mov	r1, r5
 8003282:	eb43 0901 	adc.w	r9, r3, r1
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800329a:	4690      	mov	r8, r2
 800329c:	4699      	mov	r9, r3
 800329e:	4623      	mov	r3, r4
 80032a0:	eb18 0303 	adds.w	r3, r8, r3
 80032a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032a8:	462b      	mov	r3, r5
 80032aa:	eb49 0303 	adc.w	r3, r9, r3
 80032ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032c6:	460b      	mov	r3, r1
 80032c8:	18db      	adds	r3, r3, r3
 80032ca:	653b      	str	r3, [r7, #80]	; 0x50
 80032cc:	4613      	mov	r3, r2
 80032ce:	eb42 0303 	adc.w	r3, r2, r3
 80032d2:	657b      	str	r3, [r7, #84]	; 0x54
 80032d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032dc:	f7fc ff74 	bl	80001c8 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4b61      	ldr	r3, [pc, #388]	; (800346c <UART_SetConfig+0x2d4>)
 80032e6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	011c      	lsls	r4, r3, #4
 80032ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032f2:	2200      	movs	r2, #0
 80032f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003300:	4642      	mov	r2, r8
 8003302:	464b      	mov	r3, r9
 8003304:	1891      	adds	r1, r2, r2
 8003306:	64b9      	str	r1, [r7, #72]	; 0x48
 8003308:	415b      	adcs	r3, r3
 800330a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800330c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003310:	4641      	mov	r1, r8
 8003312:	eb12 0a01 	adds.w	sl, r2, r1
 8003316:	4649      	mov	r1, r9
 8003318:	eb43 0b01 	adc.w	fp, r3, r1
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003328:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800332c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003330:	4692      	mov	sl, r2
 8003332:	469b      	mov	fp, r3
 8003334:	4643      	mov	r3, r8
 8003336:	eb1a 0303 	adds.w	r3, sl, r3
 800333a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800333e:	464b      	mov	r3, r9
 8003340:	eb4b 0303 	adc.w	r3, fp, r3
 8003344:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003354:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003358:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800335c:	460b      	mov	r3, r1
 800335e:	18db      	adds	r3, r3, r3
 8003360:	643b      	str	r3, [r7, #64]	; 0x40
 8003362:	4613      	mov	r3, r2
 8003364:	eb42 0303 	adc.w	r3, r2, r3
 8003368:	647b      	str	r3, [r7, #68]	; 0x44
 800336a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800336e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003372:	f7fc ff29 	bl	80001c8 <__aeabi_uldivmod>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4611      	mov	r1, r2
 800337c:	4b3b      	ldr	r3, [pc, #236]	; (800346c <UART_SetConfig+0x2d4>)
 800337e:	fba3 2301 	umull	r2, r3, r3, r1
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	2264      	movs	r2, #100	; 0x64
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	1acb      	subs	r3, r1, r3
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003392:	4b36      	ldr	r3, [pc, #216]	; (800346c <UART_SetConfig+0x2d4>)
 8003394:	fba3 2302 	umull	r2, r3, r3, r2
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033a0:	441c      	add	r4, r3
 80033a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033b4:	4642      	mov	r2, r8
 80033b6:	464b      	mov	r3, r9
 80033b8:	1891      	adds	r1, r2, r2
 80033ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80033bc:	415b      	adcs	r3, r3
 80033be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033c4:	4641      	mov	r1, r8
 80033c6:	1851      	adds	r1, r2, r1
 80033c8:	6339      	str	r1, [r7, #48]	; 0x30
 80033ca:	4649      	mov	r1, r9
 80033cc:	414b      	adcs	r3, r1
 80033ce:	637b      	str	r3, [r7, #52]	; 0x34
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033dc:	4659      	mov	r1, fp
 80033de:	00cb      	lsls	r3, r1, #3
 80033e0:	4651      	mov	r1, sl
 80033e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033e6:	4651      	mov	r1, sl
 80033e8:	00ca      	lsls	r2, r1, #3
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	4642      	mov	r2, r8
 80033f2:	189b      	adds	r3, r3, r2
 80033f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033f8:	464b      	mov	r3, r9
 80033fa:	460a      	mov	r2, r1
 80033fc:	eb42 0303 	adc.w	r3, r2, r3
 8003400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003410:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003414:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003418:	460b      	mov	r3, r1
 800341a:	18db      	adds	r3, r3, r3
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
 800341e:	4613      	mov	r3, r2
 8003420:	eb42 0303 	adc.w	r3, r2, r3
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800342a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800342e:	f7fc fecb 	bl	80001c8 <__aeabi_uldivmod>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4b0d      	ldr	r3, [pc, #52]	; (800346c <UART_SetConfig+0x2d4>)
 8003438:	fba3 1302 	umull	r1, r3, r3, r2
 800343c:	095b      	lsrs	r3, r3, #5
 800343e:	2164      	movs	r1, #100	; 0x64
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	3332      	adds	r3, #50	; 0x32
 800344a:	4a08      	ldr	r2, [pc, #32]	; (800346c <UART_SetConfig+0x2d4>)
 800344c:	fba2 2303 	umull	r2, r3, r2, r3
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	f003 0207 	and.w	r2, r3, #7
 8003456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4422      	add	r2, r4
 800345e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003460:	e105      	b.n	800366e <UART_SetConfig+0x4d6>
 8003462:	bf00      	nop
 8003464:	40011000 	.word	0x40011000
 8003468:	40011400 	.word	0x40011400
 800346c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003474:	2200      	movs	r2, #0
 8003476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800347a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800347e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003482:	4642      	mov	r2, r8
 8003484:	464b      	mov	r3, r9
 8003486:	1891      	adds	r1, r2, r2
 8003488:	6239      	str	r1, [r7, #32]
 800348a:	415b      	adcs	r3, r3
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
 800348e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003492:	4641      	mov	r1, r8
 8003494:	1854      	adds	r4, r2, r1
 8003496:	4649      	mov	r1, r9
 8003498:	eb43 0501 	adc.w	r5, r3, r1
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	00eb      	lsls	r3, r5, #3
 80034a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034aa:	00e2      	lsls	r2, r4, #3
 80034ac:	4614      	mov	r4, r2
 80034ae:	461d      	mov	r5, r3
 80034b0:	4643      	mov	r3, r8
 80034b2:	18e3      	adds	r3, r4, r3
 80034b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034b8:	464b      	mov	r3, r9
 80034ba:	eb45 0303 	adc.w	r3, r5, r3
 80034be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034de:	4629      	mov	r1, r5
 80034e0:	008b      	lsls	r3, r1, #2
 80034e2:	4621      	mov	r1, r4
 80034e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034e8:	4621      	mov	r1, r4
 80034ea:	008a      	lsls	r2, r1, #2
 80034ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034f0:	f7fc fe6a 	bl	80001c8 <__aeabi_uldivmod>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4b60      	ldr	r3, [pc, #384]	; (800367c <UART_SetConfig+0x4e4>)
 80034fa:	fba3 2302 	umull	r2, r3, r3, r2
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	011c      	lsls	r4, r3, #4
 8003502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003506:	2200      	movs	r2, #0
 8003508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800350c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003510:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003514:	4642      	mov	r2, r8
 8003516:	464b      	mov	r3, r9
 8003518:	1891      	adds	r1, r2, r2
 800351a:	61b9      	str	r1, [r7, #24]
 800351c:	415b      	adcs	r3, r3
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003524:	4641      	mov	r1, r8
 8003526:	1851      	adds	r1, r2, r1
 8003528:	6139      	str	r1, [r7, #16]
 800352a:	4649      	mov	r1, r9
 800352c:	414b      	adcs	r3, r1
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800353c:	4659      	mov	r1, fp
 800353e:	00cb      	lsls	r3, r1, #3
 8003540:	4651      	mov	r1, sl
 8003542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003546:	4651      	mov	r1, sl
 8003548:	00ca      	lsls	r2, r1, #3
 800354a:	4610      	mov	r0, r2
 800354c:	4619      	mov	r1, r3
 800354e:	4603      	mov	r3, r0
 8003550:	4642      	mov	r2, r8
 8003552:	189b      	adds	r3, r3, r2
 8003554:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003558:	464b      	mov	r3, r9
 800355a:	460a      	mov	r2, r1
 800355c:	eb42 0303 	adc.w	r3, r2, r3
 8003560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	67bb      	str	r3, [r7, #120]	; 0x78
 800356e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800357c:	4649      	mov	r1, r9
 800357e:	008b      	lsls	r3, r1, #2
 8003580:	4641      	mov	r1, r8
 8003582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003586:	4641      	mov	r1, r8
 8003588:	008a      	lsls	r2, r1, #2
 800358a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800358e:	f7fc fe1b 	bl	80001c8 <__aeabi_uldivmod>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4b39      	ldr	r3, [pc, #228]	; (800367c <UART_SetConfig+0x4e4>)
 8003598:	fba3 1302 	umull	r1, r3, r3, r2
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	2164      	movs	r1, #100	; 0x64
 80035a0:	fb01 f303 	mul.w	r3, r1, r3
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	3332      	adds	r3, #50	; 0x32
 80035aa:	4a34      	ldr	r2, [pc, #208]	; (800367c <UART_SetConfig+0x4e4>)
 80035ac:	fba2 2303 	umull	r2, r3, r2, r3
 80035b0:	095b      	lsrs	r3, r3, #5
 80035b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b6:	441c      	add	r4, r3
 80035b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035bc:	2200      	movs	r2, #0
 80035be:	673b      	str	r3, [r7, #112]	; 0x70
 80035c0:	677a      	str	r2, [r7, #116]	; 0x74
 80035c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035c6:	4642      	mov	r2, r8
 80035c8:	464b      	mov	r3, r9
 80035ca:	1891      	adds	r1, r2, r2
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	415b      	adcs	r3, r3
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035d6:	4641      	mov	r1, r8
 80035d8:	1851      	adds	r1, r2, r1
 80035da:	6039      	str	r1, [r7, #0]
 80035dc:	4649      	mov	r1, r9
 80035de:	414b      	adcs	r3, r1
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035ee:	4659      	mov	r1, fp
 80035f0:	00cb      	lsls	r3, r1, #3
 80035f2:	4651      	mov	r1, sl
 80035f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035f8:	4651      	mov	r1, sl
 80035fa:	00ca      	lsls	r2, r1, #3
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	4603      	mov	r3, r0
 8003602:	4642      	mov	r2, r8
 8003604:	189b      	adds	r3, r3, r2
 8003606:	66bb      	str	r3, [r7, #104]	; 0x68
 8003608:	464b      	mov	r3, r9
 800360a:	460a      	mov	r2, r1
 800360c:	eb42 0303 	adc.w	r3, r2, r3
 8003610:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	663b      	str	r3, [r7, #96]	; 0x60
 800361c:	667a      	str	r2, [r7, #100]	; 0x64
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800362a:	4649      	mov	r1, r9
 800362c:	008b      	lsls	r3, r1, #2
 800362e:	4641      	mov	r1, r8
 8003630:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003634:	4641      	mov	r1, r8
 8003636:	008a      	lsls	r2, r1, #2
 8003638:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800363c:	f7fc fdc4 	bl	80001c8 <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4b0d      	ldr	r3, [pc, #52]	; (800367c <UART_SetConfig+0x4e4>)
 8003646:	fba3 1302 	umull	r1, r3, r3, r2
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	2164      	movs	r1, #100	; 0x64
 800364e:	fb01 f303 	mul.w	r3, r1, r3
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	3332      	adds	r3, #50	; 0x32
 8003658:	4a08      	ldr	r2, [pc, #32]	; (800367c <UART_SetConfig+0x4e4>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	f003 020f 	and.w	r2, r3, #15
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4422      	add	r2, r4
 800366c:	609a      	str	r2, [r3, #8]
}
 800366e:	bf00      	nop
 8003670:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003674:	46bd      	mov	sp, r7
 8003676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800367a:	bf00      	nop
 800367c:	51eb851f 	.word	0x51eb851f

08003680 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003680:	b084      	sub	sp, #16
 8003682:	b480      	push	{r7}
 8003684:	b085      	sub	sp, #20
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	f107 001c 	add.w	r0, r7, #28
 800368e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003696:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003698:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800369a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800369e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80036a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80036a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80036aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80036ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	b004      	add	sp, #16
 80036d4:	4770      	bx	lr

080036d6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2203      	movs	r2, #3
 800371e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0303 	and.w	r3, r3, #3
}
 800373e:	4618      	mov	r0, r3
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003768:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800376e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003774:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003784:	f023 030f 	bic.w	r3, r3, #15
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	b2db      	uxtb	r3, r3
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3314      	adds	r3, #20
 80037c6:	461a      	mov	r2, r3
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4413      	add	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
}  
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80037de:	b480      	push	{r7}
 80037e0:	b085      	sub	sp, #20
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003804:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800380a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003810:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4313      	orrs	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003828:	2300      	movs	r3, #0

}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b088      	sub	sp, #32
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003844:	2310      	movs	r3, #16
 8003846:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003848:	2340      	movs	r3, #64	; 0x40
 800384a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003854:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003856:	f107 0308 	add.w	r3, r7, #8
 800385a:	4619      	mov	r1, r3
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff ff74 	bl	800374a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003862:	f241 3288 	movw	r2, #5000	; 0x1388
 8003866:	2110      	movs	r1, #16
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fa19 	bl	8003ca0 <SDMMC_GetCmdResp1>
 800386e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003870:	69fb      	ldr	r3, [r7, #28]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3720      	adds	r7, #32
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b088      	sub	sp, #32
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003888:	2311      	movs	r3, #17
 800388a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800388c:	2340      	movs	r3, #64	; 0x40
 800388e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003898:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800389a:	f107 0308 	add.w	r3, r7, #8
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff ff52 	bl	800374a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80038a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038aa:	2111      	movs	r1, #17
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f9f7 	bl	8003ca0 <SDMMC_GetCmdResp1>
 80038b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038b4:	69fb      	ldr	r3, [r7, #28]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3720      	adds	r7, #32
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b088      	sub	sp, #32
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80038cc:	2312      	movs	r3, #18
 80038ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80038d0:	2340      	movs	r3, #64	; 0x40
 80038d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80038d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80038de:	f107 0308 	add.w	r3, r7, #8
 80038e2:	4619      	mov	r1, r3
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ff30 	bl	800374a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	2112      	movs	r1, #18
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f9d5 	bl	8003ca0 <SDMMC_GetCmdResp1>
 80038f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038f8:	69fb      	ldr	r3, [r7, #28]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b088      	sub	sp, #32
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003910:	2318      	movs	r3, #24
 8003912:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003914:	2340      	movs	r3, #64	; 0x40
 8003916:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800391c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003920:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003922:	f107 0308 	add.w	r3, r7, #8
 8003926:	4619      	mov	r1, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff0e 	bl	800374a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800392e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003932:	2118      	movs	r1, #24
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f9b3 	bl	8003ca0 <SDMMC_GetCmdResp1>
 800393a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800393c:	69fb      	ldr	r3, [r7, #28]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3720      	adds	r7, #32
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b088      	sub	sp, #32
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003954:	2319      	movs	r3, #25
 8003956:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003958:	2340      	movs	r3, #64	; 0x40
 800395a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003964:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003966:	f107 0308 	add.w	r3, r7, #8
 800396a:	4619      	mov	r1, r3
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff feec 	bl	800374a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003972:	f241 3288 	movw	r2, #5000	; 0x1388
 8003976:	2119      	movs	r1, #25
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f991 	bl	8003ca0 <SDMMC_GetCmdResp1>
 800397e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003980:	69fb      	ldr	r3, [r7, #28]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003998:	230c      	movs	r3, #12
 800399a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800399c:	2340      	movs	r3, #64	; 0x40
 800399e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039aa:	f107 0308 	add.w	r3, r7, #8
 80039ae:	4619      	mov	r1, r3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff feca 	bl	800374a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80039b6:	4a05      	ldr	r2, [pc, #20]	; (80039cc <SDMMC_CmdStopTransfer+0x40>)
 80039b8:	210c      	movs	r1, #12
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f970 	bl	8003ca0 <SDMMC_GetCmdResp1>
 80039c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039c2:	69fb      	ldr	r3, [r7, #28]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3720      	adds	r7, #32
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	05f5e100 	.word	0x05f5e100

080039d0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08a      	sub	sp, #40	; 0x28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80039e0:	2307      	movs	r3, #7
 80039e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039e4:	2340      	movs	r3, #64	; 0x40
 80039e6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039f0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039f2:	f107 0310 	add.w	r3, r7, #16
 80039f6:	4619      	mov	r1, r3
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f7ff fea6 	bl	800374a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80039fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a02:	2107      	movs	r1, #7
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f94b 	bl	8003ca0 <SDMMC_GetCmdResp1>
 8003a0a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3728      	adds	r7, #40	; 0x28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b088      	sub	sp, #32
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003a26:	2300      	movs	r3, #0
 8003a28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a34:	f107 0308 	add.w	r3, r7, #8
 8003a38:	4619      	mov	r1, r3
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff fe85 	bl	800374a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fb65 	bl	8004110 <SDMMC_GetCmdError>
 8003a46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a48:	69fb      	ldr	r3, [r7, #28]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3720      	adds	r7, #32
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b088      	sub	sp, #32
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003a5a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003a5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003a60:	2308      	movs	r3, #8
 8003a62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a64:	2340      	movs	r3, #64	; 0x40
 8003a66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a72:	f107 0308 	add.w	r3, r7, #8
 8003a76:	4619      	mov	r1, r3
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff fe66 	bl	800374a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 faf8 	bl	8004074 <SDMMC_GetCmdResp7>
 8003a84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a86:	69fb      	ldr	r3, [r7, #28]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3720      	adds	r7, #32
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003a9e:	2337      	movs	r3, #55	; 0x37
 8003aa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003aa2:	2340      	movs	r3, #64	; 0x40
 8003aa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ab0:	f107 0308 	add.w	r3, r7, #8
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff fe47 	bl	800374a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac0:	2137      	movs	r1, #55	; 0x37
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f8ec 	bl	8003ca0 <SDMMC_GetCmdResp1>
 8003ac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003aca:	69fb      	ldr	r3, [r7, #28]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3720      	adds	r7, #32
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ae8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003aea:	2329      	movs	r3, #41	; 0x29
 8003aec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003aee:	2340      	movs	r3, #64	; 0x40
 8003af0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003afa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003afc:	f107 0308 	add.w	r3, r7, #8
 8003b00:	4619      	mov	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff fe21 	bl	800374a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f9ff 	bl	8003f0c <SDMMC_GetCmdResp3>
 8003b0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b10:	69fb      	ldr	r3, [r7, #28]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3720      	adds	r7, #32
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b088      	sub	sp, #32
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003b28:	2306      	movs	r3, #6
 8003b2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b2c:	2340      	movs	r3, #64	; 0x40
 8003b2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b3a:	f107 0308 	add.w	r3, r7, #8
 8003b3e:	4619      	mov	r1, r3
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff fe02 	bl	800374a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4a:	2106      	movs	r1, #6
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f8a7 	bl	8003ca0 <SDMMC_GetCmdResp1>
 8003b52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b54:	69fb      	ldr	r3, [r7, #28]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3720      	adds	r7, #32
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b088      	sub	sp, #32
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003b6a:	2333      	movs	r3, #51	; 0x33
 8003b6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b6e:	2340      	movs	r3, #64	; 0x40
 8003b70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b7c:	f107 0308 	add.w	r3, r7, #8
 8003b80:	4619      	mov	r1, r3
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff fde1 	bl	800374a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8003b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8c:	2133      	movs	r1, #51	; 0x33
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f886 	bl	8003ca0 <SDMMC_GetCmdResp1>
 8003b94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b96:	69fb      	ldr	r3, [r7, #28]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3720      	adds	r7, #32
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003bac:	2302      	movs	r3, #2
 8003bae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003bb0:	23c0      	movs	r3, #192	; 0xc0
 8003bb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bbe:	f107 0308 	add.w	r3, r7, #8
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff fdc0 	bl	800374a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f956 	bl	8003e7c <SDMMC_GetCmdResp2>
 8003bd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003bea:	2309      	movs	r3, #9
 8003bec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003bee:	23c0      	movs	r3, #192	; 0xc0
 8003bf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bfc:	f107 0308 	add.w	r3, r7, #8
 8003c00:	4619      	mov	r1, r3
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff fda1 	bl	800374a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f937 	bl	8003e7c <SDMMC_GetCmdResp2>
 8003c0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c10:	69fb      	ldr	r3, [r7, #28]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3720      	adds	r7, #32
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b088      	sub	sp, #32
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c2c:	2340      	movs	r3, #64	; 0x40
 8003c2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c3a:	f107 0308 	add.w	r3, r7, #8
 8003c3e:	4619      	mov	r1, r3
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff fd82 	bl	800374a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	2103      	movs	r1, #3
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f99c 	bl	8003f88 <SDMMC_GetCmdResp6>
 8003c50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c52:	69fb      	ldr	r3, [r7, #28]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3720      	adds	r7, #32
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003c6a:	230d      	movs	r3, #13
 8003c6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c6e:	2340      	movs	r3, #64	; 0x40
 8003c70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c7c:	f107 0308 	add.w	r3, r7, #8
 8003c80:	4619      	mov	r1, r3
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff fd61 	bl	800374a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8c:	210d      	movs	r1, #13
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f806 	bl	8003ca0 <SDMMC_GetCmdResp1>
 8003c94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c96:	69fb      	ldr	r3, [r7, #28]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3720      	adds	r7, #32
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003cae:	4b70      	ldr	r3, [pc, #448]	; (8003e70 <SDMMC_GetCmdResp1+0x1d0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a70      	ldr	r2, [pc, #448]	; (8003e74 <SDMMC_GetCmdResp1+0x1d4>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	0a5a      	lsrs	r2, r3, #9
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	fb02 f303 	mul.w	r3, r2, r3
 8003cc0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	1e5a      	subs	r2, r3, #1
 8003cc6:	61fa      	str	r2, [r7, #28]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d102      	bne.n	8003cd2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003ccc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003cd0:	e0c9      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0ef      	beq.n	8003cc2 <SDMMC_GetCmdResp1+0x22>
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1ea      	bne.n	8003cc2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d004      	beq.n	8003d02 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003cfe:	2304      	movs	r3, #4
 8003d00:	e0b1      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d004      	beq.n	8003d18 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0a6      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	22c5      	movs	r2, #197	; 0xc5
 8003d1c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7ff fd3d 	bl	800379e <SDIO_GetCommandResponse>
 8003d24:	4603      	mov	r3, r0
 8003d26:	461a      	mov	r2, r3
 8003d28:	7afb      	ldrb	r3, [r7, #11]
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d001      	beq.n	8003d32 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e099      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003d32:	2100      	movs	r1, #0
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f7ff fd3f 	bl	80037b8 <SDIO_GetResponse>
 8003d3a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4b4e      	ldr	r3, [pc, #312]	; (8003e78 <SDMMC_GetCmdResp1+0x1d8>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e08d      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	da02      	bge.n	8003d56 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003d50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d54:	e087      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003d60:	2340      	movs	r3, #64	; 0x40
 8003d62:	e080      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003d6e:	2380      	movs	r3, #128	; 0x80
 8003d70:	e079      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d80:	e071      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d90:	e069      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003da0:	e061      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003dac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003db0:	e059      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dc0:	e051      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dd0:	e049      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003ddc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003de0:	e041      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003dec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df0:	e039      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e00:	e031      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003e0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e10:	e029      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003e1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003e20:	e021      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003e2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e30:	e019      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003e3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e40:	e011      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003e4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e50:	e009      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003e5c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003e60:	e001      	b.n	8003e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003e62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000000 	.word	0x20000000
 8003e74:	10624dd3 	.word	0x10624dd3
 8003e78:	fdffe008 	.word	0xfdffe008

08003e7c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003e84:	4b1f      	ldr	r3, [pc, #124]	; (8003f04 <SDMMC_GetCmdResp2+0x88>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1f      	ldr	r2, [pc, #124]	; (8003f08 <SDMMC_GetCmdResp2+0x8c>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	0a5b      	lsrs	r3, r3, #9
 8003e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e94:	fb02 f303 	mul.w	r3, r2, r3
 8003e98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1e5a      	subs	r2, r3, #1
 8003e9e:	60fa      	str	r2, [r7, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003ea4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ea8:	e026      	b.n	8003ef8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0ef      	beq.n	8003e9a <SDMMC_GetCmdResp2+0x1e>
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1ea      	bne.n	8003e9a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003ed6:	2304      	movs	r3, #4
 8003ed8:	e00e      	b.n	8003ef8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d004      	beq.n	8003ef0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e003      	b.n	8003ef8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	22c5      	movs	r2, #197	; 0xc5
 8003ef4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	20000000 	.word	0x20000000
 8003f08:	10624dd3 	.word	0x10624dd3

08003f0c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f14:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <SDMMC_GetCmdResp3+0x74>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1a      	ldr	r2, [pc, #104]	; (8003f84 <SDMMC_GetCmdResp3+0x78>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	0a5b      	lsrs	r3, r3, #9
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	fb02 f303 	mul.w	r3, r2, r3
 8003f28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1e5a      	subs	r2, r3, #1
 8003f2e:	60fa      	str	r2, [r7, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003f34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f38:	e01b      	b.n	8003f72 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0ef      	beq.n	8003f2a <SDMMC_GetCmdResp3+0x1e>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1ea      	bne.n	8003f2a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d004      	beq.n	8003f6a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2204      	movs	r2, #4
 8003f64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f66:	2304      	movs	r3, #4
 8003f68:	e003      	b.n	8003f72 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	22c5      	movs	r2, #197	; 0xc5
 8003f6e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	20000000 	.word	0x20000000
 8003f84:	10624dd3 	.word	0x10624dd3

08003f88 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	460b      	mov	r3, r1
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f96:	4b35      	ldr	r3, [pc, #212]	; (800406c <SDMMC_GetCmdResp6+0xe4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a35      	ldr	r2, [pc, #212]	; (8004070 <SDMMC_GetCmdResp6+0xe8>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	0a5b      	lsrs	r3, r3, #9
 8003fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa6:	fb02 f303 	mul.w	r3, r2, r3
 8003faa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	1e5a      	subs	r2, r3, #1
 8003fb0:	61fa      	str	r2, [r7, #28]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d102      	bne.n	8003fbc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003fb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003fba:	e052      	b.n	8004062 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0ef      	beq.n	8003fac <SDMMC_GetCmdResp6+0x24>
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1ea      	bne.n	8003fac <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d004      	beq.n	8003fec <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003fe8:	2304      	movs	r3, #4
 8003fea:	e03a      	b.n	8004062 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d004      	beq.n	8004002 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e02f      	b.n	8004062 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f7ff fbcb 	bl	800379e <SDIO_GetCommandResponse>
 8004008:	4603      	mov	r3, r0
 800400a:	461a      	mov	r2, r3
 800400c:	7afb      	ldrb	r3, [r7, #11]
 800400e:	4293      	cmp	r3, r2
 8004010:	d001      	beq.n	8004016 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004012:	2301      	movs	r3, #1
 8004014:	e025      	b.n	8004062 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	22c5      	movs	r2, #197	; 0xc5
 800401a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800401c:	2100      	movs	r1, #0
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f7ff fbca 	bl	80037b8 <SDIO_GetResponse>
 8004024:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d106      	bne.n	800403e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	0c1b      	lsrs	r3, r3, #16
 8004034:	b29a      	uxth	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800403a:	2300      	movs	r3, #0
 800403c:	e011      	b.n	8004062 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800404c:	e009      	b.n	8004062 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800405c:	e001      	b.n	8004062 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800405e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004062:	4618      	mov	r0, r3
 8004064:	3720      	adds	r7, #32
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000000 	.word	0x20000000
 8004070:	10624dd3 	.word	0x10624dd3

08004074 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800407c:	4b22      	ldr	r3, [pc, #136]	; (8004108 <SDMMC_GetCmdResp7+0x94>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a22      	ldr	r2, [pc, #136]	; (800410c <SDMMC_GetCmdResp7+0x98>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	0a5b      	lsrs	r3, r3, #9
 8004088:	f241 3288 	movw	r2, #5000	; 0x1388
 800408c:	fb02 f303 	mul.w	r3, r2, r3
 8004090:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1e5a      	subs	r2, r3, #1
 8004096:	60fa      	str	r2, [r7, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d102      	bne.n	80040a2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800409c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80040a0:	e02c      	b.n	80040fc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0ef      	beq.n	8004092 <SDMMC_GetCmdResp7+0x1e>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1ea      	bne.n	8004092 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d004      	beq.n	80040d2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2204      	movs	r2, #4
 80040cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80040ce:	2304      	movs	r3, #4
 80040d0:	e014      	b.n	80040fc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d004      	beq.n	80040e8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e009      	b.n	80040fc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2240      	movs	r2, #64	; 0x40
 80040f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80040fa:	2300      	movs	r3, #0
  
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	20000000 	.word	0x20000000
 800410c:	10624dd3 	.word	0x10624dd3

08004110 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004118:	4b11      	ldr	r3, [pc, #68]	; (8004160 <SDMMC_GetCmdError+0x50>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a11      	ldr	r2, [pc, #68]	; (8004164 <SDMMC_GetCmdError+0x54>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	0a5b      	lsrs	r3, r3, #9
 8004124:	f241 3288 	movw	r2, #5000	; 0x1388
 8004128:	fb02 f303 	mul.w	r3, r2, r3
 800412c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1e5a      	subs	r2, r3, #1
 8004132:	60fa      	str	r2, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d102      	bne.n	800413e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004138:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800413c:	e009      	b.n	8004152 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f1      	beq.n	800412e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	22c5      	movs	r2, #197	; 0xc5
 800414e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	20000000 	.word	0x20000000
 8004164:	10624dd3 	.word	0x10624dd3

08004168 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800416c:	4904      	ldr	r1, [pc, #16]	; (8004180 <MX_FATFS_Init+0x18>)
 800416e:	4805      	ldr	r0, [pc, #20]	; (8004184 <MX_FATFS_Init+0x1c>)
 8004170:	f000 f9e4 	bl	800453c <FATFS_LinkDriver>
 8004174:	4603      	mov	r3, r0
 8004176:	461a      	mov	r2, r3
 8004178:	4b03      	ldr	r3, [pc, #12]	; (8004188 <MX_FATFS_Init+0x20>)
 800417a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800417c:	bf00      	nop
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000160 	.word	0x20000160
 8004184:	08004780 	.word	0x08004780
 8004188:	2000015c 	.word	0x2000015c

0800418c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004196:	f000 f879 	bl	800428c <BSP_SD_IsDetected>
 800419a:	4603      	mov	r3, r0
 800419c:	2b01      	cmp	r3, #1
 800419e:	d001      	beq.n	80041a4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e012      	b.n	80041ca <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80041a4:	480b      	ldr	r0, [pc, #44]	; (80041d4 <BSP_SD_Init+0x48>)
 80041a6:	f7fd fc7d 	bl	8001aa4 <HAL_SD_Init>
 80041aa:	4603      	mov	r3, r0
 80041ac:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d109      	bne.n	80041c8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80041b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041b8:	4806      	ldr	r0, [pc, #24]	; (80041d4 <BSP_SD_Init+0x48>)
 80041ba:	f7fe fa57 	bl	800266c <HAL_SD_ConfigWideBusOperation>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80041c8:	79fb      	ldrb	r3, [r7, #7]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	2000008c 	.word	0x2000008c

080041d8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	68f9      	ldr	r1, [r7, #12]
 80041f4:	4806      	ldr	r0, [pc, #24]	; (8004210 <BSP_SD_ReadBlocks+0x38>)
 80041f6:	f7fd fd05 	bl	8001c04 <HAL_SD_ReadBlocks>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004204:	7dfb      	ldrb	r3, [r7, #23]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	2000008c 	.word	0x2000008c

08004214 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	68f9      	ldr	r1, [r7, #12]
 8004230:	4806      	ldr	r0, [pc, #24]	; (800424c <BSP_SD_WriteBlocks+0x38>)
 8004232:	f7fd fec5 	bl	8001fc0 <HAL_SD_WriteBlocks>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004240:	7dfb      	ldrb	r3, [r7, #23]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	2000008c 	.word	0x2000008c

08004250 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004254:	4805      	ldr	r0, [pc, #20]	; (800426c <BSP_SD_GetCardState+0x1c>)
 8004256:	f7fe faa3 	bl	80027a0 <HAL_SD_GetCardState>
 800425a:	4603      	mov	r3, r0
 800425c:	2b04      	cmp	r3, #4
 800425e:	bf14      	ite	ne
 8004260:	2301      	movne	r3, #1
 8004262:	2300      	moveq	r3, #0
 8004264:	b2db      	uxtb	r3, r3
}
 8004266:	4618      	mov	r0, r3
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	2000008c 	.word	0x2000008c

08004270 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4803      	ldr	r0, [pc, #12]	; (8004288 <BSP_SD_GetCardInfo+0x18>)
 800427c:	f7fe f9ca 	bl	8002614 <HAL_SD_GetCardInfo>
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	2000008c 	.word	0x2000008c

0800428c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004292:	2301      	movs	r3, #1
 8004294:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8004296:	f000 f80b 	bl	80042b0 <BSP_PlatformIsDetected>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80042a0:	2300      	movs	r3, #0
 80042a2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	b2db      	uxtb	r3, r3
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80042b6:	2301      	movs	r3, #1
 80042b8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80042ba:	2110      	movs	r1, #16
 80042bc:	4806      	ldr	r0, [pc, #24]	; (80042d8 <BSP_PlatformIsDetected+0x28>)
 80042be:	f7fc ff67 	bl	8001190 <HAL_GPIO_ReadPin>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80042c8:	2300      	movs	r3, #0
 80042ca:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80042cc:	79fb      	ldrb	r3, [r7, #7]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000

080042dc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80042e6:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <SD_CheckStatus+0x38>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80042ec:	f7ff ffb0 	bl	8004250 <BSP_SD_GetCardState>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d107      	bne.n	8004306 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80042f6:	4b07      	ldr	r3, [pc, #28]	; (8004314 <SD_CheckStatus+0x38>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	b2da      	uxtb	r2, r3
 8004302:	4b04      	ldr	r3, [pc, #16]	; (8004314 <SD_CheckStatus+0x38>)
 8004304:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004306:	4b03      	ldr	r3, [pc, #12]	; (8004314 <SD_CheckStatus+0x38>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	b2db      	uxtb	r3, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20000009 	.word	0x20000009

08004318 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <SD_initialize+0x38>)
 8004324:	2201      	movs	r2, #1
 8004326:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004328:	f7ff ff30 	bl	800418c <BSP_SD_Init>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d107      	bne.n	8004342 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff ffd1 	bl	80042dc <SD_CheckStatus>
 800433a:	4603      	mov	r3, r0
 800433c:	461a      	mov	r2, r3
 800433e:	4b04      	ldr	r3, [pc, #16]	; (8004350 <SD_initialize+0x38>)
 8004340:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004342:	4b03      	ldr	r3, [pc, #12]	; (8004350 <SD_initialize+0x38>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	b2db      	uxtb	r3, r3
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20000009 	.word	0x20000009

08004354 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff ffbb 	bl	80042dc <SD_CheckStatus>
 8004366:	4603      	mov	r3, r0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	4603      	mov	r3, r0
 800437e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004384:	f04f 33ff 	mov.w	r3, #4294967295
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	68b8      	ldr	r0, [r7, #8]
 800438e:	f7ff ff23 	bl	80041d8 <BSP_SD_ReadBlocks>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d107      	bne.n	80043a8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004398:	bf00      	nop
 800439a:	f7ff ff59 	bl	8004250 <BSP_SD_GetCardState>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1fa      	bne.n	800439a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b086      	sub	sp, #24
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]
 80043be:	4603      	mov	r3, r0
 80043c0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	68b8      	ldr	r0, [r7, #8]
 80043d0:	f7ff ff20 	bl	8004214 <BSP_SD_WriteBlocks>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d107      	bne.n	80043ea <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80043da:	bf00      	nop
 80043dc:	f7ff ff38 	bl	8004250 <BSP_SD_GetCardState>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1fa      	bne.n	80043dc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80043ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08c      	sub	sp, #48	; 0x30
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	603a      	str	r2, [r7, #0]
 80043fe:	71fb      	strb	r3, [r7, #7]
 8004400:	460b      	mov	r3, r1
 8004402:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800440a:	4b25      	ldr	r3, [pc, #148]	; (80044a0 <SD_ioctl+0xac>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <SD_ioctl+0x28>
 8004418:	2303      	movs	r3, #3
 800441a:	e03c      	b.n	8004496 <SD_ioctl+0xa2>

  switch (cmd)
 800441c:	79bb      	ldrb	r3, [r7, #6]
 800441e:	2b03      	cmp	r3, #3
 8004420:	d834      	bhi.n	800448c <SD_ioctl+0x98>
 8004422:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <SD_ioctl+0x34>)
 8004424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004428:	08004439 	.word	0x08004439
 800442c:	08004441 	.word	0x08004441
 8004430:	08004459 	.word	0x08004459
 8004434:	08004473 	.word	0x08004473
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800443e:	e028      	b.n	8004492 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004440:	f107 030c 	add.w	r3, r7, #12
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff ff13 	bl	8004270 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800444a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004456:	e01c      	b.n	8004492 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004458:	f107 030c 	add.w	r3, r7, #12
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff ff07 	bl	8004270 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	b29a      	uxth	r2, r3
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004470:	e00f      	b.n	8004492 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004472:	f107 030c 	add.w	r3, r7, #12
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fefa 	bl	8004270 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800447c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447e:	0a5a      	lsrs	r2, r3, #9
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800448a:	e002      	b.n	8004492 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800448c:	2304      	movs	r3, #4
 800448e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004492:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004496:	4618      	mov	r0, r3
 8004498:	3730      	adds	r7, #48	; 0x30
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000009 	.word	0x20000009

080044a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	4613      	mov	r3, r2
 80044b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80044b2:	2301      	movs	r3, #1
 80044b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80044ba:	4b1f      	ldr	r3, [pc, #124]	; (8004538 <FATFS_LinkDriverEx+0x94>)
 80044bc:	7a5b      	ldrb	r3, [r3, #9]
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d131      	bne.n	8004528 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80044c4:	4b1c      	ldr	r3, [pc, #112]	; (8004538 <FATFS_LinkDriverEx+0x94>)
 80044c6:	7a5b      	ldrb	r3, [r3, #9]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	4b1a      	ldr	r3, [pc, #104]	; (8004538 <FATFS_LinkDriverEx+0x94>)
 80044ce:	2100      	movs	r1, #0
 80044d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80044d2:	4b19      	ldr	r3, [pc, #100]	; (8004538 <FATFS_LinkDriverEx+0x94>)
 80044d4:	7a5b      	ldrb	r3, [r3, #9]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	4a17      	ldr	r2, [pc, #92]	; (8004538 <FATFS_LinkDriverEx+0x94>)
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80044e2:	4b15      	ldr	r3, [pc, #84]	; (8004538 <FATFS_LinkDriverEx+0x94>)
 80044e4:	7a5b      	ldrb	r3, [r3, #9]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	4b13      	ldr	r3, [pc, #76]	; (8004538 <FATFS_LinkDriverEx+0x94>)
 80044ec:	4413      	add	r3, r2
 80044ee:	79fa      	ldrb	r2, [r7, #7]
 80044f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80044f2:	4b11      	ldr	r3, [pc, #68]	; (8004538 <FATFS_LinkDriverEx+0x94>)
 80044f4:	7a5b      	ldrb	r3, [r3, #9]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	b2d1      	uxtb	r1, r2
 80044fc:	4a0e      	ldr	r2, [pc, #56]	; (8004538 <FATFS_LinkDriverEx+0x94>)
 80044fe:	7251      	strb	r1, [r2, #9]
 8004500:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004502:	7dbb      	ldrb	r3, [r7, #22]
 8004504:	3330      	adds	r3, #48	; 0x30
 8004506:	b2da      	uxtb	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	3301      	adds	r3, #1
 8004510:	223a      	movs	r2, #58	; 0x3a
 8004512:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	3302      	adds	r3, #2
 8004518:	222f      	movs	r2, #47	; 0x2f
 800451a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	3303      	adds	r3, #3
 8004520:	2200      	movs	r2, #0
 8004522:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004528:	7dfb      	ldrb	r3, [r7, #23]
}
 800452a:	4618      	mov	r0, r3
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	20000164 	.word	0x20000164

0800453c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004546:	2200      	movs	r2, #0
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff ffaa 	bl	80044a4 <FATFS_LinkDriverEx>
 8004550:	4603      	mov	r3, r0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <__errno>:
 800455c:	4b01      	ldr	r3, [pc, #4]	; (8004564 <__errno+0x8>)
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	2000000c 	.word	0x2000000c

08004568 <__libc_init_array>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	4d0d      	ldr	r5, [pc, #52]	; (80045a0 <__libc_init_array+0x38>)
 800456c:	4c0d      	ldr	r4, [pc, #52]	; (80045a4 <__libc_init_array+0x3c>)
 800456e:	1b64      	subs	r4, r4, r5
 8004570:	10a4      	asrs	r4, r4, #2
 8004572:	2600      	movs	r6, #0
 8004574:	42a6      	cmp	r6, r4
 8004576:	d109      	bne.n	800458c <__libc_init_array+0x24>
 8004578:	4d0b      	ldr	r5, [pc, #44]	; (80045a8 <__libc_init_array+0x40>)
 800457a:	4c0c      	ldr	r4, [pc, #48]	; (80045ac <__libc_init_array+0x44>)
 800457c:	f000 f8da 	bl	8004734 <_init>
 8004580:	1b64      	subs	r4, r4, r5
 8004582:	10a4      	asrs	r4, r4, #2
 8004584:	2600      	movs	r6, #0
 8004586:	42a6      	cmp	r6, r4
 8004588:	d105      	bne.n	8004596 <__libc_init_array+0x2e>
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004590:	4798      	blx	r3
 8004592:	3601      	adds	r6, #1
 8004594:	e7ee      	b.n	8004574 <__libc_init_array+0xc>
 8004596:	f855 3b04 	ldr.w	r3, [r5], #4
 800459a:	4798      	blx	r3
 800459c:	3601      	adds	r6, #1
 800459e:	e7f2      	b.n	8004586 <__libc_init_array+0x1e>
 80045a0:	0800479c 	.word	0x0800479c
 80045a4:	0800479c 	.word	0x0800479c
 80045a8:	0800479c 	.word	0x0800479c
 80045ac:	080047a0 	.word	0x080047a0

080045b0 <malloc>:
 80045b0:	4b02      	ldr	r3, [pc, #8]	; (80045bc <malloc+0xc>)
 80045b2:	4601      	mov	r1, r0
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	f000 b82b 	b.w	8004610 <_malloc_r>
 80045ba:	bf00      	nop
 80045bc:	2000000c 	.word	0x2000000c

080045c0 <memset>:
 80045c0:	4402      	add	r2, r0
 80045c2:	4603      	mov	r3, r0
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d100      	bne.n	80045ca <memset+0xa>
 80045c8:	4770      	bx	lr
 80045ca:	f803 1b01 	strb.w	r1, [r3], #1
 80045ce:	e7f9      	b.n	80045c4 <memset+0x4>

080045d0 <sbrk_aligned>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	4e0e      	ldr	r6, [pc, #56]	; (800460c <sbrk_aligned+0x3c>)
 80045d4:	460c      	mov	r4, r1
 80045d6:	6831      	ldr	r1, [r6, #0]
 80045d8:	4605      	mov	r5, r0
 80045da:	b911      	cbnz	r1, 80045e2 <sbrk_aligned+0x12>
 80045dc:	f000 f88c 	bl	80046f8 <_sbrk_r>
 80045e0:	6030      	str	r0, [r6, #0]
 80045e2:	4621      	mov	r1, r4
 80045e4:	4628      	mov	r0, r5
 80045e6:	f000 f887 	bl	80046f8 <_sbrk_r>
 80045ea:	1c43      	adds	r3, r0, #1
 80045ec:	d00a      	beq.n	8004604 <sbrk_aligned+0x34>
 80045ee:	1cc4      	adds	r4, r0, #3
 80045f0:	f024 0403 	bic.w	r4, r4, #3
 80045f4:	42a0      	cmp	r0, r4
 80045f6:	d007      	beq.n	8004608 <sbrk_aligned+0x38>
 80045f8:	1a21      	subs	r1, r4, r0
 80045fa:	4628      	mov	r0, r5
 80045fc:	f000 f87c 	bl	80046f8 <_sbrk_r>
 8004600:	3001      	adds	r0, #1
 8004602:	d101      	bne.n	8004608 <sbrk_aligned+0x38>
 8004604:	f04f 34ff 	mov.w	r4, #4294967295
 8004608:	4620      	mov	r0, r4
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	20000174 	.word	0x20000174

08004610 <_malloc_r>:
 8004610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004614:	1ccd      	adds	r5, r1, #3
 8004616:	f025 0503 	bic.w	r5, r5, #3
 800461a:	3508      	adds	r5, #8
 800461c:	2d0c      	cmp	r5, #12
 800461e:	bf38      	it	cc
 8004620:	250c      	movcc	r5, #12
 8004622:	2d00      	cmp	r5, #0
 8004624:	4607      	mov	r7, r0
 8004626:	db01      	blt.n	800462c <_malloc_r+0x1c>
 8004628:	42a9      	cmp	r1, r5
 800462a:	d905      	bls.n	8004638 <_malloc_r+0x28>
 800462c:	230c      	movs	r3, #12
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	2600      	movs	r6, #0
 8004632:	4630      	mov	r0, r6
 8004634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004638:	4e2e      	ldr	r6, [pc, #184]	; (80046f4 <_malloc_r+0xe4>)
 800463a:	f000 f86d 	bl	8004718 <__malloc_lock>
 800463e:	6833      	ldr	r3, [r6, #0]
 8004640:	461c      	mov	r4, r3
 8004642:	bb34      	cbnz	r4, 8004692 <_malloc_r+0x82>
 8004644:	4629      	mov	r1, r5
 8004646:	4638      	mov	r0, r7
 8004648:	f7ff ffc2 	bl	80045d0 <sbrk_aligned>
 800464c:	1c43      	adds	r3, r0, #1
 800464e:	4604      	mov	r4, r0
 8004650:	d14d      	bne.n	80046ee <_malloc_r+0xde>
 8004652:	6834      	ldr	r4, [r6, #0]
 8004654:	4626      	mov	r6, r4
 8004656:	2e00      	cmp	r6, #0
 8004658:	d140      	bne.n	80046dc <_malloc_r+0xcc>
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	4631      	mov	r1, r6
 800465e:	4638      	mov	r0, r7
 8004660:	eb04 0803 	add.w	r8, r4, r3
 8004664:	f000 f848 	bl	80046f8 <_sbrk_r>
 8004668:	4580      	cmp	r8, r0
 800466a:	d13a      	bne.n	80046e2 <_malloc_r+0xd2>
 800466c:	6821      	ldr	r1, [r4, #0]
 800466e:	3503      	adds	r5, #3
 8004670:	1a6d      	subs	r5, r5, r1
 8004672:	f025 0503 	bic.w	r5, r5, #3
 8004676:	3508      	adds	r5, #8
 8004678:	2d0c      	cmp	r5, #12
 800467a:	bf38      	it	cc
 800467c:	250c      	movcc	r5, #12
 800467e:	4629      	mov	r1, r5
 8004680:	4638      	mov	r0, r7
 8004682:	f7ff ffa5 	bl	80045d0 <sbrk_aligned>
 8004686:	3001      	adds	r0, #1
 8004688:	d02b      	beq.n	80046e2 <_malloc_r+0xd2>
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	442b      	add	r3, r5
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	e00e      	b.n	80046b0 <_malloc_r+0xa0>
 8004692:	6822      	ldr	r2, [r4, #0]
 8004694:	1b52      	subs	r2, r2, r5
 8004696:	d41e      	bmi.n	80046d6 <_malloc_r+0xc6>
 8004698:	2a0b      	cmp	r2, #11
 800469a:	d916      	bls.n	80046ca <_malloc_r+0xba>
 800469c:	1961      	adds	r1, r4, r5
 800469e:	42a3      	cmp	r3, r4
 80046a0:	6025      	str	r5, [r4, #0]
 80046a2:	bf18      	it	ne
 80046a4:	6059      	strne	r1, [r3, #4]
 80046a6:	6863      	ldr	r3, [r4, #4]
 80046a8:	bf08      	it	eq
 80046aa:	6031      	streq	r1, [r6, #0]
 80046ac:	5162      	str	r2, [r4, r5]
 80046ae:	604b      	str	r3, [r1, #4]
 80046b0:	4638      	mov	r0, r7
 80046b2:	f104 060b 	add.w	r6, r4, #11
 80046b6:	f000 f835 	bl	8004724 <__malloc_unlock>
 80046ba:	f026 0607 	bic.w	r6, r6, #7
 80046be:	1d23      	adds	r3, r4, #4
 80046c0:	1af2      	subs	r2, r6, r3
 80046c2:	d0b6      	beq.n	8004632 <_malloc_r+0x22>
 80046c4:	1b9b      	subs	r3, r3, r6
 80046c6:	50a3      	str	r3, [r4, r2]
 80046c8:	e7b3      	b.n	8004632 <_malloc_r+0x22>
 80046ca:	6862      	ldr	r2, [r4, #4]
 80046cc:	42a3      	cmp	r3, r4
 80046ce:	bf0c      	ite	eq
 80046d0:	6032      	streq	r2, [r6, #0]
 80046d2:	605a      	strne	r2, [r3, #4]
 80046d4:	e7ec      	b.n	80046b0 <_malloc_r+0xa0>
 80046d6:	4623      	mov	r3, r4
 80046d8:	6864      	ldr	r4, [r4, #4]
 80046da:	e7b2      	b.n	8004642 <_malloc_r+0x32>
 80046dc:	4634      	mov	r4, r6
 80046de:	6876      	ldr	r6, [r6, #4]
 80046e0:	e7b9      	b.n	8004656 <_malloc_r+0x46>
 80046e2:	230c      	movs	r3, #12
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	4638      	mov	r0, r7
 80046e8:	f000 f81c 	bl	8004724 <__malloc_unlock>
 80046ec:	e7a1      	b.n	8004632 <_malloc_r+0x22>
 80046ee:	6025      	str	r5, [r4, #0]
 80046f0:	e7de      	b.n	80046b0 <_malloc_r+0xa0>
 80046f2:	bf00      	nop
 80046f4:	20000170 	.word	0x20000170

080046f8 <_sbrk_r>:
 80046f8:	b538      	push	{r3, r4, r5, lr}
 80046fa:	4d06      	ldr	r5, [pc, #24]	; (8004714 <_sbrk_r+0x1c>)
 80046fc:	2300      	movs	r3, #0
 80046fe:	4604      	mov	r4, r0
 8004700:	4608      	mov	r0, r1
 8004702:	602b      	str	r3, [r5, #0]
 8004704:	f7fc f9ba 	bl	8000a7c <_sbrk>
 8004708:	1c43      	adds	r3, r0, #1
 800470a:	d102      	bne.n	8004712 <_sbrk_r+0x1a>
 800470c:	682b      	ldr	r3, [r5, #0]
 800470e:	b103      	cbz	r3, 8004712 <_sbrk_r+0x1a>
 8004710:	6023      	str	r3, [r4, #0]
 8004712:	bd38      	pop	{r3, r4, r5, pc}
 8004714:	20000178 	.word	0x20000178

08004718 <__malloc_lock>:
 8004718:	4801      	ldr	r0, [pc, #4]	; (8004720 <__malloc_lock+0x8>)
 800471a:	f000 b809 	b.w	8004730 <__retarget_lock_acquire_recursive>
 800471e:	bf00      	nop
 8004720:	2000017c 	.word	0x2000017c

08004724 <__malloc_unlock>:
 8004724:	4801      	ldr	r0, [pc, #4]	; (800472c <__malloc_unlock+0x8>)
 8004726:	f000 b804 	b.w	8004732 <__retarget_lock_release_recursive>
 800472a:	bf00      	nop
 800472c:	2000017c 	.word	0x2000017c

08004730 <__retarget_lock_acquire_recursive>:
 8004730:	4770      	bx	lr

08004732 <__retarget_lock_release_recursive>:
 8004732:	4770      	bx	lr

08004734 <_init>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	bf00      	nop
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr

08004740 <_fini>:
 8004740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004742:	bf00      	nop
 8004744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004746:	bc08      	pop	{r3}
 8004748:	469e      	mov	lr, r3
 800474a:	4770      	bx	lr
