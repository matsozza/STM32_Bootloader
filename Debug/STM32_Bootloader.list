
STM32_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800557c  0800557c  0001557c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005684  08005684  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800568c  0800568c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005690  08005690  00015690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000110  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000180  20000180  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d0da  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021ad  00000000  00000000  0002d17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b58  00000000  00000000  0002f328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a60  00000000  00000000  0002fe80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b61  00000000  00000000  000308e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dea9  00000000  00000000  00053441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9c60  00000000  00000000  000612ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012af4a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034f8  00000000  00000000  0012af9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005564 	.word	0x08005564

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005564 	.word	0x08005564

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fb62 	bl	8000c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f81c 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f8cc 	bl	800071c <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000584:	f000 f880 	bl	8000688 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000588:	f003 fdbc 	bl	8004104 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 800058c:	f000 f89c 	bl	80006c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Bootloader start - Blink LED (%d.%d) \r\n", PROG_VER[0], PROG_VER[1]);
 8000590:	2300      	movs	r3, #0
 8000592:	2201      	movs	r2, #1
 8000594:	4619      	mov	r1, r3
 8000596:	4806      	ldr	r0, [pc, #24]	; (80005b0 <main+0x3c>)
 8000598:	f003 ffe0 	bl	800455c <iprintf>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <main+0x40>)
 80005a4:	f000 fe7c 	bl	80012a0 <HAL_GPIO_WritePin>
  //HAL_Delay(200);
  goto_application(); // Jump to application code
 80005a8:	f000 f946 	bl	8000838 <goto_application>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <main+0x38>
 80005ae:	bf00      	nop
 80005b0:	0800557c 	.word	0x0800557c
 80005b4:	40021400 	.word	0x40021400

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 ffc0 	bl	800454c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b27      	ldr	r3, [pc, #156]	; (8000680 <SystemClock_Config+0xc8>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a26      	ldr	r2, [pc, #152]	; (8000680 <SystemClock_Config+0xc8>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <SystemClock_Config+0xc8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b21      	ldr	r3, [pc, #132]	; (8000684 <SystemClock_Config+0xcc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a20      	ldr	r2, [pc, #128]	; (8000684 <SystemClock_Config+0xcc>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <SystemClock_Config+0xcc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2310      	movs	r3, #16
 800061e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000628:	2310      	movs	r3, #16
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800062c:	23c0      	movs	r3, #192	; 0xc0
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fe49 	bl	80012d4 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000648:	f000 f912 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f001 f8ac 	bl	80017c4 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000672:	f000 f8fd 	bl	8000870 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_SDIO_SD_Init+0x38>)
 800068e:	4a0d      	ldr	r2, [pc, #52]	; (80006c4 <MX_SDIO_SD_Init+0x3c>)
 8000690:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_SDIO_SD_Init+0x38>)
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_SDIO_SD_Init+0x38>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_SDIO_SD_Init+0x38>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_SDIO_SD_Init+0x38>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <MX_SDIO_SD_Init+0x38>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <MX_SDIO_SD_Init+0x38>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	2000008c 	.word	0x2000008c
 80006c4:	40012c00 	.word	0x40012c00

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_USART2_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 8000700:	f002 fbcb 	bl	8002e9a <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f8b1 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000110 	.word	0x20000110
 8000718:	40004400 	.word	0x40004400

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b34      	ldr	r3, [pc, #208]	; (8000808 <MX_GPIO_Init+0xec>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a33      	ldr	r2, [pc, #204]	; (8000808 <MX_GPIO_Init+0xec>)
 800073c:	f043 0310 	orr.w	r3, r3, #16
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b31      	ldr	r3, [pc, #196]	; (8000808 <MX_GPIO_Init+0xec>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0310 	and.w	r3, r3, #16
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <MX_GPIO_Init+0xec>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a2c      	ldr	r2, [pc, #176]	; (8000808 <MX_GPIO_Init+0xec>)
 8000758:	f043 0320 	orr.w	r3, r3, #32
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <MX_GPIO_Init+0xec>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0320 	and.w	r3, r3, #32
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b26      	ldr	r3, [pc, #152]	; (8000808 <MX_GPIO_Init+0xec>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a25      	ldr	r2, [pc, #148]	; (8000808 <MX_GPIO_Init+0xec>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b23      	ldr	r3, [pc, #140]	; (8000808 <MX_GPIO_Init+0xec>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <MX_GPIO_Init+0xec>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a1e      	ldr	r2, [pc, #120]	; (8000808 <MX_GPIO_Init+0xec>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <MX_GPIO_Init+0xec>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_GPIO_Init+0xec>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a17      	ldr	r2, [pc, #92]	; (8000808 <MX_GPIO_Init+0xec>)
 80007ac:	f043 0308 	orr.w	r3, r3, #8
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_GPIO_Init+0xec>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0308 	and.w	r3, r3, #8
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80007c4:	4811      	ldr	r0, [pc, #68]	; (800080c <MX_GPIO_Init+0xf0>)
 80007c6:	f000 fd6b 	bl	80012a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007ca:	2310      	movs	r3, #16
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <MX_GPIO_Init+0xf4>)
 80007de:	f000 fbab 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 80007e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_GPIO_Init+0xf0>)
 80007fc:	f000 fb9c 	bl	8000f38 <HAL_GPIO_Init>

}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40021400 	.word	0x40021400
 8000810:	40021000 	.word	0x40021000

08000814 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(intch, FILE *f)
#endif
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800081c:	1d39      	adds	r1, r7, #4
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	2201      	movs	r2, #1
 8000824:	4803      	ldr	r0, [pc, #12]	; (8000834 <__io_putchar+0x20>)
 8000826:	f002 fb85 	bl	8002f34 <HAL_UART_Transmit>
	return ch;
 800082a:	687b      	ldr	r3, [r7, #4]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000110 	.word	0x20000110

08000838 <goto_application>:

static void goto_application(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	printf("Jumping to application \r\n");
 800083e:	4809      	ldr	r0, [pc, #36]	; (8000864 <goto_application+0x2c>)
 8000840:	f003 ff12 	bl	8004668 <puts>

	void (*app_reset_handler) (void) =
			(void*) (*(volatile uint32_t*)(0x08040000 + 0x04));
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <goto_application+0x30>)
 8000846:	681b      	ldr	r3, [r3, #0]
	void (*app_reset_handler) (void) =
 8000848:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <goto_application+0x34>)
 8000852:	f000 fd25 	bl	80012a0 <HAL_GPIO_WritePin>
	app_reset_handler(); // application starting point
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4798      	blx	r3
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	080055a4 	.word	0x080055a4
 8000868:	08040004 	.word	0x08040004
 800086c:	40021400 	.word	0x40021400

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <HAL_MspInit+0x4c>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000890:	6453      	str	r3, [r2, #68]	; 0x44
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a28      	ldr	r2, [pc, #160]	; (800098c <HAL_SD_MspInit+0xc0>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d14a      	bne.n	8000984 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <HAL_SD_MspInit+0xc4>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	4a26      	ldr	r2, [pc, #152]	; (8000990 <HAL_SD_MspInit+0xc4>)
 80008f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008fc:	6453      	str	r3, [r2, #68]	; 0x44
 80008fe:	4b24      	ldr	r3, [pc, #144]	; (8000990 <HAL_SD_MspInit+0xc4>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <HAL_SD_MspInit+0xc4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <HAL_SD_MspInit+0xc4>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <HAL_SD_MspInit+0xc4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_SD_MspInit+0xc4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a18      	ldr	r2, [pc, #96]	; (8000990 <HAL_SD_MspInit+0xc4>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <HAL_SD_MspInit+0xc4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000942:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000946:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000954:	230c      	movs	r3, #12
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	480d      	ldr	r0, [pc, #52]	; (8000994 <HAL_SD_MspInit+0xc8>)
 8000960:	f000 faea 	bl	8000f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000964:	2304      	movs	r3, #4
 8000966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000974:	230c      	movs	r3, #12
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <HAL_SD_MspInit+0xcc>)
 8000980:	f000 fada 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	; 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40012c00 	.word	0x40012c00
 8000990:	40023800 	.word	0x40023800
 8000994:	40020800 	.word	0x40020800
 8000998:	40020c00 	.word	0x40020c00

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <HAL_UART_MspInit+0x84>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d12b      	bne.n	8000a16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f6:	230c      	movs	r3, #12
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a06:	2307      	movs	r3, #7
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_UART_MspInit+0x8c>)
 8000a12:	f000 fa91 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	; 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <NMI_Handler+0x4>

08000a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <MemManage_Handler+0x4>

08000a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a78:	f000 f934 	bl	8000ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	e00a      	b.n	8000aa8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a92:	f3af 8000 	nop.w
 8000a96:	4601      	mov	r1, r0
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	60ba      	str	r2, [r7, #8]
 8000a9e:	b2ca      	uxtb	r2, r1
 8000aa0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbf0      	blt.n	8000a92 <_read+0x12>
	}

return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	e009      	b.n	8000ae0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	60ba      	str	r2, [r7, #8]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fe9d 	bl	8000814 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3301      	adds	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	dbf1      	blt.n	8000acc <_write+0x12>
	}
	return len;
 8000ae8:	687b      	ldr	r3, [r7, #4]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_close>:

int _close(int file)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
	return -1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <_isatty>:

int _isatty(int file)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
	return 1;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
	...

08000b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b64:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <_sbrk+0x5c>)
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <_sbrk+0x60>)
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <_sbrk+0x64>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <_sbrk+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d207      	bcs.n	8000b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b8c:	f003 fcb4 	bl	80044f8 <__errno>
 8000b90:	4603      	mov	r3, r0
 8000b92:	220c      	movs	r2, #12
 8000b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	e009      	b.n	8000bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <_sbrk+0x64>)
 8000bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20020000 	.word	0x20020000
 8000bbc:	00000400 	.word	0x00000400
 8000bc0:	20000154 	.word	0x20000154
 8000bc4:	20000180 	.word	0x20000180

08000bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bf2:	490e      	ldr	r1, [pc, #56]	; (8000c2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf4:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c08:	4c0b      	ldr	r4, [pc, #44]	; (8000c38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c16:	f7ff ffd7 	bl	8000bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f003 fc73 	bl	8004504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1e:	f7ff fca9 	bl	8000574 <main>
  bx  lr    
 8000c22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c30:	08005694 	.word	0x08005694
  ldr r2, =_sbss
 8000c34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c38:	20000180 	.word	0x20000180

08000c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC_IRQHandler>
	...

08000c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <HAL_Init+0x40>)
 8000c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_Init+0x40>)
 8000c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <HAL_Init+0x40>)
 8000c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f000 f931 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6e:	200f      	movs	r0, #15
 8000c70:	f000 f808 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c74:	f7ff fe02 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023c00 	.word	0x40023c00

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_InitTick+0x54>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x58>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f93b 	bl	8000f1e <HAL_SYSTICK_Config>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00e      	b.n	8000cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d80a      	bhi.n	8000cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f000 f911 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc4:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <HAL_InitTick+0x5c>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e000      	b.n	8000cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x20>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000158 	.word	0x20000158

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000158 	.word	0x20000158

08000d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d2c:	f7ff ffee 	bl	8000d0c <HAL_GetTick>
 8000d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3c:	d005      	beq.n	8000d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_Delay+0x44>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4a:	bf00      	nop
 8000d4c:	f7ff ffde 	bl	8000d0c <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d8f7      	bhi.n	8000d4c <HAL_Delay+0x28>
  {
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff47 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff5c 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff8e 	bl	8000e24 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5d 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffb0 	bl	8000e8c <SysTick_Config>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	e16b      	b.n	800122c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	f040 815a 	bne.w	8001226 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d005      	beq.n	8000f8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d130      	bne.n	8000fec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	091b      	lsrs	r3, r3, #4
 8000fd6:	f003 0201 	and.w	r2, r3, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d017      	beq.n	8001028 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d123      	bne.n	800107c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	08da      	lsrs	r2, r3, #3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3208      	adds	r2, #8
 800103c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	08da      	lsrs	r2, r3, #3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3208      	adds	r2, #8
 8001076:	69b9      	ldr	r1, [r7, #24]
 8001078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0203 	and.w	r2, r3, #3
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80b4 	beq.w	8001226 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b60      	ldr	r3, [pc, #384]	; (8001244 <HAL_GPIO_Init+0x30c>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a5f      	ldr	r2, [pc, #380]	; (8001244 <HAL_GPIO_Init+0x30c>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b5d      	ldr	r3, [pc, #372]	; (8001244 <HAL_GPIO_Init+0x30c>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010da:	4a5b      	ldr	r2, [pc, #364]	; (8001248 <HAL_GPIO_Init+0x310>)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a52      	ldr	r2, [pc, #328]	; (800124c <HAL_GPIO_Init+0x314>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d02b      	beq.n	800115e <HAL_GPIO_Init+0x226>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a51      	ldr	r2, [pc, #324]	; (8001250 <HAL_GPIO_Init+0x318>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d025      	beq.n	800115a <HAL_GPIO_Init+0x222>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a50      	ldr	r2, [pc, #320]	; (8001254 <HAL_GPIO_Init+0x31c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d01f      	beq.n	8001156 <HAL_GPIO_Init+0x21e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4f      	ldr	r2, [pc, #316]	; (8001258 <HAL_GPIO_Init+0x320>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d019      	beq.n	8001152 <HAL_GPIO_Init+0x21a>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4e      	ldr	r2, [pc, #312]	; (800125c <HAL_GPIO_Init+0x324>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d013      	beq.n	800114e <HAL_GPIO_Init+0x216>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4d      	ldr	r2, [pc, #308]	; (8001260 <HAL_GPIO_Init+0x328>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d00d      	beq.n	800114a <HAL_GPIO_Init+0x212>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4c      	ldr	r2, [pc, #304]	; (8001264 <HAL_GPIO_Init+0x32c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d007      	beq.n	8001146 <HAL_GPIO_Init+0x20e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4b      	ldr	r2, [pc, #300]	; (8001268 <HAL_GPIO_Init+0x330>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <HAL_GPIO_Init+0x20a>
 800113e:	2307      	movs	r3, #7
 8001140:	e00e      	b.n	8001160 <HAL_GPIO_Init+0x228>
 8001142:	2308      	movs	r3, #8
 8001144:	e00c      	b.n	8001160 <HAL_GPIO_Init+0x228>
 8001146:	2306      	movs	r3, #6
 8001148:	e00a      	b.n	8001160 <HAL_GPIO_Init+0x228>
 800114a:	2305      	movs	r3, #5
 800114c:	e008      	b.n	8001160 <HAL_GPIO_Init+0x228>
 800114e:	2304      	movs	r3, #4
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x228>
 8001152:	2303      	movs	r3, #3
 8001154:	e004      	b.n	8001160 <HAL_GPIO_Init+0x228>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <HAL_GPIO_Init+0x228>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x228>
 800115e:	2300      	movs	r3, #0
 8001160:	69fa      	ldr	r2, [r7, #28]
 8001162:	f002 0203 	and.w	r2, r2, #3
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4093      	lsls	r3, r2
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001170:	4935      	ldr	r1, [pc, #212]	; (8001248 <HAL_GPIO_Init+0x310>)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117e:	4b3b      	ldr	r3, [pc, #236]	; (800126c <HAL_GPIO_Init+0x334>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a2:	4a32      	ldr	r2, [pc, #200]	; (800126c <HAL_GPIO_Init+0x334>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a8:	4b30      	ldr	r3, [pc, #192]	; (800126c <HAL_GPIO_Init+0x334>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011cc:	4a27      	ldr	r2, [pc, #156]	; (800126c <HAL_GPIO_Init+0x334>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <HAL_GPIO_Init+0x334>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f6:	4a1d      	ldr	r2, [pc, #116]	; (800126c <HAL_GPIO_Init+0x334>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_GPIO_Init+0x334>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <HAL_GPIO_Init+0x334>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3301      	adds	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	f67f ae90 	bls.w	8000f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40013800 	.word	0x40013800
 800124c:	40020000 	.word	0x40020000
 8001250:	40020400 	.word	0x40020400
 8001254:	40020800 	.word	0x40020800
 8001258:	40020c00 	.word	0x40020c00
 800125c:	40021000 	.word	0x40021000
 8001260:	40021400 	.word	0x40021400
 8001264:	40021800 	.word	0x40021800
 8001268:	40021c00 	.word	0x40021c00
 800126c:	40013c00 	.word	0x40013c00

08001270 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	887b      	ldrh	r3, [r7, #2]
 8001282:	4013      	ands	r3, r2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d002      	beq.n	800128e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001288:	2301      	movs	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e001      	b.n	8001292 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
 80012ac:	4613      	mov	r3, r2
 80012ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b0:	787b      	ldrb	r3, [r7, #1]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b6:	887a      	ldrh	r2, [r7, #2]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012bc:	e003      	b.n	80012c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012be:	887b      	ldrh	r3, [r7, #2]
 80012c0:	041a      	lsls	r2, r3, #16
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	619a      	str	r2, [r3, #24]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e267      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d075      	beq.n	80013de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f2:	4b88      	ldr	r3, [pc, #544]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	d00c      	beq.n	8001318 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fe:	4b85      	ldr	r3, [pc, #532]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001306:	2b08      	cmp	r3, #8
 8001308:	d112      	bne.n	8001330 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130a:	4b82      	ldr	r3, [pc, #520]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001316:	d10b      	bne.n	8001330 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	4b7e      	ldr	r3, [pc, #504]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d05b      	beq.n	80013dc <HAL_RCC_OscConfig+0x108>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d157      	bne.n	80013dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e242      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001338:	d106      	bne.n	8001348 <HAL_RCC_OscConfig+0x74>
 800133a:	4b76      	ldr	r3, [pc, #472]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a75      	ldr	r2, [pc, #468]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e01d      	b.n	8001384 <HAL_RCC_OscConfig+0xb0>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0x98>
 8001352:	4b70      	ldr	r3, [pc, #448]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a6f      	ldr	r2, [pc, #444]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b6d      	ldr	r3, [pc, #436]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a6c      	ldr	r2, [pc, #432]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e00b      	b.n	8001384 <HAL_RCC_OscConfig+0xb0>
 800136c:	4b69      	ldr	r3, [pc, #420]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a68      	ldr	r2, [pc, #416]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b66      	ldr	r3, [pc, #408]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a65      	ldr	r2, [pc, #404]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 800137e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d013      	beq.n	80013b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fcbe 	bl	8000d0c <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fcba 	bl	8000d0c <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	; 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e207      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a6:	4b5b      	ldr	r3, [pc, #364]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0xc0>
 80013b2:	e014      	b.n	80013de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fcaa 	bl	8000d0c <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fca6 	bl	8000d0c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e1f3      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	4b51      	ldr	r3, [pc, #324]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0xe8>
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d063      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ea:	4b4a      	ldr	r3, [pc, #296]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f6:	4b47      	ldr	r3, [pc, #284]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d11c      	bne.n	800143c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001402:	4b44      	ldr	r3, [pc, #272]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d116      	bne.n	800143c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	4b41      	ldr	r3, [pc, #260]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <HAL_RCC_OscConfig+0x152>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d001      	beq.n	8001426 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e1c7      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001426:	4b3b      	ldr	r3, [pc, #236]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4937      	ldr	r1, [pc, #220]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143a:	e03a      	b.n	80014b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d020      	beq.n	8001486 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001444:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_RCC_OscConfig+0x244>)
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144a:	f7ff fc5f 	bl	8000d0c <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001452:	f7ff fc5b 	bl	8000d0c <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e1a8      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001470:	4b28      	ldr	r3, [pc, #160]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	4925      	ldr	r1, [pc, #148]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001480:	4313      	orrs	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
 8001484:	e015      	b.n	80014b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001486:	4b24      	ldr	r3, [pc, #144]	; (8001518 <HAL_RCC_OscConfig+0x244>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148c:	f7ff fc3e 	bl	8000d0c <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001494:	f7ff fc3a 	bl	8000d0c <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e187      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d036      	beq.n	800152c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d016      	beq.n	80014f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_RCC_OscConfig+0x248>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014cc:	f7ff fc1e 	bl	8000d0c <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d4:	f7ff fc1a 	bl	8000d0c <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e167      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 80014e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x200>
 80014f2:	e01b      	b.n	800152c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_RCC_OscConfig+0x248>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fc07 	bl	8000d0c <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001500:	e00e      	b.n	8001520 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001502:	f7ff fc03 	bl	8000d0c <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d907      	bls.n	8001520 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e150      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
 8001514:	40023800 	.word	0x40023800
 8001518:	42470000 	.word	0x42470000
 800151c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	4b88      	ldr	r3, [pc, #544]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 8001522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ea      	bne.n	8001502 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 8097 	beq.w	8001668 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153e:	4b81      	ldr	r3, [pc, #516]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10f      	bne.n	800156a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b7d      	ldr	r3, [pc, #500]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a7c      	ldr	r2, [pc, #496]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b7a      	ldr	r3, [pc, #488]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001566:	2301      	movs	r3, #1
 8001568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156a:	4b77      	ldr	r3, [pc, #476]	; (8001748 <HAL_RCC_OscConfig+0x474>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001572:	2b00      	cmp	r3, #0
 8001574:	d118      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001576:	4b74      	ldr	r3, [pc, #464]	; (8001748 <HAL_RCC_OscConfig+0x474>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a73      	ldr	r2, [pc, #460]	; (8001748 <HAL_RCC_OscConfig+0x474>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001582:	f7ff fbc3 	bl	8000d0c <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158a:	f7ff fbbf 	bl	8000d0c <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e10c      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159c:	4b6a      	ldr	r3, [pc, #424]	; (8001748 <HAL_RCC_OscConfig+0x474>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d106      	bne.n	80015be <HAL_RCC_OscConfig+0x2ea>
 80015b0:	4b64      	ldr	r3, [pc, #400]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	4a63      	ldr	r2, [pc, #396]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6713      	str	r3, [r2, #112]	; 0x70
 80015bc:	e01c      	b.n	80015f8 <HAL_RCC_OscConfig+0x324>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b05      	cmp	r3, #5
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x30c>
 80015c6:	4b5f      	ldr	r3, [pc, #380]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	4a5e      	ldr	r2, [pc, #376]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6713      	str	r3, [r2, #112]	; 0x70
 80015d2:	4b5c      	ldr	r3, [pc, #368]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	4a5b      	ldr	r2, [pc, #364]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6713      	str	r3, [r2, #112]	; 0x70
 80015de:	e00b      	b.n	80015f8 <HAL_RCC_OscConfig+0x324>
 80015e0:	4b58      	ldr	r3, [pc, #352]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a57      	ldr	r2, [pc, #348]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
 80015ec:	4b55      	ldr	r3, [pc, #340]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f0:	4a54      	ldr	r2, [pc, #336]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015f2:	f023 0304 	bic.w	r3, r3, #4
 80015f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d015      	beq.n	800162c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001600:	f7ff fb84 	bl	8000d0c <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001606:	e00a      	b.n	800161e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001608:	f7ff fb80 	bl	8000d0c <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	; 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e0cb      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161e:	4b49      	ldr	r3, [pc, #292]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0ee      	beq.n	8001608 <HAL_RCC_OscConfig+0x334>
 800162a:	e014      	b.n	8001656 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162c:	f7ff fb6e 	bl	8000d0c <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001632:	e00a      	b.n	800164a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001634:	f7ff fb6a 	bl	8000d0c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e0b5      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164a:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ee      	bne.n	8001634 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001656:	7dfb      	ldrb	r3, [r7, #23]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d105      	bne.n	8001668 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800165c:	4b39      	ldr	r3, [pc, #228]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4a38      	ldr	r2, [pc, #224]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 8001662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001666:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80a1 	beq.w	80017b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001672:	4b34      	ldr	r3, [pc, #208]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b08      	cmp	r3, #8
 800167c:	d05c      	beq.n	8001738 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d141      	bne.n	800170a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001686:	4b31      	ldr	r3, [pc, #196]	; (800174c <HAL_RCC_OscConfig+0x478>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fb3e 	bl	8000d0c <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001694:	f7ff fb3a 	bl	8000d0c <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e087      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a6:	4b27      	ldr	r3, [pc, #156]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69da      	ldr	r2, [r3, #28]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	019b      	lsls	r3, r3, #6
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	085b      	lsrs	r3, r3, #1
 80016ca:	3b01      	subs	r3, #1
 80016cc:	041b      	lsls	r3, r3, #16
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	061b      	lsls	r3, r3, #24
 80016d6:	491b      	ldr	r1, [pc, #108]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_RCC_OscConfig+0x478>)
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff fb13 	bl	8000d0c <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff fb0f 	bl	8000d0c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e05c      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x416>
 8001708:	e054      	b.n	80017b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_RCC_OscConfig+0x478>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fafc 	bl	8000d0c <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff faf8 	bl	8000d0c <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e045      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x444>
 8001736:	e03d      	b.n	80017b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d107      	bne.n	8001750 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e038      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
 8001744:	40023800 	.word	0x40023800
 8001748:	40007000 	.word	0x40007000
 800174c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_RCC_OscConfig+0x4ec>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d028      	beq.n	80017b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001768:	429a      	cmp	r2, r3
 800176a:	d121      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d11a      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001780:	4013      	ands	r3, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001786:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001788:	4293      	cmp	r3, r2
 800178a:	d111      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	085b      	lsrs	r3, r3, #1
 8001798:	3b01      	subs	r3, #1
 800179a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800179c:	429a      	cmp	r2, r3
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800

080017c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0cc      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d8:	4b68      	ldr	r3, [pc, #416]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d90c      	bls.n	8001800 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e6:	4b65      	ldr	r3, [pc, #404]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ee:	4b63      	ldr	r3, [pc, #396]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0b8      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d020      	beq.n	800184e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001818:	4b59      	ldr	r3, [pc, #356]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a58      	ldr	r2, [pc, #352]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001822:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001830:	4b53      	ldr	r3, [pc, #332]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	4a52      	ldr	r2, [pc, #328]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800183a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800183c:	4b50      	ldr	r3, [pc, #320]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	494d      	ldr	r1, [pc, #308]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d044      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	4b47      	ldr	r3, [pc, #284]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d119      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e07f      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d003      	beq.n	8001882 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800187e:	2b03      	cmp	r3, #3
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001882:	4b3f      	ldr	r3, [pc, #252]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e06f      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001892:	4b3b      	ldr	r3, [pc, #236]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e067      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018a2:	4b37      	ldr	r3, [pc, #220]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f023 0203 	bic.w	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4934      	ldr	r1, [pc, #208]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b4:	f7ff fa2a 	bl	8000d0c <HAL_GetTick>
 80018b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	e00a      	b.n	80018d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018bc:	f7ff fa26 	bl	8000d0c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e04f      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d2:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 020c 	and.w	r2, r3, #12
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d1eb      	bne.n	80018bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018e4:	4b25      	ldr	r3, [pc, #148]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d20c      	bcs.n	800190c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	4b22      	ldr	r3, [pc, #136]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e032      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d008      	beq.n	800192a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4916      	ldr	r1, [pc, #88]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d009      	beq.n	800194a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	490e      	ldr	r1, [pc, #56]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800194a:	f000 f821 	bl	8001990 <HAL_RCC_GetSysClockFreq>
 800194e:	4602      	mov	r2, r0
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	490a      	ldr	r1, [pc, #40]	; (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 800195c:	5ccb      	ldrb	r3, [r1, r3]
 800195e:	fa22 f303 	lsr.w	r3, r2, r3
 8001962:	4a09      	ldr	r2, [pc, #36]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_RCC_ClockConfig+0x1c8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff f98a 	bl	8000c84 <HAL_InitTick>

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023c00 	.word	0x40023c00
 8001980:	40023800 	.word	0x40023800
 8001984:	080055c0 	.word	0x080055c0
 8001988:	20000000 	.word	0x20000000
 800198c:	20000004 	.word	0x20000004

08001990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001994:	b090      	sub	sp, #64	; 0x40
 8001996:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
 800199c:	2300      	movs	r3, #0
 800199e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019a0:	2300      	movs	r3, #0
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a8:	4b59      	ldr	r3, [pc, #356]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d00d      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0x40>
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	f200 80a1 	bhi.w	8001afc <HAL_RCC_GetSysClockFreq+0x16c>
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x34>
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d003      	beq.n	80019ca <HAL_RCC_GetSysClockFreq+0x3a>
 80019c2:	e09b      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c4:	4b53      	ldr	r3, [pc, #332]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x184>)
 80019c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80019c8:	e09b      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ca:	4b53      	ldr	r3, [pc, #332]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x188>)
 80019cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019ce:	e098      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d0:	4b4f      	ldr	r3, [pc, #316]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019da:	4b4d      	ldr	r3, [pc, #308]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d028      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e6:	4b4a      	ldr	r3, [pc, #296]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	099b      	lsrs	r3, r3, #6
 80019ec:	2200      	movs	r2, #0
 80019ee:	623b      	str	r3, [r7, #32]
 80019f0:	627a      	str	r2, [r7, #36]	; 0x24
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019f8:	2100      	movs	r1, #0
 80019fa:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x188>)
 80019fc:	fb03 f201 	mul.w	r2, r3, r1
 8001a00:	2300      	movs	r3, #0
 8001a02:	fb00 f303 	mul.w	r3, r0, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	4a43      	ldr	r2, [pc, #268]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a0a:	fba0 1202 	umull	r1, r2, r0, r2
 8001a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a10:	460a      	mov	r2, r1
 8001a12:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a16:	4413      	add	r3, r2
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	61fa      	str	r2, [r7, #28]
 8001a22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a2a:	f7fe fc21 	bl	8000270 <__aeabi_uldivmod>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4613      	mov	r3, r2
 8001a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a36:	e053      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a38:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	099b      	lsrs	r3, r3, #6
 8001a3e:	2200      	movs	r2, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	617a      	str	r2, [r7, #20]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a4a:	f04f 0b00 	mov.w	fp, #0
 8001a4e:	4652      	mov	r2, sl
 8001a50:	465b      	mov	r3, fp
 8001a52:	f04f 0000 	mov.w	r0, #0
 8001a56:	f04f 0100 	mov.w	r1, #0
 8001a5a:	0159      	lsls	r1, r3, #5
 8001a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a60:	0150      	lsls	r0, r2, #5
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	ebb2 080a 	subs.w	r8, r2, sl
 8001a6a:	eb63 090b 	sbc.w	r9, r3, fp
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a82:	ebb2 0408 	subs.w	r4, r2, r8
 8001a86:	eb63 0509 	sbc.w	r5, r3, r9
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	00eb      	lsls	r3, r5, #3
 8001a94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a98:	00e2      	lsls	r2, r4, #3
 8001a9a:	4614      	mov	r4, r2
 8001a9c:	461d      	mov	r5, r3
 8001a9e:	eb14 030a 	adds.w	r3, r4, sl
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	eb45 030b 	adc.w	r3, r5, fp
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	028b      	lsls	r3, r1, #10
 8001aba:	4621      	mov	r1, r4
 8001abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	028a      	lsls	r2, r1, #10
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aca:	2200      	movs	r2, #0
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	60fa      	str	r2, [r7, #12]
 8001ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ad4:	f7fe fbcc 	bl	8000270 <__aeabi_uldivmod>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4613      	mov	r3, r2
 8001ade:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	0c1b      	lsrs	r3, r3, #16
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	3301      	adds	r3, #1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001af0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001afa:	e002      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x184>)
 8001afe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3740      	adds	r7, #64	; 0x40
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	00f42400 	.word	0x00f42400
 8001b18:	017d7840 	.word	0x017d7840

08001b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000000 	.word	0x20000000

08001b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b38:	f7ff fff0 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0a9b      	lsrs	r3, r3, #10
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4903      	ldr	r1, [pc, #12]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	080055d0 	.word	0x080055d0

08001b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b60:	f7ff ffdc 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0b5b      	lsrs	r3, r3, #13
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	080055d0 	.word	0x080055d0

08001b84 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e022      	b.n	8001bdc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d105      	bne.n	8001bae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7fe fe8f 	bl	80008cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f814 	bl	8001be4 <HAL_SD_InitCard>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00a      	b.n	8001bdc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001be4:	b5b0      	push	{r4, r5, r7, lr}
 8001be6:	b08e      	sub	sp, #56	; 0x38
 8001be8:	af04      	add	r7, sp, #16
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001c00:	2376      	movs	r3, #118	; 0x76
 8001c02:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681d      	ldr	r5, [r3, #0]
 8001c08:	466c      	mov	r4, sp
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c16:	f107 0308 	add.w	r3, r7, #8
 8001c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	f001 fcfd 	bl	800361c <SDIO_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e04f      	b.n	8001cd4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001c34:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <HAL_SD_InitCard+0xf8>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f001 fd35 	bl	80036ae <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <HAL_SD_InitCard+0xf8>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8001c4a:	2002      	movs	r0, #2
 8001c4c:	f7ff f86a 	bl	8000d24 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 ff03 	bl	8002a5c <SD_PowerON>
 8001c56:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00b      	beq.n	8001c76 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e02e      	b.n	8001cd4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 fe22 	bl	80028c0 <SD_InitCard>
 8001c7c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00b      	beq.n	8001c9c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e01b      	b.n	8001cd4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f001 fd94 	bl	80037d2 <SDMMC_CmdBlockLength>
 8001caa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00f      	beq.n	8001cd2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_SD_InitCard+0xfc>)
 8001cb8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3728      	adds	r7, #40	; 0x28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bdb0      	pop	{r4, r5, r7, pc}
 8001cdc:	422580a0 	.word	0x422580a0
 8001ce0:	004005ff 	.word	0x004005ff

08001ce4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b092      	sub	sp, #72	; 0x48
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001cf2:	f7ff f80b 	bl	8000d0c <HAL_GetTick>
 8001cf6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d107      	bne.n	8001d16 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e1bd      	b.n	8002092 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	f040 81b0 	bne.w	8002084 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	441a      	add	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d907      	bls.n	8001d48 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e1a4      	b.n	8002092 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2200      	movs	r2, #0
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d002      	beq.n	8001d66 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8001d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d62:	025b      	lsls	r3, r3, #9
 8001d64:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	025b      	lsls	r3, r3, #9
 8001d70:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001d72:	2390      	movs	r3, #144	; 0x90
 8001d74:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001d76:	2302      	movs	r3, #2
 8001d78:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f107 0214 	add.w	r2, r7, #20
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f001 fcf4 	bl	800377a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d90a      	bls.n	8001dae <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001da4:	4618      	mov	r0, r3
 8001da6:	f001 fd58 	bl	800385a <SDMMC_CmdReadMultiBlock>
 8001daa:	6478      	str	r0, [r7, #68]	; 0x44
 8001dac:	e009      	b.n	8001dc2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f001 fd2b 	bl	8003816 <SDMMC_CmdReadSingleBlock>
 8001dc0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d012      	beq.n	8001dee <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a7a      	ldr	r2, [pc, #488]	; (8001fb8 <HAL_SD_ReadBlocks+0x2d4>)
 8001dce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e151      	b.n	8002092 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001df2:	e061      	b.n	8001eb8 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d03c      	beq.n	8001e7c <HAL_SD_ReadBlocks+0x198>
 8001e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d039      	beq.n	8001e7c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	643b      	str	r3, [r7, #64]	; 0x40
 8001e0c:	e033      	b.n	8001e76 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f001 fc2d 	bl	8003672 <SDIO_ReadFIFO>
 8001e18:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e20:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e24:	3301      	adds	r3, #1
 8001e26:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e36:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e40:	3b01      	subs	r3, #1
 8001e42:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e46:	0c1b      	lsrs	r3, r3, #16
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e50:	3301      	adds	r3, #1
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e56:	3b01      	subs	r3, #1
 8001e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5c:	0e1b      	lsrs	r3, r3, #24
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e62:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e66:	3301      	adds	r3, #1
 8001e68:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8001e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e72:	3301      	adds	r3, #1
 8001e74:	643b      	str	r3, [r7, #64]	; 0x40
 8001e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e78:	2b07      	cmp	r3, #7
 8001e7a:	d9c8      	bls.n	8001e0e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001e7c:	f7fe ff46 	bl	8000d0c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d902      	bls.n	8001e92 <HAL_SD_ReadBlocks+0x1ae>
 8001e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d112      	bne.n	8001eb8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a48      	ldr	r2, [pc, #288]	; (8001fb8 <HAL_SD_ReadBlocks+0x2d4>)
 8001e98:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0ec      	b.n	8002092 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ebe:	f240 332a 	movw	r3, #810	; 0x32a
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d095      	beq.n	8001df4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d022      	beq.n	8001f1c <HAL_SD_ReadBlocks+0x238>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d91f      	bls.n	8001f1c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d01b      	beq.n	8001f1c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f001 fd1d 	bl	8003928 <SDMMC_CmdStopTransfer>
 8001eee:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d012      	beq.n	8001f1c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a2f      	ldr	r2, [pc, #188]	; (8001fb8 <HAL_SD_ReadBlocks+0x2d4>)
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f04:	431a      	orrs	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0ba      	b.n	8002092 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d012      	beq.n	8001f50 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a22      	ldr	r2, [pc, #136]	; (8001fb8 <HAL_SD_ReadBlocks+0x2d4>)
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f36:	f043 0208 	orr.w	r2, r3, #8
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0a0      	b.n	8002092 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d012      	beq.n	8001f84 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a15      	ldr	r2, [pc, #84]	; (8001fb8 <HAL_SD_ReadBlocks+0x2d4>)
 8001f64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6a:	f043 0202 	orr.w	r2, r3, #2
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e086      	b.n	8002092 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8a:	f003 0320 	and.w	r3, r3, #32
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d063      	beq.n	800205a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <HAL_SD_ReadBlocks+0x2d4>)
 8001f98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	f043 0220 	orr.w	r2, r3, #32
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e06c      	b.n	8002092 <HAL_SD_ReadBlocks+0x3ae>
 8001fb8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 fb56 	bl	8003672 <SDIO_ReadFIFO>
 8001fc6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8001fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fce:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe8:	3301      	adds	r3, #1
 8001fea:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	0c1b      	lsrs	r3, r3, #16
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffe:	3301      	adds	r3, #1
 8002000:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002004:	3b01      	subs	r3, #1
 8002006:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200a:	0e1b      	lsrs	r3, r3, #24
 800200c:	b2da      	uxtb	r2, r3
 800200e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002010:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002014:	3301      	adds	r3, #1
 8002016:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800201a:	3b01      	subs	r3, #1
 800201c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800201e:	f7fe fe75 	bl	8000d0c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800202a:	429a      	cmp	r2, r3
 800202c:	d902      	bls.n	8002034 <HAL_SD_ReadBlocks+0x350>
 800202e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002030:	2b00      	cmp	r3, #0
 8002032:	d112      	bne.n	800205a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a18      	ldr	r2, [pc, #96]	; (800209c <HAL_SD_ReadBlocks+0x3b8>)
 800203a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002040:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e01b      	b.n	8002092 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_SD_ReadBlocks+0x38a>
 8002068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1a6      	bne.n	8001fbc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f240 523a 	movw	r2, #1338	; 0x53a
 8002076:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	e006      	b.n	8002092 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002088:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
  }
}
 8002092:	4618      	mov	r0, r3
 8002094:	3748      	adds	r7, #72	; 0x48
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	004005ff 	.word	0x004005ff

080020a0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b092      	sub	sp, #72	; 0x48
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80020ae:	f7fe fe2d 	bl	8000d0c <HAL_GetTick>
 80020b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d107      	bne.n	80020d2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e166      	b.n	80023a0 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	f040 8159 	bne.w	8002392 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80020e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	441a      	add	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d907      	bls.n	8002104 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e14d      	b.n	80023a0 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2203      	movs	r2, #3
 8002108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2200      	movs	r2, #0
 8002112:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	2b01      	cmp	r3, #1
 800211a:	d002      	beq.n	8002122 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800211c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211e:	025b      	lsls	r3, r3, #9
 8002120:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
 8002126:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	025b      	lsls	r3, r3, #9
 800212c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800212e:	2390      	movs	r3, #144	; 0x90
 8002130:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002136:	2300      	movs	r3, #0
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800213a:	2301      	movs	r3, #1
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f107 0218 	add.w	r2, r7, #24
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f001 fb16 	bl	800377a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d90a      	bls.n	800216a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2220      	movs	r2, #32
 8002158:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002160:	4618      	mov	r0, r3
 8002162:	f001 fbbe 	bl	80038e2 <SDMMC_CmdWriteMultiBlock>
 8002166:	6478      	str	r0, [r7, #68]	; 0x44
 8002168:	e009      	b.n	800217e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2210      	movs	r2, #16
 800216e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002176:	4618      	mov	r0, r3
 8002178:	f001 fb91 	bl	800389e <SDMMC_CmdWriteSingleBlock>
 800217c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800217e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002180:	2b00      	cmp	r3, #0
 8002182:	d012      	beq.n	80021aa <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a87      	ldr	r2, [pc, #540]	; (80023a8 <HAL_SD_WriteBlocks+0x308>)
 800218a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002192:	431a      	orrs	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0fa      	b.n	80023a0 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80021ae:	e065      	b.n	800227c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d040      	beq.n	8002240 <HAL_SD_WriteBlocks+0x1a0>
 80021be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d03d      	beq.n	8002240 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	643b      	str	r3, [r7, #64]	; 0x40
 80021c8:	e037      	b.n	800223a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80021ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80021d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d2:	3301      	adds	r3, #1
 80021d4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80021d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d8:	3b01      	subs	r3, #1
 80021da:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80021dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	021a      	lsls	r2, r3, #8
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80021e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ea:	3301      	adds	r3, #1
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80021ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021f0:	3b01      	subs	r3, #1
 80021f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80021f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	041a      	lsls	r2, r3, #16
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002202:	3301      	adds	r3, #1
 8002204:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002208:	3b01      	subs	r3, #1
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	061a      	lsls	r2, r3, #24
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	4313      	orrs	r3, r2
 8002216:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221a:	3301      	adds	r3, #1
 800221c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800221e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002220:	3b01      	subs	r3, #1
 8002222:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f107 0214 	add.w	r2, r7, #20
 800222c:	4611      	mov	r1, r2
 800222e:	4618      	mov	r0, r3
 8002230:	f001 fa2c 	bl	800368c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002236:	3301      	adds	r3, #1
 8002238:	643b      	str	r3, [r7, #64]	; 0x40
 800223a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800223c:	2b07      	cmp	r3, #7
 800223e:	d9c4      	bls.n	80021ca <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002240:	f7fe fd64 	bl	8000d0c <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800224c:	429a      	cmp	r2, r3
 800224e:	d902      	bls.n	8002256 <HAL_SD_WriteBlocks+0x1b6>
 8002250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002252:	2b00      	cmp	r3, #0
 8002254:	d112      	bne.n	800227c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a53      	ldr	r2, [pc, #332]	; (80023a8 <HAL_SD_WriteBlocks+0x308>)
 800225c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002264:	431a      	orrs	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e091      	b.n	80023a0 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002282:	f240 331a 	movw	r3, #794	; 0x31a
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d091      	beq.n	80021b0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d022      	beq.n	80022e0 <HAL_SD_WriteBlocks+0x240>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d91f      	bls.n	80022e0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d01b      	beq.n	80022e0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f001 fb3b 	bl	8003928 <SDMMC_CmdStopTransfer>
 80022b2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80022b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d012      	beq.n	80022e0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a3a      	ldr	r2, [pc, #232]	; (80023a8 <HAL_SD_WriteBlocks+0x308>)
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c8:	431a      	orrs	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e05f      	b.n	80023a0 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d012      	beq.n	8002314 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a2d      	ldr	r2, [pc, #180]	; (80023a8 <HAL_SD_WriteBlocks+0x308>)
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	f043 0208 	orr.w	r2, r3, #8
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e045      	b.n	80023a0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d012      	beq.n	8002348 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <HAL_SD_WriteBlocks+0x308>)
 8002328:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	f043 0202 	orr.w	r2, r3, #2
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e02b      	b.n	80023a0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	d012      	beq.n	800237c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <HAL_SD_WriteBlocks+0x308>)
 800235c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002362:	f043 0210 	orr.w	r2, r3, #16
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e011      	b.n	80023a0 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f240 523a 	movw	r2, #1338	; 0x53a
 8002384:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	e006      	b.n	80023a0 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
  }
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3748      	adds	r7, #72	; 0x48
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	004005ff 	.word	0x004005ff

080023ac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ba:	0f9b      	lsrs	r3, r3, #30
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023c6:	0e9b      	lsrs	r3, r3, #26
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023d8:	0e1b      	lsrs	r3, r3, #24
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ea:	0c1b      	lsrs	r3, r3, #16
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002402:	b2da      	uxtb	r2, r3
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800240c:	0d1b      	lsrs	r3, r3, #20
 800240e:	b29a      	uxth	r2, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	b2da      	uxtb	r2, r3
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800242a:	0bdb      	lsrs	r3, r3, #15
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	b2da      	uxtb	r2, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800243c:	0b9b      	lsrs	r3, r3, #14
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	b2da      	uxtb	r2, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800244e:	0b5b      	lsrs	r3, r3, #13
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	b2da      	uxtb	r2, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002460:	0b1b      	lsrs	r3, r3, #12
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	b2da      	uxtb	r2, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2200      	movs	r2, #0
 8002472:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002478:	2b00      	cmp	r3, #0
 800247a:	d163      	bne.n	8002544 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002480:	009a      	lsls	r2, r3, #2
 8002482:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002486:	4013      	ands	r3, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800248c:	0f92      	lsrs	r2, r2, #30
 800248e:	431a      	orrs	r2, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002498:	0edb      	lsrs	r3, r3, #27
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024aa:	0e1b      	lsrs	r3, r3, #24
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024bc:	0d5b      	lsrs	r3, r3, #21
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ce:	0c9b      	lsrs	r3, r3, #18
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024e0:	0bdb      	lsrs	r3, r3, #15
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	7e1b      	ldrb	r3, [r3, #24]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	3302      	adds	r3, #2
 8002504:	2201      	movs	r2, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800250e:	fb03 f202 	mul.w	r2, r3, r2
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	7a1b      	ldrb	r3, [r3, #8]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	2201      	movs	r2, #1
 8002522:	409a      	lsls	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002530:	0a52      	lsrs	r2, r2, #9
 8002532:	fb03 f202 	mul.w	r2, r3, r2
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002540:	661a      	str	r2, [r3, #96]	; 0x60
 8002542:	e031      	b.n	80025a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002548:	2b01      	cmp	r3, #1
 800254a:	d11d      	bne.n	8002588 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002550:	041b      	lsls	r3, r3, #16
 8002552:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255a:	0c1b      	lsrs	r3, r3, #16
 800255c:	431a      	orrs	r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	3301      	adds	r3, #1
 8002568:	029a      	lsls	r2, r3, #10
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800257c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	661a      	str	r2, [r3, #96]	; 0x60
 8002586:	e00f      	b.n	80025a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a58      	ldr	r2, [pc, #352]	; (80026f0 <HAL_SD_GetCardCSD+0x344>)
 800258e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e09d      	b.n	80026e4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ac:	0b9b      	lsrs	r3, r3, #14
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025be:	09db      	lsrs	r3, r3, #7
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	0fdb      	lsrs	r3, r3, #31
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	0f5b      	lsrs	r3, r3, #29
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	0e9b      	lsrs	r3, r3, #26
 8002600:	b2db      	uxtb	r3, r3
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	b2da      	uxtb	r2, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	0d9b      	lsrs	r3, r3, #22
 8002612:	b2db      	uxtb	r3, r3
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	b2da      	uxtb	r2, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002622:	0d5b      	lsrs	r3, r3, #21
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	b2da      	uxtb	r2, r3
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	0c1b      	lsrs	r3, r3, #16
 8002640:	b2db      	uxtb	r3, r3
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	b2da      	uxtb	r2, r3
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002652:	0bdb      	lsrs	r3, r3, #15
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	b2da      	uxtb	r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	0b9b      	lsrs	r3, r3, #14
 8002668:	b2db      	uxtb	r3, r3
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	b2da      	uxtb	r2, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267a:	0b5b      	lsrs	r3, r3, #13
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	b2da      	uxtb	r2, r3
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	0b1b      	lsrs	r3, r3, #12
 8002690:	b2db      	uxtb	r3, r3
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	b2da      	uxtb	r2, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	0a9b      	lsrs	r3, r3, #10
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	004005ff 	.word	0x004005ff

080026f4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800274c:	b5b0      	push	{r4, r5, r7, lr}
 800274e:	b08e      	sub	sp, #56	; 0x38
 8002750:	af04      	add	r7, sp, #16
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2203      	movs	r2, #3
 8002760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	2b03      	cmp	r3, #3
 800276a:	d02e      	beq.n	80027ca <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002772:	d106      	bne.n	8002782 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	639a      	str	r2, [r3, #56]	; 0x38
 8002780:	e029      	b.n	80027d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002788:	d10a      	bne.n	80027a0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fa1c 	bl	8002bc8 <SD_WideBus_Enable>
 8002790:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	639a      	str	r2, [r3, #56]	; 0x38
 800279e:	e01a      	b.n	80027d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10a      	bne.n	80027bc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa59 	bl	8002c5e <SD_WideBus_Disable>
 80027ac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	639a      	str	r2, [r3, #56]	; 0x38
 80027ba:	e00c      	b.n	80027d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	639a      	str	r2, [r3, #56]	; 0x38
 80027c8:	e005      	b.n	80027d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00b      	beq.n	80027f6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a26      	ldr	r2, [pc, #152]	; (800287c <HAL_SD_ConfigWideBusOperation+0x130>)
 80027e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80027f4:	e01f      	b.n	8002836 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681d      	ldr	r5, [r3, #0]
 800281c:	466c      	mov	r4, sp
 800281e:	f107 0314 	add.w	r3, r7, #20
 8002822:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002826:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800282a:	f107 0308 	add.w	r3, r7, #8
 800282e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002830:	4628      	mov	r0, r5
 8002832:	f000 fef3 	bl	800361c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800283e:	4618      	mov	r0, r3
 8002840:	f000 ffc7 	bl	80037d2 <SDMMC_CmdBlockLength>
 8002844:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00c      	beq.n	8002866 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0a      	ldr	r2, [pc, #40]	; (800287c <HAL_SD_ConfigWideBusOperation+0x130>)
 8002852:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800286e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002872:	4618      	mov	r0, r3
 8002874:	3728      	adds	r7, #40	; 0x28
 8002876:	46bd      	mov	sp, r7
 8002878:	bdb0      	pop	{r4, r5, r7, pc}
 800287a:	bf00      	nop
 800287c:	004005ff 	.word	0x004005ff

08002880 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	4619      	mov	r1, r3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f970 	bl	8002b78 <SD_SendStatus>
 8002898:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	0a5b      	lsrs	r3, r3, #9
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80028b6:	693b      	ldr	r3, [r7, #16]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80028c0:	b5b0      	push	{r4, r5, r7, lr}
 80028c2:	b094      	sub	sp, #80	; 0x50
 80028c4:	af04      	add	r7, sp, #16
 80028c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80028c8:	2301      	movs	r3, #1
 80028ca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fefa 	bl	80036ca <SDIO_GetPowerState>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80028dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028e0:	e0b8      	b.n	8002a54 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d02f      	beq.n	800294a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f001 f924 	bl	8003b3c <SDMMC_CmdSendCID>
 80028f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80028f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <SD_InitCard+0x40>
    {
      return errorstate;
 80028fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028fe:	e0a9      	b.n	8002a54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f000 ff24 	bl	8003754 <SDIO_GetResponse>
 800290c:	4602      	mov	r2, r0
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2104      	movs	r1, #4
 8002918:	4618      	mov	r0, r3
 800291a:	f000 ff1b 	bl	8003754 <SDIO_GetResponse>
 800291e:	4602      	mov	r2, r0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2108      	movs	r1, #8
 800292a:	4618      	mov	r0, r3
 800292c:	f000 ff12 	bl	8003754 <SDIO_GetResponse>
 8002930:	4602      	mov	r2, r0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	210c      	movs	r1, #12
 800293c:	4618      	mov	r0, r3
 800293e:	f000 ff09 	bl	8003754 <SDIO_GetResponse>
 8002942:	4602      	mov	r2, r0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	2b03      	cmp	r3, #3
 8002950:	d00d      	beq.n	800296e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f107 020e 	add.w	r2, r7, #14
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f001 f92a 	bl	8003bb6 <SDMMC_CmdSetRelAdd>
 8002962:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <SD_InitCard+0xae>
    {
      return errorstate;
 800296a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296c:	e072      	b.n	8002a54 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	2b03      	cmp	r3, #3
 8002974:	d036      	beq.n	80029e4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002976:	89fb      	ldrh	r3, [r7, #14]
 8002978:	461a      	mov	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002986:	041b      	lsls	r3, r3, #16
 8002988:	4619      	mov	r1, r3
 800298a:	4610      	mov	r0, r2
 800298c:	f001 f8f4 	bl	8003b78 <SDMMC_CmdSendCSD>
 8002990:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <SD_InitCard+0xdc>
    {
      return errorstate;
 8002998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800299a:	e05b      	b.n	8002a54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fed6 	bl	8003754 <SDIO_GetResponse>
 80029a8:	4602      	mov	r2, r0
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2104      	movs	r1, #4
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fecd 	bl	8003754 <SDIO_GetResponse>
 80029ba:	4602      	mov	r2, r0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2108      	movs	r1, #8
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fec4 	bl	8003754 <SDIO_GetResponse>
 80029cc:	4602      	mov	r2, r0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	210c      	movs	r1, #12
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 febb 	bl	8003754 <SDIO_GetResponse>
 80029de:	4602      	mov	r2, r0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2104      	movs	r1, #4
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 feb2 	bl	8003754 <SDIO_GetResponse>
 80029f0:	4603      	mov	r3, r0
 80029f2:	0d1a      	lsrs	r2, r3, #20
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80029f8:	f107 0310 	add.w	r3, r7, #16
 80029fc:	4619      	mov	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff fcd4 	bl	80023ac <HAL_SD_GetCardCSD>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002a0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002a0e:	e021      	b.n	8002a54 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	461c      	mov	r4, r3
 8002a1e:	4615      	mov	r5, r2
 8002a20:	4622      	mov	r2, r4
 8002a22:	462b      	mov	r3, r5
 8002a24:	4608      	mov	r0, r1
 8002a26:	f000 ffa1 	bl	800396c <SDMMC_CmdSelDesel>
 8002a2a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <SD_InitCard+0x176>
  {
    return errorstate;
 8002a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a34:	e00e      	b.n	8002a54 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681d      	ldr	r5, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	466c      	mov	r4, sp
 8002a3e:	f103 0210 	add.w	r2, r3, #16
 8002a42:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002a48:	3304      	adds	r3, #4
 8002a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a4c:	4628      	mov	r0, r5
 8002a4e:	f000 fde5 	bl	800361c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3740      	adds	r7, #64	; 0x40
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bdb0      	pop	{r4, r5, r7, pc}

08002a5c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 ff9c 	bl	80039b2 <SDMMC_CmdGoIdleState>
 8002a7a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <SD_PowerON+0x2a>
  {
    return errorstate;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	e072      	b.n	8002b6c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 ffaf 	bl	80039ee <SDMMC_CmdOperCond>
 8002a90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00d      	beq.n	8002ab4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 ff85 	bl	80039b2 <SDMMC_CmdGoIdleState>
 8002aa8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d004      	beq.n	8002aba <SD_PowerON+0x5e>
    {
      return errorstate;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	e05b      	b.n	8002b6c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d137      	bne.n	8002b32 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 ffaf 	bl	8003a2c <SDMMC_CmdAppCommand>
 8002ace:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d02d      	beq.n	8002b32 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ad6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ada:	e047      	b.n	8002b6c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 ffa2 	bl	8003a2c <SDMMC_CmdAppCommand>
 8002ae8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <SD_PowerON+0x98>
    {
      return errorstate;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	e03b      	b.n	8002b6c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	491e      	ldr	r1, [pc, #120]	; (8002b74 <SD_PowerON+0x118>)
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 ffb8 	bl	8003a70 <SDMMC_CmdAppOperCommand>
 8002b00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002b08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b0c:	e02e      	b.n	8002b6c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fe1d 	bl	8003754 <SDIO_GetResponse>
 8002b1a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	0fdb      	lsrs	r3, r3, #31
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <SD_PowerON+0xcc>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <SD_PowerON+0xce>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	613b      	str	r3, [r7, #16]

    count++;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d802      	bhi.n	8002b42 <SD_PowerON+0xe6>
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0cc      	beq.n	8002adc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d902      	bls.n	8002b52 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b50:	e00c      	b.n	8002b6c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44
 8002b62:	e002      	b.n	8002b6a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	c1100000 	.word	0xc1100000

08002b78 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002b88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b8c:	e018      	b.n	8002bc0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b96:	041b      	lsls	r3, r3, #16
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	f001 f82c 	bl	8003bf8 <SDMMC_CmdSendStatus>
 8002ba0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <SD_SendStatus+0x34>
  {
    return errorstate;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	e009      	b.n	8002bc0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fdce 	bl	8003754 <SDIO_GetResponse>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fdb8 	bl	8003754 <SDIO_GetResponse>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bee:	d102      	bne.n	8002bf6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002bf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bf4:	e02f      	b.n	8002c56 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002bf6:	f107 030c 	add.w	r3, r7, #12
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f879 	bl	8002cf4 <SD_FindSCR>
 8002c02:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	e023      	b.n	8002c56 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01c      	beq.n	8002c52 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c20:	041b      	lsls	r3, r3, #16
 8002c22:	4619      	mov	r1, r3
 8002c24:	4610      	mov	r0, r2
 8002c26:	f000 ff01 	bl	8003a2c <SDMMC_CmdAppCommand>
 8002c2a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	e00f      	b.n	8002c56 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 ff3a 	bl	8003ab6 <SDMMC_CmdBusWidth>
 8002c42:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	e003      	b.n	8002c56 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e001      	b.n	8002c56 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002c52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b086      	sub	sp, #24
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fd6d 	bl	8003754 <SDIO_GetResponse>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c84:	d102      	bne.n	8002c8c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002c86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c8a:	e02f      	b.n	8002cec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002c8c:	f107 030c 	add.w	r3, r7, #12
 8002c90:	4619      	mov	r1, r3
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f82e 	bl	8002cf4 <SD_FindSCR>
 8002c98:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	e023      	b.n	8002cec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01c      	beq.n	8002ce8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb6:	041b      	lsls	r3, r3, #16
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f000 feb6 	bl	8003a2c <SDMMC_CmdAppCommand>
 8002cc0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	e00f      	b.n	8002cec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 feef 	bl	8003ab6 <SDMMC_CmdBusWidth>
 8002cd8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	e003      	b.n	8002cec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	e001      	b.n	8002cec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002ce8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b08f      	sub	sp, #60	; 0x3c
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002cfe:	f7fe f805 	bl	8000d0c <HAL_GetTick>
 8002d02:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2108      	movs	r1, #8
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fd59 	bl	80037d2 <SDMMC_CmdBlockLength>
 8002d20:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <SD_FindSCR+0x38>
  {
    return errorstate;
 8002d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2a:	e0b2      	b.n	8002e92 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d34:	041b      	lsls	r3, r3, #16
 8002d36:	4619      	mov	r1, r3
 8002d38:	4610      	mov	r0, r2
 8002d3a:	f000 fe77 	bl	8003a2c <SDMMC_CmdAppCommand>
 8002d3e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <SD_FindSCR+0x56>
  {
    return errorstate;
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d48:	e0a3      	b.n	8002e92 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8002d50:	2308      	movs	r3, #8
 8002d52:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002d54:	2330      	movs	r3, #48	; 0x30
 8002d56:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002d60:	2301      	movs	r3, #1
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f107 0210 	add.w	r2, r7, #16
 8002d6c:	4611      	mov	r1, r2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fd03 	bl	800377a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 febe 	bl	8003afa <SDMMC_CmdSendSCR>
 8002d7e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d02a      	beq.n	8002ddc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	e083      	b.n	8002e92 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00f      	beq.n	8002db8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6819      	ldr	r1, [r3, #0]
 8002d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	f107 0208 	add.w	r2, r7, #8
 8002da4:	18d4      	adds	r4, r2, r3
 8002da6:	4608      	mov	r0, r1
 8002da8:	f000 fc63 	bl	8003672 <SDIO_ReadFIFO>
 8002dac:	4603      	mov	r3, r0
 8002dae:	6023      	str	r3, [r4, #0]
      index++;
 8002db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db2:	3301      	adds	r3, #1
 8002db4:	637b      	str	r3, [r7, #52]	; 0x34
 8002db6:	e006      	b.n	8002dc6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d012      	beq.n	8002dec <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002dc6:	f7fd ffa1 	bl	8000d0c <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d102      	bne.n	8002ddc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8002dd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002dda:	e05a      	b.n	8002e92 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0cf      	beq.n	8002d8a <SD_FindSCR+0x96>
 8002dea:	e000      	b.n	8002dee <SD_FindSCR+0xfa>
      break;
 8002dec:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2208      	movs	r2, #8
 8002e02:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002e04:	2308      	movs	r3, #8
 8002e06:	e044      	b.n	8002e92 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e037      	b.n	8002e92 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2220      	movs	r2, #32
 8002e36:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8002e38:	2320      	movs	r3, #32
 8002e3a:	e02a      	b.n	8002e92 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f240 523a 	movw	r2, #1338	; 0x53a
 8002e44:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	061a      	lsls	r2, r3, #24
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e52:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002e5c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	0e1b      	lsrs	r3, r3, #24
 8002e62:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e66:	601a      	str	r2, [r3, #0]
    scr++;
 8002e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	061a      	lsls	r2, r3, #24
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	021b      	lsls	r3, r3, #8
 8002e76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e7a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	0a1b      	lsrs	r3, r3, #8
 8002e80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002e84:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	0e1b      	lsrs	r3, r3, #24
 8002e8a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	373c      	adds	r7, #60	; 0x3c
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd90      	pop	{r4, r7, pc}

08002e9a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e03f      	b.n	8002f2c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d106      	bne.n	8002ec6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7fd fd6b 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2224      	movs	r2, #36	; 0x24
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002edc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f928 	bl	8003134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ef2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695a      	ldr	r2, [r3, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f02:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f12:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	; 0x28
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	4613      	mov	r3, r2
 8002f42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b20      	cmp	r3, #32
 8002f52:	d17c      	bne.n	800304e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <HAL_UART_Transmit+0x2c>
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e075      	b.n	8003050 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_UART_Transmit+0x3e>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e06e      	b.n	8003050 <HAL_UART_Transmit+0x11c>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2221      	movs	r2, #33	; 0x21
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f88:	f7fd fec0 	bl	8000d0c <HAL_GetTick>
 8002f8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	88fa      	ldrh	r2, [r7, #6]
 8002f92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	88fa      	ldrh	r2, [r7, #6]
 8002f98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa2:	d108      	bne.n	8002fb6 <HAL_UART_Transmit+0x82>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d104      	bne.n	8002fb6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	e003      	b.n	8002fbe <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fc6:	e02a      	b.n	800301e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2180      	movs	r1, #128	; 0x80
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f840 	bl	8003058 <UART_WaitOnFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e036      	b.n	8003050 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10b      	bne.n	8003000 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	e007      	b.n	8003010 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	781a      	ldrb	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3301      	adds	r3, #1
 800300e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1cf      	bne.n	8002fc8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2200      	movs	r2, #0
 8003030:	2140      	movs	r1, #64	; 0x40
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f810 	bl	8003058 <UART_WaitOnFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e006      	b.n	8003050 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	e000      	b.n	8003050 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800304e:	2302      	movs	r3, #2
  }
}
 8003050:	4618      	mov	r0, r3
 8003052:	3720      	adds	r7, #32
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b090      	sub	sp, #64	; 0x40
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	4613      	mov	r3, r2
 8003066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003068:	e050      	b.n	800310c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d04c      	beq.n	800310c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <UART_WaitOnFlagUntilTimeout+0x30>
 8003078:	f7fd fe48 	bl	8000d0c <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003084:	429a      	cmp	r2, r3
 8003086:	d241      	bcs.n	800310c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	330c      	adds	r3, #12
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	e853 3f00 	ldrex	r3, [r3]
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030a8:	637a      	str	r2, [r7, #52]	; 0x34
 80030aa:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030b0:	e841 2300 	strex	r3, r2, [r1]
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e5      	bne.n	8003088 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3314      	adds	r3, #20
 80030c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	e853 3f00 	ldrex	r3, [r3]
 80030ca:	613b      	str	r3, [r7, #16]
   return(result);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f023 0301 	bic.w	r3, r3, #1
 80030d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3314      	adds	r3, #20
 80030da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030dc:	623a      	str	r2, [r7, #32]
 80030de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e0:	69f9      	ldr	r1, [r7, #28]
 80030e2:	6a3a      	ldr	r2, [r7, #32]
 80030e4:	e841 2300 	strex	r3, r2, [r1]
 80030e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1e5      	bne.n	80030bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e00f      	b.n	800312c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	4013      	ands	r3, r2
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	429a      	cmp	r2, r3
 800311a:	bf0c      	ite	eq
 800311c:	2301      	moveq	r3, #1
 800311e:	2300      	movne	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	429a      	cmp	r2, r3
 8003128:	d09f      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3740      	adds	r7, #64	; 0x40
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003138:	b0c0      	sub	sp, #256	; 0x100
 800313a:	af00      	add	r7, sp, #0
 800313c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003150:	68d9      	ldr	r1, [r3, #12]
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	ea40 0301 	orr.w	r3, r0, r1
 800315c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	431a      	orrs	r2, r3
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	431a      	orrs	r2, r3
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800318c:	f021 010c 	bic.w	r1, r1, #12
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800319a:	430b      	orrs	r3, r1
 800319c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800319e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ae:	6999      	ldr	r1, [r3, #24]
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	ea40 0301 	orr.w	r3, r0, r1
 80031ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b8f      	ldr	r3, [pc, #572]	; (8003400 <UART_SetConfig+0x2cc>)
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d005      	beq.n	80031d4 <UART_SetConfig+0xa0>
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b8d      	ldr	r3, [pc, #564]	; (8003404 <UART_SetConfig+0x2d0>)
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d104      	bne.n	80031de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031d4:	f7fe fcc2 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 80031d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031dc:	e003      	b.n	80031e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031de:	f7fe fca9 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 80031e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f0:	f040 810c 	bne.w	800340c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031f8:	2200      	movs	r2, #0
 80031fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003202:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003206:	4622      	mov	r2, r4
 8003208:	462b      	mov	r3, r5
 800320a:	1891      	adds	r1, r2, r2
 800320c:	65b9      	str	r1, [r7, #88]	; 0x58
 800320e:	415b      	adcs	r3, r3
 8003210:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003212:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003216:	4621      	mov	r1, r4
 8003218:	eb12 0801 	adds.w	r8, r2, r1
 800321c:	4629      	mov	r1, r5
 800321e:	eb43 0901 	adc.w	r9, r3, r1
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800322e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003236:	4690      	mov	r8, r2
 8003238:	4699      	mov	r9, r3
 800323a:	4623      	mov	r3, r4
 800323c:	eb18 0303 	adds.w	r3, r8, r3
 8003240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003244:	462b      	mov	r3, r5
 8003246:	eb49 0303 	adc.w	r3, r9, r3
 800324a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800324e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800325a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800325e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003262:	460b      	mov	r3, r1
 8003264:	18db      	adds	r3, r3, r3
 8003266:	653b      	str	r3, [r7, #80]	; 0x50
 8003268:	4613      	mov	r3, r2
 800326a:	eb42 0303 	adc.w	r3, r2, r3
 800326e:	657b      	str	r3, [r7, #84]	; 0x54
 8003270:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003274:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003278:	f7fc fffa 	bl	8000270 <__aeabi_uldivmod>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4b61      	ldr	r3, [pc, #388]	; (8003408 <UART_SetConfig+0x2d4>)
 8003282:	fba3 2302 	umull	r2, r3, r3, r2
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	011c      	lsls	r4, r3, #4
 800328a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800328e:	2200      	movs	r2, #0
 8003290:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003294:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003298:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800329c:	4642      	mov	r2, r8
 800329e:	464b      	mov	r3, r9
 80032a0:	1891      	adds	r1, r2, r2
 80032a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80032a4:	415b      	adcs	r3, r3
 80032a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032ac:	4641      	mov	r1, r8
 80032ae:	eb12 0a01 	adds.w	sl, r2, r1
 80032b2:	4649      	mov	r1, r9
 80032b4:	eb43 0b01 	adc.w	fp, r3, r1
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032cc:	4692      	mov	sl, r2
 80032ce:	469b      	mov	fp, r3
 80032d0:	4643      	mov	r3, r8
 80032d2:	eb1a 0303 	adds.w	r3, sl, r3
 80032d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032da:	464b      	mov	r3, r9
 80032dc:	eb4b 0303 	adc.w	r3, fp, r3
 80032e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032f8:	460b      	mov	r3, r1
 80032fa:	18db      	adds	r3, r3, r3
 80032fc:	643b      	str	r3, [r7, #64]	; 0x40
 80032fe:	4613      	mov	r3, r2
 8003300:	eb42 0303 	adc.w	r3, r2, r3
 8003304:	647b      	str	r3, [r7, #68]	; 0x44
 8003306:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800330a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800330e:	f7fc ffaf 	bl	8000270 <__aeabi_uldivmod>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4611      	mov	r1, r2
 8003318:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <UART_SetConfig+0x2d4>)
 800331a:	fba3 2301 	umull	r2, r3, r3, r1
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	2264      	movs	r2, #100	; 0x64
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	1acb      	subs	r3, r1, r3
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800332e:	4b36      	ldr	r3, [pc, #216]	; (8003408 <UART_SetConfig+0x2d4>)
 8003330:	fba3 2302 	umull	r2, r3, r3, r2
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800333c:	441c      	add	r4, r3
 800333e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003342:	2200      	movs	r2, #0
 8003344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003348:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800334c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003350:	4642      	mov	r2, r8
 8003352:	464b      	mov	r3, r9
 8003354:	1891      	adds	r1, r2, r2
 8003356:	63b9      	str	r1, [r7, #56]	; 0x38
 8003358:	415b      	adcs	r3, r3
 800335a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800335c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003360:	4641      	mov	r1, r8
 8003362:	1851      	adds	r1, r2, r1
 8003364:	6339      	str	r1, [r7, #48]	; 0x30
 8003366:	4649      	mov	r1, r9
 8003368:	414b      	adcs	r3, r1
 800336a:	637b      	str	r3, [r7, #52]	; 0x34
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003378:	4659      	mov	r1, fp
 800337a:	00cb      	lsls	r3, r1, #3
 800337c:	4651      	mov	r1, sl
 800337e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003382:	4651      	mov	r1, sl
 8003384:	00ca      	lsls	r2, r1, #3
 8003386:	4610      	mov	r0, r2
 8003388:	4619      	mov	r1, r3
 800338a:	4603      	mov	r3, r0
 800338c:	4642      	mov	r2, r8
 800338e:	189b      	adds	r3, r3, r2
 8003390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003394:	464b      	mov	r3, r9
 8003396:	460a      	mov	r2, r1
 8003398:	eb42 0303 	adc.w	r3, r2, r3
 800339c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033b4:	460b      	mov	r3, r1
 80033b6:	18db      	adds	r3, r3, r3
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ba:	4613      	mov	r3, r2
 80033bc:	eb42 0303 	adc.w	r3, r2, r3
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033ca:	f7fc ff51 	bl	8000270 <__aeabi_uldivmod>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <UART_SetConfig+0x2d4>)
 80033d4:	fba3 1302 	umull	r1, r3, r3, r2
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	2164      	movs	r1, #100	; 0x64
 80033dc:	fb01 f303 	mul.w	r3, r1, r3
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	3332      	adds	r3, #50	; 0x32
 80033e6:	4a08      	ldr	r2, [pc, #32]	; (8003408 <UART_SetConfig+0x2d4>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	095b      	lsrs	r3, r3, #5
 80033ee:	f003 0207 	and.w	r2, r3, #7
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4422      	add	r2, r4
 80033fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033fc:	e105      	b.n	800360a <UART_SetConfig+0x4d6>
 80033fe:	bf00      	nop
 8003400:	40011000 	.word	0x40011000
 8003404:	40011400 	.word	0x40011400
 8003408:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800340c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003410:	2200      	movs	r2, #0
 8003412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003416:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800341a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800341e:	4642      	mov	r2, r8
 8003420:	464b      	mov	r3, r9
 8003422:	1891      	adds	r1, r2, r2
 8003424:	6239      	str	r1, [r7, #32]
 8003426:	415b      	adcs	r3, r3
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
 800342a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800342e:	4641      	mov	r1, r8
 8003430:	1854      	adds	r4, r2, r1
 8003432:	4649      	mov	r1, r9
 8003434:	eb43 0501 	adc.w	r5, r3, r1
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	00eb      	lsls	r3, r5, #3
 8003442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003446:	00e2      	lsls	r2, r4, #3
 8003448:	4614      	mov	r4, r2
 800344a:	461d      	mov	r5, r3
 800344c:	4643      	mov	r3, r8
 800344e:	18e3      	adds	r3, r4, r3
 8003450:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003454:	464b      	mov	r3, r9
 8003456:	eb45 0303 	adc.w	r3, r5, r3
 800345a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800346a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800347a:	4629      	mov	r1, r5
 800347c:	008b      	lsls	r3, r1, #2
 800347e:	4621      	mov	r1, r4
 8003480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003484:	4621      	mov	r1, r4
 8003486:	008a      	lsls	r2, r1, #2
 8003488:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800348c:	f7fc fef0 	bl	8000270 <__aeabi_uldivmod>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4b60      	ldr	r3, [pc, #384]	; (8003618 <UART_SetConfig+0x4e4>)
 8003496:	fba3 2302 	umull	r2, r3, r3, r2
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	011c      	lsls	r4, r3, #4
 800349e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034a2:	2200      	movs	r2, #0
 80034a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034b0:	4642      	mov	r2, r8
 80034b2:	464b      	mov	r3, r9
 80034b4:	1891      	adds	r1, r2, r2
 80034b6:	61b9      	str	r1, [r7, #24]
 80034b8:	415b      	adcs	r3, r3
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c0:	4641      	mov	r1, r8
 80034c2:	1851      	adds	r1, r2, r1
 80034c4:	6139      	str	r1, [r7, #16]
 80034c6:	4649      	mov	r1, r9
 80034c8:	414b      	adcs	r3, r1
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034d8:	4659      	mov	r1, fp
 80034da:	00cb      	lsls	r3, r1, #3
 80034dc:	4651      	mov	r1, sl
 80034de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034e2:	4651      	mov	r1, sl
 80034e4:	00ca      	lsls	r2, r1, #3
 80034e6:	4610      	mov	r0, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	4603      	mov	r3, r0
 80034ec:	4642      	mov	r2, r8
 80034ee:	189b      	adds	r3, r3, r2
 80034f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034f4:	464b      	mov	r3, r9
 80034f6:	460a      	mov	r2, r1
 80034f8:	eb42 0303 	adc.w	r3, r2, r3
 80034fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	67bb      	str	r3, [r7, #120]	; 0x78
 800350a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003518:	4649      	mov	r1, r9
 800351a:	008b      	lsls	r3, r1, #2
 800351c:	4641      	mov	r1, r8
 800351e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003522:	4641      	mov	r1, r8
 8003524:	008a      	lsls	r2, r1, #2
 8003526:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800352a:	f7fc fea1 	bl	8000270 <__aeabi_uldivmod>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4b39      	ldr	r3, [pc, #228]	; (8003618 <UART_SetConfig+0x4e4>)
 8003534:	fba3 1302 	umull	r1, r3, r3, r2
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	2164      	movs	r1, #100	; 0x64
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	3332      	adds	r3, #50	; 0x32
 8003546:	4a34      	ldr	r2, [pc, #208]	; (8003618 <UART_SetConfig+0x4e4>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003552:	441c      	add	r4, r3
 8003554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003558:	2200      	movs	r2, #0
 800355a:	673b      	str	r3, [r7, #112]	; 0x70
 800355c:	677a      	str	r2, [r7, #116]	; 0x74
 800355e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003562:	4642      	mov	r2, r8
 8003564:	464b      	mov	r3, r9
 8003566:	1891      	adds	r1, r2, r2
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	415b      	adcs	r3, r3
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003572:	4641      	mov	r1, r8
 8003574:	1851      	adds	r1, r2, r1
 8003576:	6039      	str	r1, [r7, #0]
 8003578:	4649      	mov	r1, r9
 800357a:	414b      	adcs	r3, r1
 800357c:	607b      	str	r3, [r7, #4]
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800358a:	4659      	mov	r1, fp
 800358c:	00cb      	lsls	r3, r1, #3
 800358e:	4651      	mov	r1, sl
 8003590:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003594:	4651      	mov	r1, sl
 8003596:	00ca      	lsls	r2, r1, #3
 8003598:	4610      	mov	r0, r2
 800359a:	4619      	mov	r1, r3
 800359c:	4603      	mov	r3, r0
 800359e:	4642      	mov	r2, r8
 80035a0:	189b      	adds	r3, r3, r2
 80035a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80035a4:	464b      	mov	r3, r9
 80035a6:	460a      	mov	r2, r1
 80035a8:	eb42 0303 	adc.w	r3, r2, r3
 80035ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	663b      	str	r3, [r7, #96]	; 0x60
 80035b8:	667a      	str	r2, [r7, #100]	; 0x64
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80035c6:	4649      	mov	r1, r9
 80035c8:	008b      	lsls	r3, r1, #2
 80035ca:	4641      	mov	r1, r8
 80035cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035d0:	4641      	mov	r1, r8
 80035d2:	008a      	lsls	r2, r1, #2
 80035d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035d8:	f7fc fe4a 	bl	8000270 <__aeabi_uldivmod>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <UART_SetConfig+0x4e4>)
 80035e2:	fba3 1302 	umull	r1, r3, r3, r2
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	2164      	movs	r1, #100	; 0x64
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	3332      	adds	r3, #50	; 0x32
 80035f4:	4a08      	ldr	r2, [pc, #32]	; (8003618 <UART_SetConfig+0x4e4>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	f003 020f 	and.w	r2, r3, #15
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4422      	add	r2, r4
 8003608:	609a      	str	r2, [r3, #8]
}
 800360a:	bf00      	nop
 800360c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003610:	46bd      	mov	sp, r7
 8003612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003616:	bf00      	nop
 8003618:	51eb851f 	.word	0x51eb851f

0800361c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800361c:	b084      	sub	sp, #16
 800361e:	b480      	push	{r7}
 8003620:	b085      	sub	sp, #20
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	f107 001c 	add.w	r0, r7, #28
 800362a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003632:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003634:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003636:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800363a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800363e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003642:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003646:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003656:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	b004      	add	sp, #16
 8003670:	4770      	bx	lr

08003672 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2203      	movs	r2, #3
 80036ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0303 	and.w	r3, r3, #3
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b085      	sub	sp, #20
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003704:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800370a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003710:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003720:	f023 030f 	bic.w	r3, r3, #15
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	b2db      	uxtb	r3, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3314      	adds	r3, #20
 8003762:	461a      	mov	r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	4413      	add	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
}  
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800377a:	b480      	push	{r7}
 800377c:	b085      	sub	sp, #20
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80037a0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80037a6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80037ac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0

}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b088      	sub	sp, #32
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80037e0:	2310      	movs	r3, #16
 80037e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037e4:	2340      	movs	r3, #64	; 0x40
 80037e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037f2:	f107 0308 	add.w	r3, r7, #8
 80037f6:	4619      	mov	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ff74 	bl	80036e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	2110      	movs	r1, #16
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fa19 	bl	8003c3c <SDMMC_GetCmdResp1>
 800380a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800380c:	69fb      	ldr	r3, [r7, #28]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b088      	sub	sp, #32
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003824:	2311      	movs	r3, #17
 8003826:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003828:	2340      	movs	r3, #64	; 0x40
 800382a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003834:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003836:	f107 0308 	add.w	r3, r7, #8
 800383a:	4619      	mov	r1, r3
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff ff52 	bl	80036e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	2111      	movs	r1, #17
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f9f7 	bl	8003c3c <SDMMC_GetCmdResp1>
 800384e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003850:	69fb      	ldr	r3, [r7, #28]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b088      	sub	sp, #32
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003868:	2312      	movs	r3, #18
 800386a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800386c:	2340      	movs	r3, #64	; 0x40
 800386e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003878:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800387a:	f107 0308 	add.w	r3, r7, #8
 800387e:	4619      	mov	r1, r3
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff ff30 	bl	80036e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003886:	f241 3288 	movw	r2, #5000	; 0x1388
 800388a:	2112      	movs	r1, #18
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f9d5 	bl	8003c3c <SDMMC_GetCmdResp1>
 8003892:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003894:	69fb      	ldr	r3, [r7, #28]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b088      	sub	sp, #32
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80038ac:	2318      	movs	r3, #24
 80038ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80038b0:	2340      	movs	r3, #64	; 0x40
 80038b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80038b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80038be:	f107 0308 	add.w	r3, r7, #8
 80038c2:	4619      	mov	r1, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ff0e 	bl	80036e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80038ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ce:	2118      	movs	r1, #24
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f9b3 	bl	8003c3c <SDMMC_GetCmdResp1>
 80038d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038d8:	69fb      	ldr	r3, [r7, #28]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b088      	sub	sp, #32
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80038f0:	2319      	movs	r3, #25
 80038f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80038f4:	2340      	movs	r3, #64	; 0x40
 80038f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80038fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003900:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003902:	f107 0308 	add.w	r3, r7, #8
 8003906:	4619      	mov	r1, r3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff feec 	bl	80036e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	2119      	movs	r1, #25
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f991 	bl	8003c3c <SDMMC_GetCmdResp1>
 800391a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800391c:	69fb      	ldr	r3, [r7, #28]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003934:	230c      	movs	r3, #12
 8003936:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003938:	2340      	movs	r3, #64	; 0x40
 800393a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003944:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003946:	f107 0308 	add.w	r3, r7, #8
 800394a:	4619      	mov	r1, r3
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff feca 	bl	80036e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003952:	4a05      	ldr	r2, [pc, #20]	; (8003968 <SDMMC_CmdStopTransfer+0x40>)
 8003954:	210c      	movs	r1, #12
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f970 	bl	8003c3c <SDMMC_GetCmdResp1>
 800395c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800395e:	69fb      	ldr	r3, [r7, #28]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3720      	adds	r7, #32
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	05f5e100 	.word	0x05f5e100

0800396c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	; 0x28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800397c:	2307      	movs	r3, #7
 800397e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003980:	2340      	movs	r3, #64	; 0x40
 8003982:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800398c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800398e:	f107 0310 	add.w	r3, r7, #16
 8003992:	4619      	mov	r1, r3
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f7ff fea6 	bl	80036e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800399a:	f241 3288 	movw	r2, #5000	; 0x1388
 800399e:	2107      	movs	r1, #7
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f94b 	bl	8003c3c <SDMMC_GetCmdResp1>
 80039a6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3728      	adds	r7, #40	; 0x28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b088      	sub	sp, #32
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039d0:	f107 0308 	add.w	r3, r7, #8
 80039d4:	4619      	mov	r1, r3
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff fe85 	bl	80036e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fb65 	bl	80040ac <SDMMC_GetCmdError>
 80039e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039e4:	69fb      	ldr	r3, [r7, #28]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b088      	sub	sp, #32
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80039f6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80039fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80039fc:	2308      	movs	r3, #8
 80039fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a00:	2340      	movs	r3, #64	; 0x40
 8003a02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a0e:	f107 0308 	add.w	r3, r7, #8
 8003a12:	4619      	mov	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff fe66 	bl	80036e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 faf8 	bl	8004010 <SDMMC_GetCmdResp7>
 8003a20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a22:	69fb      	ldr	r3, [r7, #28]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3720      	adds	r7, #32
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003a3a:	2337      	movs	r3, #55	; 0x37
 8003a3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a3e:	2340      	movs	r3, #64	; 0x40
 8003a40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a4c:	f107 0308 	add.w	r3, r7, #8
 8003a50:	4619      	mov	r1, r3
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff fe47 	bl	80036e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5c:	2137      	movs	r1, #55	; 0x37
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f8ec 	bl	8003c3c <SDMMC_GetCmdResp1>
 8003a64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a66:	69fb      	ldr	r3, [r7, #28]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003a86:	2329      	movs	r3, #41	; 0x29
 8003a88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a8a:	2340      	movs	r3, #64	; 0x40
 8003a8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a98:	f107 0308 	add.w	r3, r7, #8
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff fe21 	bl	80036e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f9ff 	bl	8003ea8 <SDMMC_GetCmdResp3>
 8003aaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003aac:	69fb      	ldr	r3, [r7, #28]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b088      	sub	sp, #32
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003ac4:	2306      	movs	r3, #6
 8003ac6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ac8:	2340      	movs	r3, #64	; 0x40
 8003aca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ad4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ad6:	f107 0308 	add.w	r3, r7, #8
 8003ada:	4619      	mov	r1, r3
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff fe02 	bl	80036e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	2106      	movs	r1, #6
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f8a7 	bl	8003c3c <SDMMC_GetCmdResp1>
 8003aee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003af0:	69fb      	ldr	r3, [r7, #28]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3720      	adds	r7, #32
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b088      	sub	sp, #32
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003b06:	2333      	movs	r3, #51	; 0x33
 8003b08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b0a:	2340      	movs	r3, #64	; 0x40
 8003b0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b18:	f107 0308 	add.w	r3, r7, #8
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff fde1 	bl	80036e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8003b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b28:	2133      	movs	r1, #51	; 0x33
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f886 	bl	8003c3c <SDMMC_GetCmdResp1>
 8003b30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b32:	69fb      	ldr	r3, [r7, #28]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003b4c:	23c0      	movs	r3, #192	; 0xc0
 8003b4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b5a:	f107 0308 	add.w	r3, r7, #8
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff fdc0 	bl	80036e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f956 	bl	8003e18 <SDMMC_GetCmdResp2>
 8003b6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3720      	adds	r7, #32
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003b86:	2309      	movs	r3, #9
 8003b88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003b8a:	23c0      	movs	r3, #192	; 0xc0
 8003b8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b98:	f107 0308 	add.w	r3, r7, #8
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff fda1 	bl	80036e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f937 	bl	8003e18 <SDMMC_GetCmdResp2>
 8003baa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bac:	69fb      	ldr	r3, [r7, #28]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3720      	adds	r7, #32
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b088      	sub	sp, #32
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003bc8:	2340      	movs	r3, #64	; 0x40
 8003bca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bd6:	f107 0308 	add.w	r3, r7, #8
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff fd82 	bl	80036e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	2103      	movs	r1, #3
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f99c 	bl	8003f24 <SDMMC_GetCmdResp6>
 8003bec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bee:	69fb      	ldr	r3, [r7, #28]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3720      	adds	r7, #32
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003c06:	230d      	movs	r3, #13
 8003c08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c0a:	2340      	movs	r3, #64	; 0x40
 8003c0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c18:	f107 0308 	add.w	r3, r7, #8
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff fd61 	bl	80036e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c28:	210d      	movs	r1, #13
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f806 	bl	8003c3c <SDMMC_GetCmdResp1>
 8003c30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c32:	69fb      	ldr	r3, [r7, #28]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3720      	adds	r7, #32
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	460b      	mov	r3, r1
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003c4a:	4b70      	ldr	r3, [pc, #448]	; (8003e0c <SDMMC_GetCmdResp1+0x1d0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a70      	ldr	r2, [pc, #448]	; (8003e10 <SDMMC_GetCmdResp1+0x1d4>)
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	0a5a      	lsrs	r2, r3, #9
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	fb02 f303 	mul.w	r3, r2, r3
 8003c5c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	1e5a      	subs	r2, r3, #1
 8003c62:	61fa      	str	r2, [r7, #28]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d102      	bne.n	8003c6e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003c68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c6c:	e0c9      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c72:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0ef      	beq.n	8003c5e <SDMMC_GetCmdResp1+0x22>
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ea      	bne.n	8003c5e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d004      	beq.n	8003c9e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2204      	movs	r2, #4
 8003c98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003c9a:	2304      	movs	r3, #4
 8003c9c:	e0b1      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d004      	beq.n	8003cb4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0a6      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	22c5      	movs	r2, #197	; 0xc5
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff fd3d 	bl	800373a <SDIO_GetCommandResponse>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	7afb      	ldrb	r3, [r7, #11]
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d001      	beq.n	8003cce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e099      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003cce:	2100      	movs	r1, #0
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7ff fd3f 	bl	8003754 <SDIO_GetResponse>
 8003cd6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4b4e      	ldr	r3, [pc, #312]	; (8003e14 <SDMMC_GetCmdResp1+0x1d8>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	e08d      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	da02      	bge.n	8003cf2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003cec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cf0:	e087      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003cfc:	2340      	movs	r3, #64	; 0x40
 8003cfe:	e080      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003d0a:	2380      	movs	r3, #128	; 0x80
 8003d0c:	e079      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d1c:	e071      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d2c:	e069      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d3c:	e061      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003d48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d4c:	e059      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d5c:	e051      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d6c:	e049      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003d78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d7c:	e041      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003d88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d8c:	e039      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d9c:	e031      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003da8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003dac:	e029      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003db8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003dbc:	e021      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003dc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003dcc:	e019      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003dd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ddc:	e011      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003de8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003dec:	e009      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003df8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003dfc:	e001      	b.n	8003e02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003dfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000000 	.word	0x20000000
 8003e10:	10624dd3 	.word	0x10624dd3
 8003e14:	fdffe008 	.word	0xfdffe008

08003e18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003e20:	4b1f      	ldr	r3, [pc, #124]	; (8003ea0 <SDMMC_GetCmdResp2+0x88>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1f      	ldr	r2, [pc, #124]	; (8003ea4 <SDMMC_GetCmdResp2+0x8c>)
 8003e26:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2a:	0a5b      	lsrs	r3, r3, #9
 8003e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e30:	fb02 f303 	mul.w	r3, r2, r3
 8003e34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1e5a      	subs	r2, r3, #1
 8003e3a:	60fa      	str	r2, [r7, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d102      	bne.n	8003e46 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003e40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e44:	e026      	b.n	8003e94 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0ef      	beq.n	8003e36 <SDMMC_GetCmdResp2+0x1e>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1ea      	bne.n	8003e36 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2204      	movs	r2, #4
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e72:	2304      	movs	r3, #4
 8003e74:	e00e      	b.n	8003e94 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d004      	beq.n	8003e8c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e003      	b.n	8003e94 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	22c5      	movs	r2, #197	; 0xc5
 8003e90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	20000000 	.word	0x20000000
 8003ea4:	10624dd3 	.word	0x10624dd3

08003ea8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003eb0:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <SDMMC_GetCmdResp3+0x74>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1a      	ldr	r2, [pc, #104]	; (8003f20 <SDMMC_GetCmdResp3+0x78>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	0a5b      	lsrs	r3, r3, #9
 8003ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec0:	fb02 f303 	mul.w	r3, r2, r3
 8003ec4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1e5a      	subs	r2, r3, #1
 8003eca:	60fa      	str	r2, [r7, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d102      	bne.n	8003ed6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003ed0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ed4:	e01b      	b.n	8003f0e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0ef      	beq.n	8003ec6 <SDMMC_GetCmdResp3+0x1e>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1ea      	bne.n	8003ec6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d004      	beq.n	8003f06 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2204      	movs	r2, #4
 8003f00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f02:	2304      	movs	r3, #4
 8003f04:	e003      	b.n	8003f0e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	22c5      	movs	r2, #197	; 0xc5
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20000000 	.word	0x20000000
 8003f20:	10624dd3 	.word	0x10624dd3

08003f24 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f32:	4b35      	ldr	r3, [pc, #212]	; (8004008 <SDMMC_GetCmdResp6+0xe4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a35      	ldr	r2, [pc, #212]	; (800400c <SDMMC_GetCmdResp6+0xe8>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	0a5b      	lsrs	r3, r3, #9
 8003f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f42:	fb02 f303 	mul.w	r3, r2, r3
 8003f46:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	1e5a      	subs	r2, r3, #1
 8003f4c:	61fa      	str	r2, [r7, #28]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d102      	bne.n	8003f58 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003f52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f56:	e052      	b.n	8003ffe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0ef      	beq.n	8003f48 <SDMMC_GetCmdResp6+0x24>
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1ea      	bne.n	8003f48 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d004      	beq.n	8003f88 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2204      	movs	r2, #4
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f84:	2304      	movs	r3, #4
 8003f86:	e03a      	b.n	8003ffe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d004      	beq.n	8003f9e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e02f      	b.n	8003ffe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f7ff fbcb 	bl	800373a <SDIO_GetCommandResponse>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	7afb      	ldrb	r3, [r7, #11]
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d001      	beq.n	8003fb2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e025      	b.n	8003ffe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	22c5      	movs	r2, #197	; 0xc5
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003fb8:	2100      	movs	r1, #0
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f7ff fbca 	bl	8003754 <SDIO_GetResponse>
 8003fc0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d106      	bne.n	8003fda <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	0c1b      	lsrs	r3, r3, #16
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e011      	b.n	8003ffe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fe8:	e009      	b.n	8003ffe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ff8:	e001      	b.n	8003ffe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003ffa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3720      	adds	r7, #32
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20000000 	.word	0x20000000
 800400c:	10624dd3 	.word	0x10624dd3

08004010 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004018:	4b22      	ldr	r3, [pc, #136]	; (80040a4 <SDMMC_GetCmdResp7+0x94>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a22      	ldr	r2, [pc, #136]	; (80040a8 <SDMMC_GetCmdResp7+0x98>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	0a5b      	lsrs	r3, r3, #9
 8004024:	f241 3288 	movw	r2, #5000	; 0x1388
 8004028:	fb02 f303 	mul.w	r3, r2, r3
 800402c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	1e5a      	subs	r2, r3, #1
 8004032:	60fa      	str	r2, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d102      	bne.n	800403e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004038:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800403c:	e02c      	b.n	8004098 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004042:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0ef      	beq.n	800402e <SDMMC_GetCmdResp7+0x1e>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1ea      	bne.n	800402e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d004      	beq.n	800406e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2204      	movs	r2, #4
 8004068:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800406a:	2304      	movs	r3, #4
 800406c:	e014      	b.n	8004098 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d004      	beq.n	8004084 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004080:	2301      	movs	r3, #1
 8004082:	e009      	b.n	8004098 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2240      	movs	r2, #64	; 0x40
 8004094:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004096:	2300      	movs	r3, #0
  
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	20000000 	.word	0x20000000
 80040a8:	10624dd3 	.word	0x10624dd3

080040ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80040b4:	4b11      	ldr	r3, [pc, #68]	; (80040fc <SDMMC_GetCmdError+0x50>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a11      	ldr	r2, [pc, #68]	; (8004100 <SDMMC_GetCmdError+0x54>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	0a5b      	lsrs	r3, r3, #9
 80040c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c4:	fb02 f303 	mul.w	r3, r2, r3
 80040c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1e5a      	subs	r2, r3, #1
 80040ce:	60fa      	str	r2, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d102      	bne.n	80040da <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80040d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80040d8:	e009      	b.n	80040ee <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f1      	beq.n	80040ca <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	22c5      	movs	r2, #197	; 0xc5
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20000000 	.word	0x20000000
 8004100:	10624dd3 	.word	0x10624dd3

08004104 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004108:	4904      	ldr	r1, [pc, #16]	; (800411c <MX_FATFS_Init+0x18>)
 800410a:	4805      	ldr	r0, [pc, #20]	; (8004120 <MX_FATFS_Init+0x1c>)
 800410c:	f000 f9e4 	bl	80044d8 <FATFS_LinkDriver>
 8004110:	4603      	mov	r3, r0
 8004112:	461a      	mov	r2, r3
 8004114:	4b03      	ldr	r3, [pc, #12]	; (8004124 <MX_FATFS_Init+0x20>)
 8004116:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004118:	bf00      	nop
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20000160 	.word	0x20000160
 8004120:	080055d8 	.word	0x080055d8
 8004124:	2000015c 	.word	0x2000015c

08004128 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004132:	f000 f879 	bl	8004228 <BSP_SD_IsDetected>
 8004136:	4603      	mov	r3, r0
 8004138:	2b01      	cmp	r3, #1
 800413a:	d001      	beq.n	8004140 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e012      	b.n	8004166 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004140:	480b      	ldr	r0, [pc, #44]	; (8004170 <BSP_SD_Init+0x48>)
 8004142:	f7fd fd1f 	bl	8001b84 <HAL_SD_Init>
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d109      	bne.n	8004164 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004150:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004154:	4806      	ldr	r0, [pc, #24]	; (8004170 <BSP_SD_Init+0x48>)
 8004156:	f7fe faf9 	bl	800274c <HAL_SD_ConfigWideBusOperation>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004164:	79fb      	ldrb	r3, [r7, #7]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	2000008c 	.word	0x2000008c

08004174 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	68f9      	ldr	r1, [r7, #12]
 8004190:	4806      	ldr	r0, [pc, #24]	; (80041ac <BSP_SD_ReadBlocks+0x38>)
 8004192:	f7fd fda7 	bl	8001ce4 <HAL_SD_ReadBlocks>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	2000008c 	.word	0x2000008c

080041b0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af02      	add	r7, sp, #8
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	68f9      	ldr	r1, [r7, #12]
 80041cc:	4806      	ldr	r0, [pc, #24]	; (80041e8 <BSP_SD_WriteBlocks+0x38>)
 80041ce:	f7fd ff67 	bl	80020a0 <HAL_SD_WriteBlocks>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	2000008c 	.word	0x2000008c

080041ec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80041f0:	4805      	ldr	r0, [pc, #20]	; (8004208 <BSP_SD_GetCardState+0x1c>)
 80041f2:	f7fe fb45 	bl	8002880 <HAL_SD_GetCardState>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	bf14      	ite	ne
 80041fc:	2301      	movne	r3, #1
 80041fe:	2300      	moveq	r3, #0
 8004200:	b2db      	uxtb	r3, r3
}
 8004202:	4618      	mov	r0, r3
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	2000008c 	.word	0x2000008c

0800420c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4803      	ldr	r0, [pc, #12]	; (8004224 <BSP_SD_GetCardInfo+0x18>)
 8004218:	f7fe fa6c 	bl	80026f4 <HAL_SD_GetCardInfo>
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	2000008c 	.word	0x2000008c

08004228 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800422e:	2301      	movs	r3, #1
 8004230:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8004232:	f000 f80b 	bl	800424c <BSP_PlatformIsDetected>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800423c:	2300      	movs	r3, #0
 800423e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	b2db      	uxtb	r3, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8004252:	2301      	movs	r3, #1
 8004254:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8004256:	2110      	movs	r1, #16
 8004258:	4806      	ldr	r0, [pc, #24]	; (8004274 <BSP_PlatformIsDetected+0x28>)
 800425a:	f7fd f809 	bl	8001270 <HAL_GPIO_ReadPin>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8004264:	2300      	movs	r3, #0
 8004266:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8004268:	79fb      	ldrb	r3, [r7, #7]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40021000 	.word	0x40021000

08004278 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <SD_CheckStatus+0x38>)
 8004284:	2201      	movs	r2, #1
 8004286:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004288:	f7ff ffb0 	bl	80041ec <BSP_SD_GetCardState>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d107      	bne.n	80042a2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <SD_CheckStatus+0x38>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	f023 0301 	bic.w	r3, r3, #1
 800429c:	b2da      	uxtb	r2, r3
 800429e:	4b04      	ldr	r3, [pc, #16]	; (80042b0 <SD_CheckStatus+0x38>)
 80042a0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80042a2:	4b03      	ldr	r3, [pc, #12]	; (80042b0 <SD_CheckStatus+0x38>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b2db      	uxtb	r3, r3
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20000009 	.word	0x20000009

080042b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80042be:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <SD_initialize+0x38>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80042c4:	f7ff ff30 	bl	8004128 <BSP_SD_Init>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d107      	bne.n	80042de <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff ffd1 	bl	8004278 <SD_CheckStatus>
 80042d6:	4603      	mov	r3, r0
 80042d8:	461a      	mov	r2, r3
 80042da:	4b04      	ldr	r3, [pc, #16]	; (80042ec <SD_initialize+0x38>)
 80042dc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80042de:	4b03      	ldr	r3, [pc, #12]	; (80042ec <SD_initialize+0x38>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	b2db      	uxtb	r3, r3
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	20000009 	.word	0x20000009

080042f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ffbb 	bl	8004278 <SD_CheckStatus>
 8004302:	4603      	mov	r3, r0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	4603      	mov	r3, r0
 800431a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004320:	f04f 33ff 	mov.w	r3, #4294967295
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	68b8      	ldr	r0, [r7, #8]
 800432a:	f7ff ff23 	bl	8004174 <BSP_SD_ReadBlocks>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d107      	bne.n	8004344 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004334:	bf00      	nop
 8004336:	f7ff ff59 	bl	80041ec <BSP_SD_GetCardState>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1fa      	bne.n	8004336 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004344:	7dfb      	ldrb	r3, [r7, #23]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b086      	sub	sp, #24
 8004352:	af00      	add	r7, sp, #0
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
 800435a:	4603      	mov	r3, r0
 800435c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	68b8      	ldr	r0, [r7, #8]
 800436c:	f7ff ff20 	bl	80041b0 <BSP_SD_WriteBlocks>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d107      	bne.n	8004386 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8004376:	bf00      	nop
 8004378:	f7ff ff38 	bl	80041ec <BSP_SD_GetCardState>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1fa      	bne.n	8004378 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004386:	7dfb      	ldrb	r3, [r7, #23]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08c      	sub	sp, #48	; 0x30
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	603a      	str	r2, [r7, #0]
 800439a:	71fb      	strb	r3, [r7, #7]
 800439c:	460b      	mov	r3, r1
 800439e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80043a6:	4b25      	ldr	r3, [pc, #148]	; (800443c <SD_ioctl+0xac>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <SD_ioctl+0x28>
 80043b4:	2303      	movs	r3, #3
 80043b6:	e03c      	b.n	8004432 <SD_ioctl+0xa2>

  switch (cmd)
 80043b8:	79bb      	ldrb	r3, [r7, #6]
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d834      	bhi.n	8004428 <SD_ioctl+0x98>
 80043be:	a201      	add	r2, pc, #4	; (adr r2, 80043c4 <SD_ioctl+0x34>)
 80043c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c4:	080043d5 	.word	0x080043d5
 80043c8:	080043dd 	.word	0x080043dd
 80043cc:	080043f5 	.word	0x080043f5
 80043d0:	0800440f 	.word	0x0800440f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80043da:	e028      	b.n	800442e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80043dc:	f107 030c 	add.w	r3, r7, #12
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff ff13 	bl	800420c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80043e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80043f2:	e01c      	b.n	800442e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80043f4:	f107 030c 	add.w	r3, r7, #12
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff ff07 	bl	800420c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80043fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004400:	b29a      	uxth	r2, r3
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800440c:	e00f      	b.n	800442e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800440e:	f107 030c 	add.w	r3, r7, #12
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff fefa 	bl	800420c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	0a5a      	lsrs	r2, r3, #9
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004426:	e002      	b.n	800442e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004428:	2304      	movs	r3, #4
 800442a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800442e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004432:	4618      	mov	r0, r3
 8004434:	3730      	adds	r7, #48	; 0x30
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20000009 	.word	0x20000009

08004440 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	4613      	mov	r3, r2
 800444c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800444e:	2301      	movs	r3, #1
 8004450:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004456:	4b1f      	ldr	r3, [pc, #124]	; (80044d4 <FATFS_LinkDriverEx+0x94>)
 8004458:	7a5b      	ldrb	r3, [r3, #9]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d131      	bne.n	80044c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004460:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <FATFS_LinkDriverEx+0x94>)
 8004462:	7a5b      	ldrb	r3, [r3, #9]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	461a      	mov	r2, r3
 8004468:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <FATFS_LinkDriverEx+0x94>)
 800446a:	2100      	movs	r1, #0
 800446c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800446e:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <FATFS_LinkDriverEx+0x94>)
 8004470:	7a5b      	ldrb	r3, [r3, #9]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	4a17      	ldr	r2, [pc, #92]	; (80044d4 <FATFS_LinkDriverEx+0x94>)
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800447e:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <FATFS_LinkDriverEx+0x94>)
 8004480:	7a5b      	ldrb	r3, [r3, #9]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <FATFS_LinkDriverEx+0x94>)
 8004488:	4413      	add	r3, r2
 800448a:	79fa      	ldrb	r2, [r7, #7]
 800448c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800448e:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <FATFS_LinkDriverEx+0x94>)
 8004490:	7a5b      	ldrb	r3, [r3, #9]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	b2d1      	uxtb	r1, r2
 8004498:	4a0e      	ldr	r2, [pc, #56]	; (80044d4 <FATFS_LinkDriverEx+0x94>)
 800449a:	7251      	strb	r1, [r2, #9]
 800449c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800449e:	7dbb      	ldrb	r3, [r7, #22]
 80044a0:	3330      	adds	r3, #48	; 0x30
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	3301      	adds	r3, #1
 80044ac:	223a      	movs	r2, #58	; 0x3a
 80044ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	3302      	adds	r3, #2
 80044b4:	222f      	movs	r2, #47	; 0x2f
 80044b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	3303      	adds	r3, #3
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000164 	.word	0x20000164

080044d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80044e2:	2200      	movs	r2, #0
 80044e4:	6839      	ldr	r1, [r7, #0]
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff ffaa 	bl	8004440 <FATFS_LinkDriverEx>
 80044ec:	4603      	mov	r3, r0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <__errno>:
 80044f8:	4b01      	ldr	r3, [pc, #4]	; (8004500 <__errno+0x8>)
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	2000000c 	.word	0x2000000c

08004504 <__libc_init_array>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	4d0d      	ldr	r5, [pc, #52]	; (800453c <__libc_init_array+0x38>)
 8004508:	4c0d      	ldr	r4, [pc, #52]	; (8004540 <__libc_init_array+0x3c>)
 800450a:	1b64      	subs	r4, r4, r5
 800450c:	10a4      	asrs	r4, r4, #2
 800450e:	2600      	movs	r6, #0
 8004510:	42a6      	cmp	r6, r4
 8004512:	d109      	bne.n	8004528 <__libc_init_array+0x24>
 8004514:	4d0b      	ldr	r5, [pc, #44]	; (8004544 <__libc_init_array+0x40>)
 8004516:	4c0c      	ldr	r4, [pc, #48]	; (8004548 <__libc_init_array+0x44>)
 8004518:	f001 f824 	bl	8005564 <_init>
 800451c:	1b64      	subs	r4, r4, r5
 800451e:	10a4      	asrs	r4, r4, #2
 8004520:	2600      	movs	r6, #0
 8004522:	42a6      	cmp	r6, r4
 8004524:	d105      	bne.n	8004532 <__libc_init_array+0x2e>
 8004526:	bd70      	pop	{r4, r5, r6, pc}
 8004528:	f855 3b04 	ldr.w	r3, [r5], #4
 800452c:	4798      	blx	r3
 800452e:	3601      	adds	r6, #1
 8004530:	e7ee      	b.n	8004510 <__libc_init_array+0xc>
 8004532:	f855 3b04 	ldr.w	r3, [r5], #4
 8004536:	4798      	blx	r3
 8004538:	3601      	adds	r6, #1
 800453a:	e7f2      	b.n	8004522 <__libc_init_array+0x1e>
 800453c:	0800568c 	.word	0x0800568c
 8004540:	0800568c 	.word	0x0800568c
 8004544:	0800568c 	.word	0x0800568c
 8004548:	08005690 	.word	0x08005690

0800454c <memset>:
 800454c:	4402      	add	r2, r0
 800454e:	4603      	mov	r3, r0
 8004550:	4293      	cmp	r3, r2
 8004552:	d100      	bne.n	8004556 <memset+0xa>
 8004554:	4770      	bx	lr
 8004556:	f803 1b01 	strb.w	r1, [r3], #1
 800455a:	e7f9      	b.n	8004550 <memset+0x4>

0800455c <iprintf>:
 800455c:	b40f      	push	{r0, r1, r2, r3}
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <iprintf+0x2c>)
 8004560:	b513      	push	{r0, r1, r4, lr}
 8004562:	681c      	ldr	r4, [r3, #0]
 8004564:	b124      	cbz	r4, 8004570 <iprintf+0x14>
 8004566:	69a3      	ldr	r3, [r4, #24]
 8004568:	b913      	cbnz	r3, 8004570 <iprintf+0x14>
 800456a:	4620      	mov	r0, r4
 800456c:	f000 fa5e 	bl	8004a2c <__sinit>
 8004570:	ab05      	add	r3, sp, #20
 8004572:	9a04      	ldr	r2, [sp, #16]
 8004574:	68a1      	ldr	r1, [r4, #8]
 8004576:	9301      	str	r3, [sp, #4]
 8004578:	4620      	mov	r0, r4
 800457a:	f000 fc67 	bl	8004e4c <_vfiprintf_r>
 800457e:	b002      	add	sp, #8
 8004580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004584:	b004      	add	sp, #16
 8004586:	4770      	bx	lr
 8004588:	2000000c 	.word	0x2000000c

0800458c <_puts_r>:
 800458c:	b570      	push	{r4, r5, r6, lr}
 800458e:	460e      	mov	r6, r1
 8004590:	4605      	mov	r5, r0
 8004592:	b118      	cbz	r0, 800459c <_puts_r+0x10>
 8004594:	6983      	ldr	r3, [r0, #24]
 8004596:	b90b      	cbnz	r3, 800459c <_puts_r+0x10>
 8004598:	f000 fa48 	bl	8004a2c <__sinit>
 800459c:	69ab      	ldr	r3, [r5, #24]
 800459e:	68ac      	ldr	r4, [r5, #8]
 80045a0:	b913      	cbnz	r3, 80045a8 <_puts_r+0x1c>
 80045a2:	4628      	mov	r0, r5
 80045a4:	f000 fa42 	bl	8004a2c <__sinit>
 80045a8:	4b2c      	ldr	r3, [pc, #176]	; (800465c <_puts_r+0xd0>)
 80045aa:	429c      	cmp	r4, r3
 80045ac:	d120      	bne.n	80045f0 <_puts_r+0x64>
 80045ae:	686c      	ldr	r4, [r5, #4]
 80045b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045b2:	07db      	lsls	r3, r3, #31
 80045b4:	d405      	bmi.n	80045c2 <_puts_r+0x36>
 80045b6:	89a3      	ldrh	r3, [r4, #12]
 80045b8:	0598      	lsls	r0, r3, #22
 80045ba:	d402      	bmi.n	80045c2 <_puts_r+0x36>
 80045bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045be:	f000 fad3 	bl	8004b68 <__retarget_lock_acquire_recursive>
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	0719      	lsls	r1, r3, #28
 80045c6:	d51d      	bpl.n	8004604 <_puts_r+0x78>
 80045c8:	6923      	ldr	r3, [r4, #16]
 80045ca:	b1db      	cbz	r3, 8004604 <_puts_r+0x78>
 80045cc:	3e01      	subs	r6, #1
 80045ce:	68a3      	ldr	r3, [r4, #8]
 80045d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80045d4:	3b01      	subs	r3, #1
 80045d6:	60a3      	str	r3, [r4, #8]
 80045d8:	bb39      	cbnz	r1, 800462a <_puts_r+0x9e>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	da38      	bge.n	8004650 <_puts_r+0xc4>
 80045de:	4622      	mov	r2, r4
 80045e0:	210a      	movs	r1, #10
 80045e2:	4628      	mov	r0, r5
 80045e4:	f000 f848 	bl	8004678 <__swbuf_r>
 80045e8:	3001      	adds	r0, #1
 80045ea:	d011      	beq.n	8004610 <_puts_r+0x84>
 80045ec:	250a      	movs	r5, #10
 80045ee:	e011      	b.n	8004614 <_puts_r+0x88>
 80045f0:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <_puts_r+0xd4>)
 80045f2:	429c      	cmp	r4, r3
 80045f4:	d101      	bne.n	80045fa <_puts_r+0x6e>
 80045f6:	68ac      	ldr	r4, [r5, #8]
 80045f8:	e7da      	b.n	80045b0 <_puts_r+0x24>
 80045fa:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <_puts_r+0xd8>)
 80045fc:	429c      	cmp	r4, r3
 80045fe:	bf08      	it	eq
 8004600:	68ec      	ldreq	r4, [r5, #12]
 8004602:	e7d5      	b.n	80045b0 <_puts_r+0x24>
 8004604:	4621      	mov	r1, r4
 8004606:	4628      	mov	r0, r5
 8004608:	f000 f888 	bl	800471c <__swsetup_r>
 800460c:	2800      	cmp	r0, #0
 800460e:	d0dd      	beq.n	80045cc <_puts_r+0x40>
 8004610:	f04f 35ff 	mov.w	r5, #4294967295
 8004614:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004616:	07da      	lsls	r2, r3, #31
 8004618:	d405      	bmi.n	8004626 <_puts_r+0x9a>
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	059b      	lsls	r3, r3, #22
 800461e:	d402      	bmi.n	8004626 <_puts_r+0x9a>
 8004620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004622:	f000 faa2 	bl	8004b6a <__retarget_lock_release_recursive>
 8004626:	4628      	mov	r0, r5
 8004628:	bd70      	pop	{r4, r5, r6, pc}
 800462a:	2b00      	cmp	r3, #0
 800462c:	da04      	bge.n	8004638 <_puts_r+0xac>
 800462e:	69a2      	ldr	r2, [r4, #24]
 8004630:	429a      	cmp	r2, r3
 8004632:	dc06      	bgt.n	8004642 <_puts_r+0xb6>
 8004634:	290a      	cmp	r1, #10
 8004636:	d004      	beq.n	8004642 <_puts_r+0xb6>
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	6022      	str	r2, [r4, #0]
 800463e:	7019      	strb	r1, [r3, #0]
 8004640:	e7c5      	b.n	80045ce <_puts_r+0x42>
 8004642:	4622      	mov	r2, r4
 8004644:	4628      	mov	r0, r5
 8004646:	f000 f817 	bl	8004678 <__swbuf_r>
 800464a:	3001      	adds	r0, #1
 800464c:	d1bf      	bne.n	80045ce <_puts_r+0x42>
 800464e:	e7df      	b.n	8004610 <_puts_r+0x84>
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	250a      	movs	r5, #10
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	6022      	str	r2, [r4, #0]
 8004658:	701d      	strb	r5, [r3, #0]
 800465a:	e7db      	b.n	8004614 <_puts_r+0x88>
 800465c:	08005610 	.word	0x08005610
 8004660:	08005630 	.word	0x08005630
 8004664:	080055f0 	.word	0x080055f0

08004668 <puts>:
 8004668:	4b02      	ldr	r3, [pc, #8]	; (8004674 <puts+0xc>)
 800466a:	4601      	mov	r1, r0
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	f7ff bf8d 	b.w	800458c <_puts_r>
 8004672:	bf00      	nop
 8004674:	2000000c 	.word	0x2000000c

08004678 <__swbuf_r>:
 8004678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467a:	460e      	mov	r6, r1
 800467c:	4614      	mov	r4, r2
 800467e:	4605      	mov	r5, r0
 8004680:	b118      	cbz	r0, 800468a <__swbuf_r+0x12>
 8004682:	6983      	ldr	r3, [r0, #24]
 8004684:	b90b      	cbnz	r3, 800468a <__swbuf_r+0x12>
 8004686:	f000 f9d1 	bl	8004a2c <__sinit>
 800468a:	4b21      	ldr	r3, [pc, #132]	; (8004710 <__swbuf_r+0x98>)
 800468c:	429c      	cmp	r4, r3
 800468e:	d12b      	bne.n	80046e8 <__swbuf_r+0x70>
 8004690:	686c      	ldr	r4, [r5, #4]
 8004692:	69a3      	ldr	r3, [r4, #24]
 8004694:	60a3      	str	r3, [r4, #8]
 8004696:	89a3      	ldrh	r3, [r4, #12]
 8004698:	071a      	lsls	r2, r3, #28
 800469a:	d52f      	bpl.n	80046fc <__swbuf_r+0x84>
 800469c:	6923      	ldr	r3, [r4, #16]
 800469e:	b36b      	cbz	r3, 80046fc <__swbuf_r+0x84>
 80046a0:	6923      	ldr	r3, [r4, #16]
 80046a2:	6820      	ldr	r0, [r4, #0]
 80046a4:	1ac0      	subs	r0, r0, r3
 80046a6:	6963      	ldr	r3, [r4, #20]
 80046a8:	b2f6      	uxtb	r6, r6
 80046aa:	4283      	cmp	r3, r0
 80046ac:	4637      	mov	r7, r6
 80046ae:	dc04      	bgt.n	80046ba <__swbuf_r+0x42>
 80046b0:	4621      	mov	r1, r4
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 f926 	bl	8004904 <_fflush_r>
 80046b8:	bb30      	cbnz	r0, 8004708 <__swbuf_r+0x90>
 80046ba:	68a3      	ldr	r3, [r4, #8]
 80046bc:	3b01      	subs	r3, #1
 80046be:	60a3      	str	r3, [r4, #8]
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	6022      	str	r2, [r4, #0]
 80046c6:	701e      	strb	r6, [r3, #0]
 80046c8:	6963      	ldr	r3, [r4, #20]
 80046ca:	3001      	adds	r0, #1
 80046cc:	4283      	cmp	r3, r0
 80046ce:	d004      	beq.n	80046da <__swbuf_r+0x62>
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	07db      	lsls	r3, r3, #31
 80046d4:	d506      	bpl.n	80046e4 <__swbuf_r+0x6c>
 80046d6:	2e0a      	cmp	r6, #10
 80046d8:	d104      	bne.n	80046e4 <__swbuf_r+0x6c>
 80046da:	4621      	mov	r1, r4
 80046dc:	4628      	mov	r0, r5
 80046de:	f000 f911 	bl	8004904 <_fflush_r>
 80046e2:	b988      	cbnz	r0, 8004708 <__swbuf_r+0x90>
 80046e4:	4638      	mov	r0, r7
 80046e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046e8:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <__swbuf_r+0x9c>)
 80046ea:	429c      	cmp	r4, r3
 80046ec:	d101      	bne.n	80046f2 <__swbuf_r+0x7a>
 80046ee:	68ac      	ldr	r4, [r5, #8]
 80046f0:	e7cf      	b.n	8004692 <__swbuf_r+0x1a>
 80046f2:	4b09      	ldr	r3, [pc, #36]	; (8004718 <__swbuf_r+0xa0>)
 80046f4:	429c      	cmp	r4, r3
 80046f6:	bf08      	it	eq
 80046f8:	68ec      	ldreq	r4, [r5, #12]
 80046fa:	e7ca      	b.n	8004692 <__swbuf_r+0x1a>
 80046fc:	4621      	mov	r1, r4
 80046fe:	4628      	mov	r0, r5
 8004700:	f000 f80c 	bl	800471c <__swsetup_r>
 8004704:	2800      	cmp	r0, #0
 8004706:	d0cb      	beq.n	80046a0 <__swbuf_r+0x28>
 8004708:	f04f 37ff 	mov.w	r7, #4294967295
 800470c:	e7ea      	b.n	80046e4 <__swbuf_r+0x6c>
 800470e:	bf00      	nop
 8004710:	08005610 	.word	0x08005610
 8004714:	08005630 	.word	0x08005630
 8004718:	080055f0 	.word	0x080055f0

0800471c <__swsetup_r>:
 800471c:	4b32      	ldr	r3, [pc, #200]	; (80047e8 <__swsetup_r+0xcc>)
 800471e:	b570      	push	{r4, r5, r6, lr}
 8004720:	681d      	ldr	r5, [r3, #0]
 8004722:	4606      	mov	r6, r0
 8004724:	460c      	mov	r4, r1
 8004726:	b125      	cbz	r5, 8004732 <__swsetup_r+0x16>
 8004728:	69ab      	ldr	r3, [r5, #24]
 800472a:	b913      	cbnz	r3, 8004732 <__swsetup_r+0x16>
 800472c:	4628      	mov	r0, r5
 800472e:	f000 f97d 	bl	8004a2c <__sinit>
 8004732:	4b2e      	ldr	r3, [pc, #184]	; (80047ec <__swsetup_r+0xd0>)
 8004734:	429c      	cmp	r4, r3
 8004736:	d10f      	bne.n	8004758 <__swsetup_r+0x3c>
 8004738:	686c      	ldr	r4, [r5, #4]
 800473a:	89a3      	ldrh	r3, [r4, #12]
 800473c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004740:	0719      	lsls	r1, r3, #28
 8004742:	d42c      	bmi.n	800479e <__swsetup_r+0x82>
 8004744:	06dd      	lsls	r5, r3, #27
 8004746:	d411      	bmi.n	800476c <__swsetup_r+0x50>
 8004748:	2309      	movs	r3, #9
 800474a:	6033      	str	r3, [r6, #0]
 800474c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004750:	81a3      	strh	r3, [r4, #12]
 8004752:	f04f 30ff 	mov.w	r0, #4294967295
 8004756:	e03e      	b.n	80047d6 <__swsetup_r+0xba>
 8004758:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <__swsetup_r+0xd4>)
 800475a:	429c      	cmp	r4, r3
 800475c:	d101      	bne.n	8004762 <__swsetup_r+0x46>
 800475e:	68ac      	ldr	r4, [r5, #8]
 8004760:	e7eb      	b.n	800473a <__swsetup_r+0x1e>
 8004762:	4b24      	ldr	r3, [pc, #144]	; (80047f4 <__swsetup_r+0xd8>)
 8004764:	429c      	cmp	r4, r3
 8004766:	bf08      	it	eq
 8004768:	68ec      	ldreq	r4, [r5, #12]
 800476a:	e7e6      	b.n	800473a <__swsetup_r+0x1e>
 800476c:	0758      	lsls	r0, r3, #29
 800476e:	d512      	bpl.n	8004796 <__swsetup_r+0x7a>
 8004770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004772:	b141      	cbz	r1, 8004786 <__swsetup_r+0x6a>
 8004774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004778:	4299      	cmp	r1, r3
 800477a:	d002      	beq.n	8004782 <__swsetup_r+0x66>
 800477c:	4630      	mov	r0, r6
 800477e:	f000 fa5b 	bl	8004c38 <_free_r>
 8004782:	2300      	movs	r3, #0
 8004784:	6363      	str	r3, [r4, #52]	; 0x34
 8004786:	89a3      	ldrh	r3, [r4, #12]
 8004788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800478c:	81a3      	strh	r3, [r4, #12]
 800478e:	2300      	movs	r3, #0
 8004790:	6063      	str	r3, [r4, #4]
 8004792:	6923      	ldr	r3, [r4, #16]
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	89a3      	ldrh	r3, [r4, #12]
 8004798:	f043 0308 	orr.w	r3, r3, #8
 800479c:	81a3      	strh	r3, [r4, #12]
 800479e:	6923      	ldr	r3, [r4, #16]
 80047a0:	b94b      	cbnz	r3, 80047b6 <__swsetup_r+0x9a>
 80047a2:	89a3      	ldrh	r3, [r4, #12]
 80047a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ac:	d003      	beq.n	80047b6 <__swsetup_r+0x9a>
 80047ae:	4621      	mov	r1, r4
 80047b0:	4630      	mov	r0, r6
 80047b2:	f000 fa01 	bl	8004bb8 <__smakebuf_r>
 80047b6:	89a0      	ldrh	r0, [r4, #12]
 80047b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047bc:	f010 0301 	ands.w	r3, r0, #1
 80047c0:	d00a      	beq.n	80047d8 <__swsetup_r+0xbc>
 80047c2:	2300      	movs	r3, #0
 80047c4:	60a3      	str	r3, [r4, #8]
 80047c6:	6963      	ldr	r3, [r4, #20]
 80047c8:	425b      	negs	r3, r3
 80047ca:	61a3      	str	r3, [r4, #24]
 80047cc:	6923      	ldr	r3, [r4, #16]
 80047ce:	b943      	cbnz	r3, 80047e2 <__swsetup_r+0xc6>
 80047d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80047d4:	d1ba      	bne.n	800474c <__swsetup_r+0x30>
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
 80047d8:	0781      	lsls	r1, r0, #30
 80047da:	bf58      	it	pl
 80047dc:	6963      	ldrpl	r3, [r4, #20]
 80047de:	60a3      	str	r3, [r4, #8]
 80047e0:	e7f4      	b.n	80047cc <__swsetup_r+0xb0>
 80047e2:	2000      	movs	r0, #0
 80047e4:	e7f7      	b.n	80047d6 <__swsetup_r+0xba>
 80047e6:	bf00      	nop
 80047e8:	2000000c 	.word	0x2000000c
 80047ec:	08005610 	.word	0x08005610
 80047f0:	08005630 	.word	0x08005630
 80047f4:	080055f0 	.word	0x080055f0

080047f8 <__sflush_r>:
 80047f8:	898a      	ldrh	r2, [r1, #12]
 80047fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fe:	4605      	mov	r5, r0
 8004800:	0710      	lsls	r0, r2, #28
 8004802:	460c      	mov	r4, r1
 8004804:	d458      	bmi.n	80048b8 <__sflush_r+0xc0>
 8004806:	684b      	ldr	r3, [r1, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	dc05      	bgt.n	8004818 <__sflush_r+0x20>
 800480c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	dc02      	bgt.n	8004818 <__sflush_r+0x20>
 8004812:	2000      	movs	r0, #0
 8004814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800481a:	2e00      	cmp	r6, #0
 800481c:	d0f9      	beq.n	8004812 <__sflush_r+0x1a>
 800481e:	2300      	movs	r3, #0
 8004820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004824:	682f      	ldr	r7, [r5, #0]
 8004826:	602b      	str	r3, [r5, #0]
 8004828:	d032      	beq.n	8004890 <__sflush_r+0x98>
 800482a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800482c:	89a3      	ldrh	r3, [r4, #12]
 800482e:	075a      	lsls	r2, r3, #29
 8004830:	d505      	bpl.n	800483e <__sflush_r+0x46>
 8004832:	6863      	ldr	r3, [r4, #4]
 8004834:	1ac0      	subs	r0, r0, r3
 8004836:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004838:	b10b      	cbz	r3, 800483e <__sflush_r+0x46>
 800483a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800483c:	1ac0      	subs	r0, r0, r3
 800483e:	2300      	movs	r3, #0
 8004840:	4602      	mov	r2, r0
 8004842:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004844:	6a21      	ldr	r1, [r4, #32]
 8004846:	4628      	mov	r0, r5
 8004848:	47b0      	blx	r6
 800484a:	1c43      	adds	r3, r0, #1
 800484c:	89a3      	ldrh	r3, [r4, #12]
 800484e:	d106      	bne.n	800485e <__sflush_r+0x66>
 8004850:	6829      	ldr	r1, [r5, #0]
 8004852:	291d      	cmp	r1, #29
 8004854:	d82c      	bhi.n	80048b0 <__sflush_r+0xb8>
 8004856:	4a2a      	ldr	r2, [pc, #168]	; (8004900 <__sflush_r+0x108>)
 8004858:	40ca      	lsrs	r2, r1
 800485a:	07d6      	lsls	r6, r2, #31
 800485c:	d528      	bpl.n	80048b0 <__sflush_r+0xb8>
 800485e:	2200      	movs	r2, #0
 8004860:	6062      	str	r2, [r4, #4]
 8004862:	04d9      	lsls	r1, r3, #19
 8004864:	6922      	ldr	r2, [r4, #16]
 8004866:	6022      	str	r2, [r4, #0]
 8004868:	d504      	bpl.n	8004874 <__sflush_r+0x7c>
 800486a:	1c42      	adds	r2, r0, #1
 800486c:	d101      	bne.n	8004872 <__sflush_r+0x7a>
 800486e:	682b      	ldr	r3, [r5, #0]
 8004870:	b903      	cbnz	r3, 8004874 <__sflush_r+0x7c>
 8004872:	6560      	str	r0, [r4, #84]	; 0x54
 8004874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004876:	602f      	str	r7, [r5, #0]
 8004878:	2900      	cmp	r1, #0
 800487a:	d0ca      	beq.n	8004812 <__sflush_r+0x1a>
 800487c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004880:	4299      	cmp	r1, r3
 8004882:	d002      	beq.n	800488a <__sflush_r+0x92>
 8004884:	4628      	mov	r0, r5
 8004886:	f000 f9d7 	bl	8004c38 <_free_r>
 800488a:	2000      	movs	r0, #0
 800488c:	6360      	str	r0, [r4, #52]	; 0x34
 800488e:	e7c1      	b.n	8004814 <__sflush_r+0x1c>
 8004890:	6a21      	ldr	r1, [r4, #32]
 8004892:	2301      	movs	r3, #1
 8004894:	4628      	mov	r0, r5
 8004896:	47b0      	blx	r6
 8004898:	1c41      	adds	r1, r0, #1
 800489a:	d1c7      	bne.n	800482c <__sflush_r+0x34>
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0c4      	beq.n	800482c <__sflush_r+0x34>
 80048a2:	2b1d      	cmp	r3, #29
 80048a4:	d001      	beq.n	80048aa <__sflush_r+0xb2>
 80048a6:	2b16      	cmp	r3, #22
 80048a8:	d101      	bne.n	80048ae <__sflush_r+0xb6>
 80048aa:	602f      	str	r7, [r5, #0]
 80048ac:	e7b1      	b.n	8004812 <__sflush_r+0x1a>
 80048ae:	89a3      	ldrh	r3, [r4, #12]
 80048b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b4:	81a3      	strh	r3, [r4, #12]
 80048b6:	e7ad      	b.n	8004814 <__sflush_r+0x1c>
 80048b8:	690f      	ldr	r7, [r1, #16]
 80048ba:	2f00      	cmp	r7, #0
 80048bc:	d0a9      	beq.n	8004812 <__sflush_r+0x1a>
 80048be:	0793      	lsls	r3, r2, #30
 80048c0:	680e      	ldr	r6, [r1, #0]
 80048c2:	bf08      	it	eq
 80048c4:	694b      	ldreq	r3, [r1, #20]
 80048c6:	600f      	str	r7, [r1, #0]
 80048c8:	bf18      	it	ne
 80048ca:	2300      	movne	r3, #0
 80048cc:	eba6 0807 	sub.w	r8, r6, r7
 80048d0:	608b      	str	r3, [r1, #8]
 80048d2:	f1b8 0f00 	cmp.w	r8, #0
 80048d6:	dd9c      	ble.n	8004812 <__sflush_r+0x1a>
 80048d8:	6a21      	ldr	r1, [r4, #32]
 80048da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048dc:	4643      	mov	r3, r8
 80048de:	463a      	mov	r2, r7
 80048e0:	4628      	mov	r0, r5
 80048e2:	47b0      	blx	r6
 80048e4:	2800      	cmp	r0, #0
 80048e6:	dc06      	bgt.n	80048f6 <__sflush_r+0xfe>
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ee:	81a3      	strh	r3, [r4, #12]
 80048f0:	f04f 30ff 	mov.w	r0, #4294967295
 80048f4:	e78e      	b.n	8004814 <__sflush_r+0x1c>
 80048f6:	4407      	add	r7, r0
 80048f8:	eba8 0800 	sub.w	r8, r8, r0
 80048fc:	e7e9      	b.n	80048d2 <__sflush_r+0xda>
 80048fe:	bf00      	nop
 8004900:	20400001 	.word	0x20400001

08004904 <_fflush_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	690b      	ldr	r3, [r1, #16]
 8004908:	4605      	mov	r5, r0
 800490a:	460c      	mov	r4, r1
 800490c:	b913      	cbnz	r3, 8004914 <_fflush_r+0x10>
 800490e:	2500      	movs	r5, #0
 8004910:	4628      	mov	r0, r5
 8004912:	bd38      	pop	{r3, r4, r5, pc}
 8004914:	b118      	cbz	r0, 800491e <_fflush_r+0x1a>
 8004916:	6983      	ldr	r3, [r0, #24]
 8004918:	b90b      	cbnz	r3, 800491e <_fflush_r+0x1a>
 800491a:	f000 f887 	bl	8004a2c <__sinit>
 800491e:	4b14      	ldr	r3, [pc, #80]	; (8004970 <_fflush_r+0x6c>)
 8004920:	429c      	cmp	r4, r3
 8004922:	d11b      	bne.n	800495c <_fflush_r+0x58>
 8004924:	686c      	ldr	r4, [r5, #4]
 8004926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0ef      	beq.n	800490e <_fflush_r+0xa>
 800492e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004930:	07d0      	lsls	r0, r2, #31
 8004932:	d404      	bmi.n	800493e <_fflush_r+0x3a>
 8004934:	0599      	lsls	r1, r3, #22
 8004936:	d402      	bmi.n	800493e <_fflush_r+0x3a>
 8004938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800493a:	f000 f915 	bl	8004b68 <__retarget_lock_acquire_recursive>
 800493e:	4628      	mov	r0, r5
 8004940:	4621      	mov	r1, r4
 8004942:	f7ff ff59 	bl	80047f8 <__sflush_r>
 8004946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004948:	07da      	lsls	r2, r3, #31
 800494a:	4605      	mov	r5, r0
 800494c:	d4e0      	bmi.n	8004910 <_fflush_r+0xc>
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	059b      	lsls	r3, r3, #22
 8004952:	d4dd      	bmi.n	8004910 <_fflush_r+0xc>
 8004954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004956:	f000 f908 	bl	8004b6a <__retarget_lock_release_recursive>
 800495a:	e7d9      	b.n	8004910 <_fflush_r+0xc>
 800495c:	4b05      	ldr	r3, [pc, #20]	; (8004974 <_fflush_r+0x70>)
 800495e:	429c      	cmp	r4, r3
 8004960:	d101      	bne.n	8004966 <_fflush_r+0x62>
 8004962:	68ac      	ldr	r4, [r5, #8]
 8004964:	e7df      	b.n	8004926 <_fflush_r+0x22>
 8004966:	4b04      	ldr	r3, [pc, #16]	; (8004978 <_fflush_r+0x74>)
 8004968:	429c      	cmp	r4, r3
 800496a:	bf08      	it	eq
 800496c:	68ec      	ldreq	r4, [r5, #12]
 800496e:	e7da      	b.n	8004926 <_fflush_r+0x22>
 8004970:	08005610 	.word	0x08005610
 8004974:	08005630 	.word	0x08005630
 8004978:	080055f0 	.word	0x080055f0

0800497c <std>:
 800497c:	2300      	movs	r3, #0
 800497e:	b510      	push	{r4, lr}
 8004980:	4604      	mov	r4, r0
 8004982:	e9c0 3300 	strd	r3, r3, [r0]
 8004986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800498a:	6083      	str	r3, [r0, #8]
 800498c:	8181      	strh	r1, [r0, #12]
 800498e:	6643      	str	r3, [r0, #100]	; 0x64
 8004990:	81c2      	strh	r2, [r0, #14]
 8004992:	6183      	str	r3, [r0, #24]
 8004994:	4619      	mov	r1, r3
 8004996:	2208      	movs	r2, #8
 8004998:	305c      	adds	r0, #92	; 0x5c
 800499a:	f7ff fdd7 	bl	800454c <memset>
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <std+0x38>)
 80049a0:	6263      	str	r3, [r4, #36]	; 0x24
 80049a2:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <std+0x3c>)
 80049a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80049a6:	4b05      	ldr	r3, [pc, #20]	; (80049bc <std+0x40>)
 80049a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <std+0x44>)
 80049ac:	6224      	str	r4, [r4, #32]
 80049ae:	6323      	str	r3, [r4, #48]	; 0x30
 80049b0:	bd10      	pop	{r4, pc}
 80049b2:	bf00      	nop
 80049b4:	080053f5 	.word	0x080053f5
 80049b8:	08005417 	.word	0x08005417
 80049bc:	0800544f 	.word	0x0800544f
 80049c0:	08005473 	.word	0x08005473

080049c4 <_cleanup_r>:
 80049c4:	4901      	ldr	r1, [pc, #4]	; (80049cc <_cleanup_r+0x8>)
 80049c6:	f000 b8af 	b.w	8004b28 <_fwalk_reent>
 80049ca:	bf00      	nop
 80049cc:	08004905 	.word	0x08004905

080049d0 <__sfmoreglue>:
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	2268      	movs	r2, #104	; 0x68
 80049d4:	1e4d      	subs	r5, r1, #1
 80049d6:	4355      	muls	r5, r2
 80049d8:	460e      	mov	r6, r1
 80049da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049de:	f000 f997 	bl	8004d10 <_malloc_r>
 80049e2:	4604      	mov	r4, r0
 80049e4:	b140      	cbz	r0, 80049f8 <__sfmoreglue+0x28>
 80049e6:	2100      	movs	r1, #0
 80049e8:	e9c0 1600 	strd	r1, r6, [r0]
 80049ec:	300c      	adds	r0, #12
 80049ee:	60a0      	str	r0, [r4, #8]
 80049f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049f4:	f7ff fdaa 	bl	800454c <memset>
 80049f8:	4620      	mov	r0, r4
 80049fa:	bd70      	pop	{r4, r5, r6, pc}

080049fc <__sfp_lock_acquire>:
 80049fc:	4801      	ldr	r0, [pc, #4]	; (8004a04 <__sfp_lock_acquire+0x8>)
 80049fe:	f000 b8b3 	b.w	8004b68 <__retarget_lock_acquire_recursive>
 8004a02:	bf00      	nop
 8004a04:	20000171 	.word	0x20000171

08004a08 <__sfp_lock_release>:
 8004a08:	4801      	ldr	r0, [pc, #4]	; (8004a10 <__sfp_lock_release+0x8>)
 8004a0a:	f000 b8ae 	b.w	8004b6a <__retarget_lock_release_recursive>
 8004a0e:	bf00      	nop
 8004a10:	20000171 	.word	0x20000171

08004a14 <__sinit_lock_acquire>:
 8004a14:	4801      	ldr	r0, [pc, #4]	; (8004a1c <__sinit_lock_acquire+0x8>)
 8004a16:	f000 b8a7 	b.w	8004b68 <__retarget_lock_acquire_recursive>
 8004a1a:	bf00      	nop
 8004a1c:	20000172 	.word	0x20000172

08004a20 <__sinit_lock_release>:
 8004a20:	4801      	ldr	r0, [pc, #4]	; (8004a28 <__sinit_lock_release+0x8>)
 8004a22:	f000 b8a2 	b.w	8004b6a <__retarget_lock_release_recursive>
 8004a26:	bf00      	nop
 8004a28:	20000172 	.word	0x20000172

08004a2c <__sinit>:
 8004a2c:	b510      	push	{r4, lr}
 8004a2e:	4604      	mov	r4, r0
 8004a30:	f7ff fff0 	bl	8004a14 <__sinit_lock_acquire>
 8004a34:	69a3      	ldr	r3, [r4, #24]
 8004a36:	b11b      	cbz	r3, 8004a40 <__sinit+0x14>
 8004a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a3c:	f7ff bff0 	b.w	8004a20 <__sinit_lock_release>
 8004a40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a44:	6523      	str	r3, [r4, #80]	; 0x50
 8004a46:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <__sinit+0x68>)
 8004a48:	4a13      	ldr	r2, [pc, #76]	; (8004a98 <__sinit+0x6c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a4e:	42a3      	cmp	r3, r4
 8004a50:	bf04      	itt	eq
 8004a52:	2301      	moveq	r3, #1
 8004a54:	61a3      	streq	r3, [r4, #24]
 8004a56:	4620      	mov	r0, r4
 8004a58:	f000 f820 	bl	8004a9c <__sfp>
 8004a5c:	6060      	str	r0, [r4, #4]
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f000 f81c 	bl	8004a9c <__sfp>
 8004a64:	60a0      	str	r0, [r4, #8]
 8004a66:	4620      	mov	r0, r4
 8004a68:	f000 f818 	bl	8004a9c <__sfp>
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	60e0      	str	r0, [r4, #12]
 8004a70:	2104      	movs	r1, #4
 8004a72:	6860      	ldr	r0, [r4, #4]
 8004a74:	f7ff ff82 	bl	800497c <std>
 8004a78:	68a0      	ldr	r0, [r4, #8]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	2109      	movs	r1, #9
 8004a7e:	f7ff ff7d 	bl	800497c <std>
 8004a82:	68e0      	ldr	r0, [r4, #12]
 8004a84:	2202      	movs	r2, #2
 8004a86:	2112      	movs	r1, #18
 8004a88:	f7ff ff78 	bl	800497c <std>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	61a3      	str	r3, [r4, #24]
 8004a90:	e7d2      	b.n	8004a38 <__sinit+0xc>
 8004a92:	bf00      	nop
 8004a94:	080055ec 	.word	0x080055ec
 8004a98:	080049c5 	.word	0x080049c5

08004a9c <__sfp>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	4607      	mov	r7, r0
 8004aa0:	f7ff ffac 	bl	80049fc <__sfp_lock_acquire>
 8004aa4:	4b1e      	ldr	r3, [pc, #120]	; (8004b20 <__sfp+0x84>)
 8004aa6:	681e      	ldr	r6, [r3, #0]
 8004aa8:	69b3      	ldr	r3, [r6, #24]
 8004aaa:	b913      	cbnz	r3, 8004ab2 <__sfp+0x16>
 8004aac:	4630      	mov	r0, r6
 8004aae:	f7ff ffbd 	bl	8004a2c <__sinit>
 8004ab2:	3648      	adds	r6, #72	; 0x48
 8004ab4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	d503      	bpl.n	8004ac4 <__sfp+0x28>
 8004abc:	6833      	ldr	r3, [r6, #0]
 8004abe:	b30b      	cbz	r3, 8004b04 <__sfp+0x68>
 8004ac0:	6836      	ldr	r6, [r6, #0]
 8004ac2:	e7f7      	b.n	8004ab4 <__sfp+0x18>
 8004ac4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ac8:	b9d5      	cbnz	r5, 8004b00 <__sfp+0x64>
 8004aca:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <__sfp+0x88>)
 8004acc:	60e3      	str	r3, [r4, #12]
 8004ace:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ad2:	6665      	str	r5, [r4, #100]	; 0x64
 8004ad4:	f000 f847 	bl	8004b66 <__retarget_lock_init_recursive>
 8004ad8:	f7ff ff96 	bl	8004a08 <__sfp_lock_release>
 8004adc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ae0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ae4:	6025      	str	r5, [r4, #0]
 8004ae6:	61a5      	str	r5, [r4, #24]
 8004ae8:	2208      	movs	r2, #8
 8004aea:	4629      	mov	r1, r5
 8004aec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004af0:	f7ff fd2c 	bl	800454c <memset>
 8004af4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004af8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004afc:	4620      	mov	r0, r4
 8004afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b00:	3468      	adds	r4, #104	; 0x68
 8004b02:	e7d9      	b.n	8004ab8 <__sfp+0x1c>
 8004b04:	2104      	movs	r1, #4
 8004b06:	4638      	mov	r0, r7
 8004b08:	f7ff ff62 	bl	80049d0 <__sfmoreglue>
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	6030      	str	r0, [r6, #0]
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d1d5      	bne.n	8004ac0 <__sfp+0x24>
 8004b14:	f7ff ff78 	bl	8004a08 <__sfp_lock_release>
 8004b18:	230c      	movs	r3, #12
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	e7ee      	b.n	8004afc <__sfp+0x60>
 8004b1e:	bf00      	nop
 8004b20:	080055ec 	.word	0x080055ec
 8004b24:	ffff0001 	.word	0xffff0001

08004b28 <_fwalk_reent>:
 8004b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b2c:	4606      	mov	r6, r0
 8004b2e:	4688      	mov	r8, r1
 8004b30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b34:	2700      	movs	r7, #0
 8004b36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b3a:	f1b9 0901 	subs.w	r9, r9, #1
 8004b3e:	d505      	bpl.n	8004b4c <_fwalk_reent+0x24>
 8004b40:	6824      	ldr	r4, [r4, #0]
 8004b42:	2c00      	cmp	r4, #0
 8004b44:	d1f7      	bne.n	8004b36 <_fwalk_reent+0xe>
 8004b46:	4638      	mov	r0, r7
 8004b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b4c:	89ab      	ldrh	r3, [r5, #12]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d907      	bls.n	8004b62 <_fwalk_reent+0x3a>
 8004b52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b56:	3301      	adds	r3, #1
 8004b58:	d003      	beq.n	8004b62 <_fwalk_reent+0x3a>
 8004b5a:	4629      	mov	r1, r5
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	47c0      	blx	r8
 8004b60:	4307      	orrs	r7, r0
 8004b62:	3568      	adds	r5, #104	; 0x68
 8004b64:	e7e9      	b.n	8004b3a <_fwalk_reent+0x12>

08004b66 <__retarget_lock_init_recursive>:
 8004b66:	4770      	bx	lr

08004b68 <__retarget_lock_acquire_recursive>:
 8004b68:	4770      	bx	lr

08004b6a <__retarget_lock_release_recursive>:
 8004b6a:	4770      	bx	lr

08004b6c <__swhatbuf_r>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	460e      	mov	r6, r1
 8004b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b74:	2900      	cmp	r1, #0
 8004b76:	b096      	sub	sp, #88	; 0x58
 8004b78:	4614      	mov	r4, r2
 8004b7a:	461d      	mov	r5, r3
 8004b7c:	da08      	bge.n	8004b90 <__swhatbuf_r+0x24>
 8004b7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	602a      	str	r2, [r5, #0]
 8004b86:	061a      	lsls	r2, r3, #24
 8004b88:	d410      	bmi.n	8004bac <__swhatbuf_r+0x40>
 8004b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b8e:	e00e      	b.n	8004bae <__swhatbuf_r+0x42>
 8004b90:	466a      	mov	r2, sp
 8004b92:	f000 fc95 	bl	80054c0 <_fstat_r>
 8004b96:	2800      	cmp	r0, #0
 8004b98:	dbf1      	blt.n	8004b7e <__swhatbuf_r+0x12>
 8004b9a:	9a01      	ldr	r2, [sp, #4]
 8004b9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ba0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ba4:	425a      	negs	r2, r3
 8004ba6:	415a      	adcs	r2, r3
 8004ba8:	602a      	str	r2, [r5, #0]
 8004baa:	e7ee      	b.n	8004b8a <__swhatbuf_r+0x1e>
 8004bac:	2340      	movs	r3, #64	; 0x40
 8004bae:	2000      	movs	r0, #0
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	b016      	add	sp, #88	; 0x58
 8004bb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004bb8 <__smakebuf_r>:
 8004bb8:	898b      	ldrh	r3, [r1, #12]
 8004bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bbc:	079d      	lsls	r5, r3, #30
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	d507      	bpl.n	8004bd4 <__smakebuf_r+0x1c>
 8004bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bc8:	6023      	str	r3, [r4, #0]
 8004bca:	6123      	str	r3, [r4, #16]
 8004bcc:	2301      	movs	r3, #1
 8004bce:	6163      	str	r3, [r4, #20]
 8004bd0:	b002      	add	sp, #8
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
 8004bd4:	ab01      	add	r3, sp, #4
 8004bd6:	466a      	mov	r2, sp
 8004bd8:	f7ff ffc8 	bl	8004b6c <__swhatbuf_r>
 8004bdc:	9900      	ldr	r1, [sp, #0]
 8004bde:	4605      	mov	r5, r0
 8004be0:	4630      	mov	r0, r6
 8004be2:	f000 f895 	bl	8004d10 <_malloc_r>
 8004be6:	b948      	cbnz	r0, 8004bfc <__smakebuf_r+0x44>
 8004be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bec:	059a      	lsls	r2, r3, #22
 8004bee:	d4ef      	bmi.n	8004bd0 <__smakebuf_r+0x18>
 8004bf0:	f023 0303 	bic.w	r3, r3, #3
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	81a3      	strh	r3, [r4, #12]
 8004bfa:	e7e3      	b.n	8004bc4 <__smakebuf_r+0xc>
 8004bfc:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <__smakebuf_r+0x7c>)
 8004bfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	6020      	str	r0, [r4, #0]
 8004c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c08:	81a3      	strh	r3, [r4, #12]
 8004c0a:	9b00      	ldr	r3, [sp, #0]
 8004c0c:	6163      	str	r3, [r4, #20]
 8004c0e:	9b01      	ldr	r3, [sp, #4]
 8004c10:	6120      	str	r0, [r4, #16]
 8004c12:	b15b      	cbz	r3, 8004c2c <__smakebuf_r+0x74>
 8004c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f000 fc63 	bl	80054e4 <_isatty_r>
 8004c1e:	b128      	cbz	r0, 8004c2c <__smakebuf_r+0x74>
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	f023 0303 	bic.w	r3, r3, #3
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	81a3      	strh	r3, [r4, #12]
 8004c2c:	89a0      	ldrh	r0, [r4, #12]
 8004c2e:	4305      	orrs	r5, r0
 8004c30:	81a5      	strh	r5, [r4, #12]
 8004c32:	e7cd      	b.n	8004bd0 <__smakebuf_r+0x18>
 8004c34:	080049c5 	.word	0x080049c5

08004c38 <_free_r>:
 8004c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c3a:	2900      	cmp	r1, #0
 8004c3c:	d044      	beq.n	8004cc8 <_free_r+0x90>
 8004c3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c42:	9001      	str	r0, [sp, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f1a1 0404 	sub.w	r4, r1, #4
 8004c4a:	bfb8      	it	lt
 8004c4c:	18e4      	addlt	r4, r4, r3
 8004c4e:	f000 fc6b 	bl	8005528 <__malloc_lock>
 8004c52:	4a1e      	ldr	r2, [pc, #120]	; (8004ccc <_free_r+0x94>)
 8004c54:	9801      	ldr	r0, [sp, #4]
 8004c56:	6813      	ldr	r3, [r2, #0]
 8004c58:	b933      	cbnz	r3, 8004c68 <_free_r+0x30>
 8004c5a:	6063      	str	r3, [r4, #4]
 8004c5c:	6014      	str	r4, [r2, #0]
 8004c5e:	b003      	add	sp, #12
 8004c60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c64:	f000 bc66 	b.w	8005534 <__malloc_unlock>
 8004c68:	42a3      	cmp	r3, r4
 8004c6a:	d908      	bls.n	8004c7e <_free_r+0x46>
 8004c6c:	6825      	ldr	r5, [r4, #0]
 8004c6e:	1961      	adds	r1, r4, r5
 8004c70:	428b      	cmp	r3, r1
 8004c72:	bf01      	itttt	eq
 8004c74:	6819      	ldreq	r1, [r3, #0]
 8004c76:	685b      	ldreq	r3, [r3, #4]
 8004c78:	1949      	addeq	r1, r1, r5
 8004c7a:	6021      	streq	r1, [r4, #0]
 8004c7c:	e7ed      	b.n	8004c5a <_free_r+0x22>
 8004c7e:	461a      	mov	r2, r3
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	b10b      	cbz	r3, 8004c88 <_free_r+0x50>
 8004c84:	42a3      	cmp	r3, r4
 8004c86:	d9fa      	bls.n	8004c7e <_free_r+0x46>
 8004c88:	6811      	ldr	r1, [r2, #0]
 8004c8a:	1855      	adds	r5, r2, r1
 8004c8c:	42a5      	cmp	r5, r4
 8004c8e:	d10b      	bne.n	8004ca8 <_free_r+0x70>
 8004c90:	6824      	ldr	r4, [r4, #0]
 8004c92:	4421      	add	r1, r4
 8004c94:	1854      	adds	r4, r2, r1
 8004c96:	42a3      	cmp	r3, r4
 8004c98:	6011      	str	r1, [r2, #0]
 8004c9a:	d1e0      	bne.n	8004c5e <_free_r+0x26>
 8004c9c:	681c      	ldr	r4, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	6053      	str	r3, [r2, #4]
 8004ca2:	4421      	add	r1, r4
 8004ca4:	6011      	str	r1, [r2, #0]
 8004ca6:	e7da      	b.n	8004c5e <_free_r+0x26>
 8004ca8:	d902      	bls.n	8004cb0 <_free_r+0x78>
 8004caa:	230c      	movs	r3, #12
 8004cac:	6003      	str	r3, [r0, #0]
 8004cae:	e7d6      	b.n	8004c5e <_free_r+0x26>
 8004cb0:	6825      	ldr	r5, [r4, #0]
 8004cb2:	1961      	adds	r1, r4, r5
 8004cb4:	428b      	cmp	r3, r1
 8004cb6:	bf04      	itt	eq
 8004cb8:	6819      	ldreq	r1, [r3, #0]
 8004cba:	685b      	ldreq	r3, [r3, #4]
 8004cbc:	6063      	str	r3, [r4, #4]
 8004cbe:	bf04      	itt	eq
 8004cc0:	1949      	addeq	r1, r1, r5
 8004cc2:	6021      	streq	r1, [r4, #0]
 8004cc4:	6054      	str	r4, [r2, #4]
 8004cc6:	e7ca      	b.n	8004c5e <_free_r+0x26>
 8004cc8:	b003      	add	sp, #12
 8004cca:	bd30      	pop	{r4, r5, pc}
 8004ccc:	20000174 	.word	0x20000174

08004cd0 <sbrk_aligned>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	4e0e      	ldr	r6, [pc, #56]	; (8004d0c <sbrk_aligned+0x3c>)
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	6831      	ldr	r1, [r6, #0]
 8004cd8:	4605      	mov	r5, r0
 8004cda:	b911      	cbnz	r1, 8004ce2 <sbrk_aligned+0x12>
 8004cdc:	f000 fb7a 	bl	80053d4 <_sbrk_r>
 8004ce0:	6030      	str	r0, [r6, #0]
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	f000 fb75 	bl	80053d4 <_sbrk_r>
 8004cea:	1c43      	adds	r3, r0, #1
 8004cec:	d00a      	beq.n	8004d04 <sbrk_aligned+0x34>
 8004cee:	1cc4      	adds	r4, r0, #3
 8004cf0:	f024 0403 	bic.w	r4, r4, #3
 8004cf4:	42a0      	cmp	r0, r4
 8004cf6:	d007      	beq.n	8004d08 <sbrk_aligned+0x38>
 8004cf8:	1a21      	subs	r1, r4, r0
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f000 fb6a 	bl	80053d4 <_sbrk_r>
 8004d00:	3001      	adds	r0, #1
 8004d02:	d101      	bne.n	8004d08 <sbrk_aligned+0x38>
 8004d04:	f04f 34ff 	mov.w	r4, #4294967295
 8004d08:	4620      	mov	r0, r4
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}
 8004d0c:	20000178 	.word	0x20000178

08004d10 <_malloc_r>:
 8004d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d14:	1ccd      	adds	r5, r1, #3
 8004d16:	f025 0503 	bic.w	r5, r5, #3
 8004d1a:	3508      	adds	r5, #8
 8004d1c:	2d0c      	cmp	r5, #12
 8004d1e:	bf38      	it	cc
 8004d20:	250c      	movcc	r5, #12
 8004d22:	2d00      	cmp	r5, #0
 8004d24:	4607      	mov	r7, r0
 8004d26:	db01      	blt.n	8004d2c <_malloc_r+0x1c>
 8004d28:	42a9      	cmp	r1, r5
 8004d2a:	d905      	bls.n	8004d38 <_malloc_r+0x28>
 8004d2c:	230c      	movs	r3, #12
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	2600      	movs	r6, #0
 8004d32:	4630      	mov	r0, r6
 8004d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d38:	4e2e      	ldr	r6, [pc, #184]	; (8004df4 <_malloc_r+0xe4>)
 8004d3a:	f000 fbf5 	bl	8005528 <__malloc_lock>
 8004d3e:	6833      	ldr	r3, [r6, #0]
 8004d40:	461c      	mov	r4, r3
 8004d42:	bb34      	cbnz	r4, 8004d92 <_malloc_r+0x82>
 8004d44:	4629      	mov	r1, r5
 8004d46:	4638      	mov	r0, r7
 8004d48:	f7ff ffc2 	bl	8004cd0 <sbrk_aligned>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	4604      	mov	r4, r0
 8004d50:	d14d      	bne.n	8004dee <_malloc_r+0xde>
 8004d52:	6834      	ldr	r4, [r6, #0]
 8004d54:	4626      	mov	r6, r4
 8004d56:	2e00      	cmp	r6, #0
 8004d58:	d140      	bne.n	8004ddc <_malloc_r+0xcc>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	4631      	mov	r1, r6
 8004d5e:	4638      	mov	r0, r7
 8004d60:	eb04 0803 	add.w	r8, r4, r3
 8004d64:	f000 fb36 	bl	80053d4 <_sbrk_r>
 8004d68:	4580      	cmp	r8, r0
 8004d6a:	d13a      	bne.n	8004de2 <_malloc_r+0xd2>
 8004d6c:	6821      	ldr	r1, [r4, #0]
 8004d6e:	3503      	adds	r5, #3
 8004d70:	1a6d      	subs	r5, r5, r1
 8004d72:	f025 0503 	bic.w	r5, r5, #3
 8004d76:	3508      	adds	r5, #8
 8004d78:	2d0c      	cmp	r5, #12
 8004d7a:	bf38      	it	cc
 8004d7c:	250c      	movcc	r5, #12
 8004d7e:	4629      	mov	r1, r5
 8004d80:	4638      	mov	r0, r7
 8004d82:	f7ff ffa5 	bl	8004cd0 <sbrk_aligned>
 8004d86:	3001      	adds	r0, #1
 8004d88:	d02b      	beq.n	8004de2 <_malloc_r+0xd2>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	442b      	add	r3, r5
 8004d8e:	6023      	str	r3, [r4, #0]
 8004d90:	e00e      	b.n	8004db0 <_malloc_r+0xa0>
 8004d92:	6822      	ldr	r2, [r4, #0]
 8004d94:	1b52      	subs	r2, r2, r5
 8004d96:	d41e      	bmi.n	8004dd6 <_malloc_r+0xc6>
 8004d98:	2a0b      	cmp	r2, #11
 8004d9a:	d916      	bls.n	8004dca <_malloc_r+0xba>
 8004d9c:	1961      	adds	r1, r4, r5
 8004d9e:	42a3      	cmp	r3, r4
 8004da0:	6025      	str	r5, [r4, #0]
 8004da2:	bf18      	it	ne
 8004da4:	6059      	strne	r1, [r3, #4]
 8004da6:	6863      	ldr	r3, [r4, #4]
 8004da8:	bf08      	it	eq
 8004daa:	6031      	streq	r1, [r6, #0]
 8004dac:	5162      	str	r2, [r4, r5]
 8004dae:	604b      	str	r3, [r1, #4]
 8004db0:	4638      	mov	r0, r7
 8004db2:	f104 060b 	add.w	r6, r4, #11
 8004db6:	f000 fbbd 	bl	8005534 <__malloc_unlock>
 8004dba:	f026 0607 	bic.w	r6, r6, #7
 8004dbe:	1d23      	adds	r3, r4, #4
 8004dc0:	1af2      	subs	r2, r6, r3
 8004dc2:	d0b6      	beq.n	8004d32 <_malloc_r+0x22>
 8004dc4:	1b9b      	subs	r3, r3, r6
 8004dc6:	50a3      	str	r3, [r4, r2]
 8004dc8:	e7b3      	b.n	8004d32 <_malloc_r+0x22>
 8004dca:	6862      	ldr	r2, [r4, #4]
 8004dcc:	42a3      	cmp	r3, r4
 8004dce:	bf0c      	ite	eq
 8004dd0:	6032      	streq	r2, [r6, #0]
 8004dd2:	605a      	strne	r2, [r3, #4]
 8004dd4:	e7ec      	b.n	8004db0 <_malloc_r+0xa0>
 8004dd6:	4623      	mov	r3, r4
 8004dd8:	6864      	ldr	r4, [r4, #4]
 8004dda:	e7b2      	b.n	8004d42 <_malloc_r+0x32>
 8004ddc:	4634      	mov	r4, r6
 8004dde:	6876      	ldr	r6, [r6, #4]
 8004de0:	e7b9      	b.n	8004d56 <_malloc_r+0x46>
 8004de2:	230c      	movs	r3, #12
 8004de4:	603b      	str	r3, [r7, #0]
 8004de6:	4638      	mov	r0, r7
 8004de8:	f000 fba4 	bl	8005534 <__malloc_unlock>
 8004dec:	e7a1      	b.n	8004d32 <_malloc_r+0x22>
 8004dee:	6025      	str	r5, [r4, #0]
 8004df0:	e7de      	b.n	8004db0 <_malloc_r+0xa0>
 8004df2:	bf00      	nop
 8004df4:	20000174 	.word	0x20000174

08004df8 <__sfputc_r>:
 8004df8:	6893      	ldr	r3, [r2, #8]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	b410      	push	{r4}
 8004e00:	6093      	str	r3, [r2, #8]
 8004e02:	da08      	bge.n	8004e16 <__sfputc_r+0x1e>
 8004e04:	6994      	ldr	r4, [r2, #24]
 8004e06:	42a3      	cmp	r3, r4
 8004e08:	db01      	blt.n	8004e0e <__sfputc_r+0x16>
 8004e0a:	290a      	cmp	r1, #10
 8004e0c:	d103      	bne.n	8004e16 <__sfputc_r+0x1e>
 8004e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e12:	f7ff bc31 	b.w	8004678 <__swbuf_r>
 8004e16:	6813      	ldr	r3, [r2, #0]
 8004e18:	1c58      	adds	r0, r3, #1
 8004e1a:	6010      	str	r0, [r2, #0]
 8004e1c:	7019      	strb	r1, [r3, #0]
 8004e1e:	4608      	mov	r0, r1
 8004e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <__sfputs_r>:
 8004e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e28:	4606      	mov	r6, r0
 8004e2a:	460f      	mov	r7, r1
 8004e2c:	4614      	mov	r4, r2
 8004e2e:	18d5      	adds	r5, r2, r3
 8004e30:	42ac      	cmp	r4, r5
 8004e32:	d101      	bne.n	8004e38 <__sfputs_r+0x12>
 8004e34:	2000      	movs	r0, #0
 8004e36:	e007      	b.n	8004e48 <__sfputs_r+0x22>
 8004e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e3c:	463a      	mov	r2, r7
 8004e3e:	4630      	mov	r0, r6
 8004e40:	f7ff ffda 	bl	8004df8 <__sfputc_r>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d1f3      	bne.n	8004e30 <__sfputs_r+0xa>
 8004e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e4c <_vfiprintf_r>:
 8004e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e50:	460d      	mov	r5, r1
 8004e52:	b09d      	sub	sp, #116	; 0x74
 8004e54:	4614      	mov	r4, r2
 8004e56:	4698      	mov	r8, r3
 8004e58:	4606      	mov	r6, r0
 8004e5a:	b118      	cbz	r0, 8004e64 <_vfiprintf_r+0x18>
 8004e5c:	6983      	ldr	r3, [r0, #24]
 8004e5e:	b90b      	cbnz	r3, 8004e64 <_vfiprintf_r+0x18>
 8004e60:	f7ff fde4 	bl	8004a2c <__sinit>
 8004e64:	4b89      	ldr	r3, [pc, #548]	; (800508c <_vfiprintf_r+0x240>)
 8004e66:	429d      	cmp	r5, r3
 8004e68:	d11b      	bne.n	8004ea2 <_vfiprintf_r+0x56>
 8004e6a:	6875      	ldr	r5, [r6, #4]
 8004e6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e6e:	07d9      	lsls	r1, r3, #31
 8004e70:	d405      	bmi.n	8004e7e <_vfiprintf_r+0x32>
 8004e72:	89ab      	ldrh	r3, [r5, #12]
 8004e74:	059a      	lsls	r2, r3, #22
 8004e76:	d402      	bmi.n	8004e7e <_vfiprintf_r+0x32>
 8004e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e7a:	f7ff fe75 	bl	8004b68 <__retarget_lock_acquire_recursive>
 8004e7e:	89ab      	ldrh	r3, [r5, #12]
 8004e80:	071b      	lsls	r3, r3, #28
 8004e82:	d501      	bpl.n	8004e88 <_vfiprintf_r+0x3c>
 8004e84:	692b      	ldr	r3, [r5, #16]
 8004e86:	b9eb      	cbnz	r3, 8004ec4 <_vfiprintf_r+0x78>
 8004e88:	4629      	mov	r1, r5
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	f7ff fc46 	bl	800471c <__swsetup_r>
 8004e90:	b1c0      	cbz	r0, 8004ec4 <_vfiprintf_r+0x78>
 8004e92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e94:	07dc      	lsls	r4, r3, #31
 8004e96:	d50e      	bpl.n	8004eb6 <_vfiprintf_r+0x6a>
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9c:	b01d      	add	sp, #116	; 0x74
 8004e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea2:	4b7b      	ldr	r3, [pc, #492]	; (8005090 <_vfiprintf_r+0x244>)
 8004ea4:	429d      	cmp	r5, r3
 8004ea6:	d101      	bne.n	8004eac <_vfiprintf_r+0x60>
 8004ea8:	68b5      	ldr	r5, [r6, #8]
 8004eaa:	e7df      	b.n	8004e6c <_vfiprintf_r+0x20>
 8004eac:	4b79      	ldr	r3, [pc, #484]	; (8005094 <_vfiprintf_r+0x248>)
 8004eae:	429d      	cmp	r5, r3
 8004eb0:	bf08      	it	eq
 8004eb2:	68f5      	ldreq	r5, [r6, #12]
 8004eb4:	e7da      	b.n	8004e6c <_vfiprintf_r+0x20>
 8004eb6:	89ab      	ldrh	r3, [r5, #12]
 8004eb8:	0598      	lsls	r0, r3, #22
 8004eba:	d4ed      	bmi.n	8004e98 <_vfiprintf_r+0x4c>
 8004ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ebe:	f7ff fe54 	bl	8004b6a <__retarget_lock_release_recursive>
 8004ec2:	e7e9      	b.n	8004e98 <_vfiprintf_r+0x4c>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ec8:	2320      	movs	r3, #32
 8004eca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ece:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ed2:	2330      	movs	r3, #48	; 0x30
 8004ed4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005098 <_vfiprintf_r+0x24c>
 8004ed8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004edc:	f04f 0901 	mov.w	r9, #1
 8004ee0:	4623      	mov	r3, r4
 8004ee2:	469a      	mov	sl, r3
 8004ee4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ee8:	b10a      	cbz	r2, 8004eee <_vfiprintf_r+0xa2>
 8004eea:	2a25      	cmp	r2, #37	; 0x25
 8004eec:	d1f9      	bne.n	8004ee2 <_vfiprintf_r+0x96>
 8004eee:	ebba 0b04 	subs.w	fp, sl, r4
 8004ef2:	d00b      	beq.n	8004f0c <_vfiprintf_r+0xc0>
 8004ef4:	465b      	mov	r3, fp
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	4629      	mov	r1, r5
 8004efa:	4630      	mov	r0, r6
 8004efc:	f7ff ff93 	bl	8004e26 <__sfputs_r>
 8004f00:	3001      	adds	r0, #1
 8004f02:	f000 80aa 	beq.w	800505a <_vfiprintf_r+0x20e>
 8004f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f08:	445a      	add	r2, fp
 8004f0a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 80a2 	beq.w	800505a <_vfiprintf_r+0x20e>
 8004f16:	2300      	movs	r3, #0
 8004f18:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f20:	f10a 0a01 	add.w	sl, sl, #1
 8004f24:	9304      	str	r3, [sp, #16]
 8004f26:	9307      	str	r3, [sp, #28]
 8004f28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f2c:	931a      	str	r3, [sp, #104]	; 0x68
 8004f2e:	4654      	mov	r4, sl
 8004f30:	2205      	movs	r2, #5
 8004f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f36:	4858      	ldr	r0, [pc, #352]	; (8005098 <_vfiprintf_r+0x24c>)
 8004f38:	f7fb f94a 	bl	80001d0 <memchr>
 8004f3c:	9a04      	ldr	r2, [sp, #16]
 8004f3e:	b9d8      	cbnz	r0, 8004f78 <_vfiprintf_r+0x12c>
 8004f40:	06d1      	lsls	r1, r2, #27
 8004f42:	bf44      	itt	mi
 8004f44:	2320      	movmi	r3, #32
 8004f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f4a:	0713      	lsls	r3, r2, #28
 8004f4c:	bf44      	itt	mi
 8004f4e:	232b      	movmi	r3, #43	; 0x2b
 8004f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f54:	f89a 3000 	ldrb.w	r3, [sl]
 8004f58:	2b2a      	cmp	r3, #42	; 0x2a
 8004f5a:	d015      	beq.n	8004f88 <_vfiprintf_r+0x13c>
 8004f5c:	9a07      	ldr	r2, [sp, #28]
 8004f5e:	4654      	mov	r4, sl
 8004f60:	2000      	movs	r0, #0
 8004f62:	f04f 0c0a 	mov.w	ip, #10
 8004f66:	4621      	mov	r1, r4
 8004f68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f6c:	3b30      	subs	r3, #48	; 0x30
 8004f6e:	2b09      	cmp	r3, #9
 8004f70:	d94e      	bls.n	8005010 <_vfiprintf_r+0x1c4>
 8004f72:	b1b0      	cbz	r0, 8004fa2 <_vfiprintf_r+0x156>
 8004f74:	9207      	str	r2, [sp, #28]
 8004f76:	e014      	b.n	8004fa2 <_vfiprintf_r+0x156>
 8004f78:	eba0 0308 	sub.w	r3, r0, r8
 8004f7c:	fa09 f303 	lsl.w	r3, r9, r3
 8004f80:	4313      	orrs	r3, r2
 8004f82:	9304      	str	r3, [sp, #16]
 8004f84:	46a2      	mov	sl, r4
 8004f86:	e7d2      	b.n	8004f2e <_vfiprintf_r+0xe2>
 8004f88:	9b03      	ldr	r3, [sp, #12]
 8004f8a:	1d19      	adds	r1, r3, #4
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	9103      	str	r1, [sp, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bfbb      	ittet	lt
 8004f94:	425b      	neglt	r3, r3
 8004f96:	f042 0202 	orrlt.w	r2, r2, #2
 8004f9a:	9307      	strge	r3, [sp, #28]
 8004f9c:	9307      	strlt	r3, [sp, #28]
 8004f9e:	bfb8      	it	lt
 8004fa0:	9204      	strlt	r2, [sp, #16]
 8004fa2:	7823      	ldrb	r3, [r4, #0]
 8004fa4:	2b2e      	cmp	r3, #46	; 0x2e
 8004fa6:	d10c      	bne.n	8004fc2 <_vfiprintf_r+0x176>
 8004fa8:	7863      	ldrb	r3, [r4, #1]
 8004faa:	2b2a      	cmp	r3, #42	; 0x2a
 8004fac:	d135      	bne.n	800501a <_vfiprintf_r+0x1ce>
 8004fae:	9b03      	ldr	r3, [sp, #12]
 8004fb0:	1d1a      	adds	r2, r3, #4
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	9203      	str	r2, [sp, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bfb8      	it	lt
 8004fba:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fbe:	3402      	adds	r4, #2
 8004fc0:	9305      	str	r3, [sp, #20]
 8004fc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80050a8 <_vfiprintf_r+0x25c>
 8004fc6:	7821      	ldrb	r1, [r4, #0]
 8004fc8:	2203      	movs	r2, #3
 8004fca:	4650      	mov	r0, sl
 8004fcc:	f7fb f900 	bl	80001d0 <memchr>
 8004fd0:	b140      	cbz	r0, 8004fe4 <_vfiprintf_r+0x198>
 8004fd2:	2340      	movs	r3, #64	; 0x40
 8004fd4:	eba0 000a 	sub.w	r0, r0, sl
 8004fd8:	fa03 f000 	lsl.w	r0, r3, r0
 8004fdc:	9b04      	ldr	r3, [sp, #16]
 8004fde:	4303      	orrs	r3, r0
 8004fe0:	3401      	adds	r4, #1
 8004fe2:	9304      	str	r3, [sp, #16]
 8004fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fe8:	482c      	ldr	r0, [pc, #176]	; (800509c <_vfiprintf_r+0x250>)
 8004fea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fee:	2206      	movs	r2, #6
 8004ff0:	f7fb f8ee 	bl	80001d0 <memchr>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d03f      	beq.n	8005078 <_vfiprintf_r+0x22c>
 8004ff8:	4b29      	ldr	r3, [pc, #164]	; (80050a0 <_vfiprintf_r+0x254>)
 8004ffa:	bb1b      	cbnz	r3, 8005044 <_vfiprintf_r+0x1f8>
 8004ffc:	9b03      	ldr	r3, [sp, #12]
 8004ffe:	3307      	adds	r3, #7
 8005000:	f023 0307 	bic.w	r3, r3, #7
 8005004:	3308      	adds	r3, #8
 8005006:	9303      	str	r3, [sp, #12]
 8005008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800500a:	443b      	add	r3, r7
 800500c:	9309      	str	r3, [sp, #36]	; 0x24
 800500e:	e767      	b.n	8004ee0 <_vfiprintf_r+0x94>
 8005010:	fb0c 3202 	mla	r2, ip, r2, r3
 8005014:	460c      	mov	r4, r1
 8005016:	2001      	movs	r0, #1
 8005018:	e7a5      	b.n	8004f66 <_vfiprintf_r+0x11a>
 800501a:	2300      	movs	r3, #0
 800501c:	3401      	adds	r4, #1
 800501e:	9305      	str	r3, [sp, #20]
 8005020:	4619      	mov	r1, r3
 8005022:	f04f 0c0a 	mov.w	ip, #10
 8005026:	4620      	mov	r0, r4
 8005028:	f810 2b01 	ldrb.w	r2, [r0], #1
 800502c:	3a30      	subs	r2, #48	; 0x30
 800502e:	2a09      	cmp	r2, #9
 8005030:	d903      	bls.n	800503a <_vfiprintf_r+0x1ee>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0c5      	beq.n	8004fc2 <_vfiprintf_r+0x176>
 8005036:	9105      	str	r1, [sp, #20]
 8005038:	e7c3      	b.n	8004fc2 <_vfiprintf_r+0x176>
 800503a:	fb0c 2101 	mla	r1, ip, r1, r2
 800503e:	4604      	mov	r4, r0
 8005040:	2301      	movs	r3, #1
 8005042:	e7f0      	b.n	8005026 <_vfiprintf_r+0x1da>
 8005044:	ab03      	add	r3, sp, #12
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	462a      	mov	r2, r5
 800504a:	4b16      	ldr	r3, [pc, #88]	; (80050a4 <_vfiprintf_r+0x258>)
 800504c:	a904      	add	r1, sp, #16
 800504e:	4630      	mov	r0, r6
 8005050:	f3af 8000 	nop.w
 8005054:	4607      	mov	r7, r0
 8005056:	1c78      	adds	r0, r7, #1
 8005058:	d1d6      	bne.n	8005008 <_vfiprintf_r+0x1bc>
 800505a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800505c:	07d9      	lsls	r1, r3, #31
 800505e:	d405      	bmi.n	800506c <_vfiprintf_r+0x220>
 8005060:	89ab      	ldrh	r3, [r5, #12]
 8005062:	059a      	lsls	r2, r3, #22
 8005064:	d402      	bmi.n	800506c <_vfiprintf_r+0x220>
 8005066:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005068:	f7ff fd7f 	bl	8004b6a <__retarget_lock_release_recursive>
 800506c:	89ab      	ldrh	r3, [r5, #12]
 800506e:	065b      	lsls	r3, r3, #25
 8005070:	f53f af12 	bmi.w	8004e98 <_vfiprintf_r+0x4c>
 8005074:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005076:	e711      	b.n	8004e9c <_vfiprintf_r+0x50>
 8005078:	ab03      	add	r3, sp, #12
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	462a      	mov	r2, r5
 800507e:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <_vfiprintf_r+0x258>)
 8005080:	a904      	add	r1, sp, #16
 8005082:	4630      	mov	r0, r6
 8005084:	f000 f880 	bl	8005188 <_printf_i>
 8005088:	e7e4      	b.n	8005054 <_vfiprintf_r+0x208>
 800508a:	bf00      	nop
 800508c:	08005610 	.word	0x08005610
 8005090:	08005630 	.word	0x08005630
 8005094:	080055f0 	.word	0x080055f0
 8005098:	08005650 	.word	0x08005650
 800509c:	0800565a 	.word	0x0800565a
 80050a0:	00000000 	.word	0x00000000
 80050a4:	08004e27 	.word	0x08004e27
 80050a8:	08005656 	.word	0x08005656

080050ac <_printf_common>:
 80050ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050b0:	4616      	mov	r6, r2
 80050b2:	4699      	mov	r9, r3
 80050b4:	688a      	ldr	r2, [r1, #8]
 80050b6:	690b      	ldr	r3, [r1, #16]
 80050b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050bc:	4293      	cmp	r3, r2
 80050be:	bfb8      	it	lt
 80050c0:	4613      	movlt	r3, r2
 80050c2:	6033      	str	r3, [r6, #0]
 80050c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050c8:	4607      	mov	r7, r0
 80050ca:	460c      	mov	r4, r1
 80050cc:	b10a      	cbz	r2, 80050d2 <_printf_common+0x26>
 80050ce:	3301      	adds	r3, #1
 80050d0:	6033      	str	r3, [r6, #0]
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	0699      	lsls	r1, r3, #26
 80050d6:	bf42      	ittt	mi
 80050d8:	6833      	ldrmi	r3, [r6, #0]
 80050da:	3302      	addmi	r3, #2
 80050dc:	6033      	strmi	r3, [r6, #0]
 80050de:	6825      	ldr	r5, [r4, #0]
 80050e0:	f015 0506 	ands.w	r5, r5, #6
 80050e4:	d106      	bne.n	80050f4 <_printf_common+0x48>
 80050e6:	f104 0a19 	add.w	sl, r4, #25
 80050ea:	68e3      	ldr	r3, [r4, #12]
 80050ec:	6832      	ldr	r2, [r6, #0]
 80050ee:	1a9b      	subs	r3, r3, r2
 80050f0:	42ab      	cmp	r3, r5
 80050f2:	dc26      	bgt.n	8005142 <_printf_common+0x96>
 80050f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050f8:	1e13      	subs	r3, r2, #0
 80050fa:	6822      	ldr	r2, [r4, #0]
 80050fc:	bf18      	it	ne
 80050fe:	2301      	movne	r3, #1
 8005100:	0692      	lsls	r2, r2, #26
 8005102:	d42b      	bmi.n	800515c <_printf_common+0xb0>
 8005104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005108:	4649      	mov	r1, r9
 800510a:	4638      	mov	r0, r7
 800510c:	47c0      	blx	r8
 800510e:	3001      	adds	r0, #1
 8005110:	d01e      	beq.n	8005150 <_printf_common+0xa4>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	68e5      	ldr	r5, [r4, #12]
 8005116:	6832      	ldr	r2, [r6, #0]
 8005118:	f003 0306 	and.w	r3, r3, #6
 800511c:	2b04      	cmp	r3, #4
 800511e:	bf08      	it	eq
 8005120:	1aad      	subeq	r5, r5, r2
 8005122:	68a3      	ldr	r3, [r4, #8]
 8005124:	6922      	ldr	r2, [r4, #16]
 8005126:	bf0c      	ite	eq
 8005128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800512c:	2500      	movne	r5, #0
 800512e:	4293      	cmp	r3, r2
 8005130:	bfc4      	itt	gt
 8005132:	1a9b      	subgt	r3, r3, r2
 8005134:	18ed      	addgt	r5, r5, r3
 8005136:	2600      	movs	r6, #0
 8005138:	341a      	adds	r4, #26
 800513a:	42b5      	cmp	r5, r6
 800513c:	d11a      	bne.n	8005174 <_printf_common+0xc8>
 800513e:	2000      	movs	r0, #0
 8005140:	e008      	b.n	8005154 <_printf_common+0xa8>
 8005142:	2301      	movs	r3, #1
 8005144:	4652      	mov	r2, sl
 8005146:	4649      	mov	r1, r9
 8005148:	4638      	mov	r0, r7
 800514a:	47c0      	blx	r8
 800514c:	3001      	adds	r0, #1
 800514e:	d103      	bne.n	8005158 <_printf_common+0xac>
 8005150:	f04f 30ff 	mov.w	r0, #4294967295
 8005154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005158:	3501      	adds	r5, #1
 800515a:	e7c6      	b.n	80050ea <_printf_common+0x3e>
 800515c:	18e1      	adds	r1, r4, r3
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	2030      	movs	r0, #48	; 0x30
 8005162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005166:	4422      	add	r2, r4
 8005168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800516c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005170:	3302      	adds	r3, #2
 8005172:	e7c7      	b.n	8005104 <_printf_common+0x58>
 8005174:	2301      	movs	r3, #1
 8005176:	4622      	mov	r2, r4
 8005178:	4649      	mov	r1, r9
 800517a:	4638      	mov	r0, r7
 800517c:	47c0      	blx	r8
 800517e:	3001      	adds	r0, #1
 8005180:	d0e6      	beq.n	8005150 <_printf_common+0xa4>
 8005182:	3601      	adds	r6, #1
 8005184:	e7d9      	b.n	800513a <_printf_common+0x8e>
	...

08005188 <_printf_i>:
 8005188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800518c:	7e0f      	ldrb	r7, [r1, #24]
 800518e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005190:	2f78      	cmp	r7, #120	; 0x78
 8005192:	4691      	mov	r9, r2
 8005194:	4680      	mov	r8, r0
 8005196:	460c      	mov	r4, r1
 8005198:	469a      	mov	sl, r3
 800519a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800519e:	d807      	bhi.n	80051b0 <_printf_i+0x28>
 80051a0:	2f62      	cmp	r7, #98	; 0x62
 80051a2:	d80a      	bhi.n	80051ba <_printf_i+0x32>
 80051a4:	2f00      	cmp	r7, #0
 80051a6:	f000 80d8 	beq.w	800535a <_printf_i+0x1d2>
 80051aa:	2f58      	cmp	r7, #88	; 0x58
 80051ac:	f000 80a3 	beq.w	80052f6 <_printf_i+0x16e>
 80051b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051b8:	e03a      	b.n	8005230 <_printf_i+0xa8>
 80051ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051be:	2b15      	cmp	r3, #21
 80051c0:	d8f6      	bhi.n	80051b0 <_printf_i+0x28>
 80051c2:	a101      	add	r1, pc, #4	; (adr r1, 80051c8 <_printf_i+0x40>)
 80051c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051c8:	08005221 	.word	0x08005221
 80051cc:	08005235 	.word	0x08005235
 80051d0:	080051b1 	.word	0x080051b1
 80051d4:	080051b1 	.word	0x080051b1
 80051d8:	080051b1 	.word	0x080051b1
 80051dc:	080051b1 	.word	0x080051b1
 80051e0:	08005235 	.word	0x08005235
 80051e4:	080051b1 	.word	0x080051b1
 80051e8:	080051b1 	.word	0x080051b1
 80051ec:	080051b1 	.word	0x080051b1
 80051f0:	080051b1 	.word	0x080051b1
 80051f4:	08005341 	.word	0x08005341
 80051f8:	08005265 	.word	0x08005265
 80051fc:	08005323 	.word	0x08005323
 8005200:	080051b1 	.word	0x080051b1
 8005204:	080051b1 	.word	0x080051b1
 8005208:	08005363 	.word	0x08005363
 800520c:	080051b1 	.word	0x080051b1
 8005210:	08005265 	.word	0x08005265
 8005214:	080051b1 	.word	0x080051b1
 8005218:	080051b1 	.word	0x080051b1
 800521c:	0800532b 	.word	0x0800532b
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	1d1a      	adds	r2, r3, #4
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	602a      	str	r2, [r5, #0]
 8005228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800522c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005230:	2301      	movs	r3, #1
 8005232:	e0a3      	b.n	800537c <_printf_i+0x1f4>
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	6829      	ldr	r1, [r5, #0]
 8005238:	0606      	lsls	r6, r0, #24
 800523a:	f101 0304 	add.w	r3, r1, #4
 800523e:	d50a      	bpl.n	8005256 <_printf_i+0xce>
 8005240:	680e      	ldr	r6, [r1, #0]
 8005242:	602b      	str	r3, [r5, #0]
 8005244:	2e00      	cmp	r6, #0
 8005246:	da03      	bge.n	8005250 <_printf_i+0xc8>
 8005248:	232d      	movs	r3, #45	; 0x2d
 800524a:	4276      	negs	r6, r6
 800524c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005250:	485e      	ldr	r0, [pc, #376]	; (80053cc <_printf_i+0x244>)
 8005252:	230a      	movs	r3, #10
 8005254:	e019      	b.n	800528a <_printf_i+0x102>
 8005256:	680e      	ldr	r6, [r1, #0]
 8005258:	602b      	str	r3, [r5, #0]
 800525a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800525e:	bf18      	it	ne
 8005260:	b236      	sxthne	r6, r6
 8005262:	e7ef      	b.n	8005244 <_printf_i+0xbc>
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	6820      	ldr	r0, [r4, #0]
 8005268:	1d19      	adds	r1, r3, #4
 800526a:	6029      	str	r1, [r5, #0]
 800526c:	0601      	lsls	r1, r0, #24
 800526e:	d501      	bpl.n	8005274 <_printf_i+0xec>
 8005270:	681e      	ldr	r6, [r3, #0]
 8005272:	e002      	b.n	800527a <_printf_i+0xf2>
 8005274:	0646      	lsls	r6, r0, #25
 8005276:	d5fb      	bpl.n	8005270 <_printf_i+0xe8>
 8005278:	881e      	ldrh	r6, [r3, #0]
 800527a:	4854      	ldr	r0, [pc, #336]	; (80053cc <_printf_i+0x244>)
 800527c:	2f6f      	cmp	r7, #111	; 0x6f
 800527e:	bf0c      	ite	eq
 8005280:	2308      	moveq	r3, #8
 8005282:	230a      	movne	r3, #10
 8005284:	2100      	movs	r1, #0
 8005286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800528a:	6865      	ldr	r5, [r4, #4]
 800528c:	60a5      	str	r5, [r4, #8]
 800528e:	2d00      	cmp	r5, #0
 8005290:	bfa2      	ittt	ge
 8005292:	6821      	ldrge	r1, [r4, #0]
 8005294:	f021 0104 	bicge.w	r1, r1, #4
 8005298:	6021      	strge	r1, [r4, #0]
 800529a:	b90e      	cbnz	r6, 80052a0 <_printf_i+0x118>
 800529c:	2d00      	cmp	r5, #0
 800529e:	d04d      	beq.n	800533c <_printf_i+0x1b4>
 80052a0:	4615      	mov	r5, r2
 80052a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80052a6:	fb03 6711 	mls	r7, r3, r1, r6
 80052aa:	5dc7      	ldrb	r7, [r0, r7]
 80052ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052b0:	4637      	mov	r7, r6
 80052b2:	42bb      	cmp	r3, r7
 80052b4:	460e      	mov	r6, r1
 80052b6:	d9f4      	bls.n	80052a2 <_printf_i+0x11a>
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d10b      	bne.n	80052d4 <_printf_i+0x14c>
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	07de      	lsls	r6, r3, #31
 80052c0:	d508      	bpl.n	80052d4 <_printf_i+0x14c>
 80052c2:	6923      	ldr	r3, [r4, #16]
 80052c4:	6861      	ldr	r1, [r4, #4]
 80052c6:	4299      	cmp	r1, r3
 80052c8:	bfde      	ittt	le
 80052ca:	2330      	movle	r3, #48	; 0x30
 80052cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052d4:	1b52      	subs	r2, r2, r5
 80052d6:	6122      	str	r2, [r4, #16]
 80052d8:	f8cd a000 	str.w	sl, [sp]
 80052dc:	464b      	mov	r3, r9
 80052de:	aa03      	add	r2, sp, #12
 80052e0:	4621      	mov	r1, r4
 80052e2:	4640      	mov	r0, r8
 80052e4:	f7ff fee2 	bl	80050ac <_printf_common>
 80052e8:	3001      	adds	r0, #1
 80052ea:	d14c      	bne.n	8005386 <_printf_i+0x1fe>
 80052ec:	f04f 30ff 	mov.w	r0, #4294967295
 80052f0:	b004      	add	sp, #16
 80052f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f6:	4835      	ldr	r0, [pc, #212]	; (80053cc <_printf_i+0x244>)
 80052f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052fc:	6829      	ldr	r1, [r5, #0]
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	f851 6b04 	ldr.w	r6, [r1], #4
 8005304:	6029      	str	r1, [r5, #0]
 8005306:	061d      	lsls	r5, r3, #24
 8005308:	d514      	bpl.n	8005334 <_printf_i+0x1ac>
 800530a:	07df      	lsls	r7, r3, #31
 800530c:	bf44      	itt	mi
 800530e:	f043 0320 	orrmi.w	r3, r3, #32
 8005312:	6023      	strmi	r3, [r4, #0]
 8005314:	b91e      	cbnz	r6, 800531e <_printf_i+0x196>
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	f023 0320 	bic.w	r3, r3, #32
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	2310      	movs	r3, #16
 8005320:	e7b0      	b.n	8005284 <_printf_i+0xfc>
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	f043 0320 	orr.w	r3, r3, #32
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	2378      	movs	r3, #120	; 0x78
 800532c:	4828      	ldr	r0, [pc, #160]	; (80053d0 <_printf_i+0x248>)
 800532e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005332:	e7e3      	b.n	80052fc <_printf_i+0x174>
 8005334:	0659      	lsls	r1, r3, #25
 8005336:	bf48      	it	mi
 8005338:	b2b6      	uxthmi	r6, r6
 800533a:	e7e6      	b.n	800530a <_printf_i+0x182>
 800533c:	4615      	mov	r5, r2
 800533e:	e7bb      	b.n	80052b8 <_printf_i+0x130>
 8005340:	682b      	ldr	r3, [r5, #0]
 8005342:	6826      	ldr	r6, [r4, #0]
 8005344:	6961      	ldr	r1, [r4, #20]
 8005346:	1d18      	adds	r0, r3, #4
 8005348:	6028      	str	r0, [r5, #0]
 800534a:	0635      	lsls	r5, r6, #24
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	d501      	bpl.n	8005354 <_printf_i+0x1cc>
 8005350:	6019      	str	r1, [r3, #0]
 8005352:	e002      	b.n	800535a <_printf_i+0x1d2>
 8005354:	0670      	lsls	r0, r6, #25
 8005356:	d5fb      	bpl.n	8005350 <_printf_i+0x1c8>
 8005358:	8019      	strh	r1, [r3, #0]
 800535a:	2300      	movs	r3, #0
 800535c:	6123      	str	r3, [r4, #16]
 800535e:	4615      	mov	r5, r2
 8005360:	e7ba      	b.n	80052d8 <_printf_i+0x150>
 8005362:	682b      	ldr	r3, [r5, #0]
 8005364:	1d1a      	adds	r2, r3, #4
 8005366:	602a      	str	r2, [r5, #0]
 8005368:	681d      	ldr	r5, [r3, #0]
 800536a:	6862      	ldr	r2, [r4, #4]
 800536c:	2100      	movs	r1, #0
 800536e:	4628      	mov	r0, r5
 8005370:	f7fa ff2e 	bl	80001d0 <memchr>
 8005374:	b108      	cbz	r0, 800537a <_printf_i+0x1f2>
 8005376:	1b40      	subs	r0, r0, r5
 8005378:	6060      	str	r0, [r4, #4]
 800537a:	6863      	ldr	r3, [r4, #4]
 800537c:	6123      	str	r3, [r4, #16]
 800537e:	2300      	movs	r3, #0
 8005380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005384:	e7a8      	b.n	80052d8 <_printf_i+0x150>
 8005386:	6923      	ldr	r3, [r4, #16]
 8005388:	462a      	mov	r2, r5
 800538a:	4649      	mov	r1, r9
 800538c:	4640      	mov	r0, r8
 800538e:	47d0      	blx	sl
 8005390:	3001      	adds	r0, #1
 8005392:	d0ab      	beq.n	80052ec <_printf_i+0x164>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	079b      	lsls	r3, r3, #30
 8005398:	d413      	bmi.n	80053c2 <_printf_i+0x23a>
 800539a:	68e0      	ldr	r0, [r4, #12]
 800539c:	9b03      	ldr	r3, [sp, #12]
 800539e:	4298      	cmp	r0, r3
 80053a0:	bfb8      	it	lt
 80053a2:	4618      	movlt	r0, r3
 80053a4:	e7a4      	b.n	80052f0 <_printf_i+0x168>
 80053a6:	2301      	movs	r3, #1
 80053a8:	4632      	mov	r2, r6
 80053aa:	4649      	mov	r1, r9
 80053ac:	4640      	mov	r0, r8
 80053ae:	47d0      	blx	sl
 80053b0:	3001      	adds	r0, #1
 80053b2:	d09b      	beq.n	80052ec <_printf_i+0x164>
 80053b4:	3501      	adds	r5, #1
 80053b6:	68e3      	ldr	r3, [r4, #12]
 80053b8:	9903      	ldr	r1, [sp, #12]
 80053ba:	1a5b      	subs	r3, r3, r1
 80053bc:	42ab      	cmp	r3, r5
 80053be:	dcf2      	bgt.n	80053a6 <_printf_i+0x21e>
 80053c0:	e7eb      	b.n	800539a <_printf_i+0x212>
 80053c2:	2500      	movs	r5, #0
 80053c4:	f104 0619 	add.w	r6, r4, #25
 80053c8:	e7f5      	b.n	80053b6 <_printf_i+0x22e>
 80053ca:	bf00      	nop
 80053cc:	08005661 	.word	0x08005661
 80053d0:	08005672 	.word	0x08005672

080053d4 <_sbrk_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	4d06      	ldr	r5, [pc, #24]	; (80053f0 <_sbrk_r+0x1c>)
 80053d8:	2300      	movs	r3, #0
 80053da:	4604      	mov	r4, r0
 80053dc:	4608      	mov	r0, r1
 80053de:	602b      	str	r3, [r5, #0]
 80053e0:	f7fb fbbc 	bl	8000b5c <_sbrk>
 80053e4:	1c43      	adds	r3, r0, #1
 80053e6:	d102      	bne.n	80053ee <_sbrk_r+0x1a>
 80053e8:	682b      	ldr	r3, [r5, #0]
 80053ea:	b103      	cbz	r3, 80053ee <_sbrk_r+0x1a>
 80053ec:	6023      	str	r3, [r4, #0]
 80053ee:	bd38      	pop	{r3, r4, r5, pc}
 80053f0:	2000017c 	.word	0x2000017c

080053f4 <__sread>:
 80053f4:	b510      	push	{r4, lr}
 80053f6:	460c      	mov	r4, r1
 80053f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053fc:	f000 f8a0 	bl	8005540 <_read_r>
 8005400:	2800      	cmp	r0, #0
 8005402:	bfab      	itete	ge
 8005404:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005406:	89a3      	ldrhlt	r3, [r4, #12]
 8005408:	181b      	addge	r3, r3, r0
 800540a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800540e:	bfac      	ite	ge
 8005410:	6563      	strge	r3, [r4, #84]	; 0x54
 8005412:	81a3      	strhlt	r3, [r4, #12]
 8005414:	bd10      	pop	{r4, pc}

08005416 <__swrite>:
 8005416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800541a:	461f      	mov	r7, r3
 800541c:	898b      	ldrh	r3, [r1, #12]
 800541e:	05db      	lsls	r3, r3, #23
 8005420:	4605      	mov	r5, r0
 8005422:	460c      	mov	r4, r1
 8005424:	4616      	mov	r6, r2
 8005426:	d505      	bpl.n	8005434 <__swrite+0x1e>
 8005428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800542c:	2302      	movs	r3, #2
 800542e:	2200      	movs	r2, #0
 8005430:	f000 f868 	bl	8005504 <_lseek_r>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800543a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800543e:	81a3      	strh	r3, [r4, #12]
 8005440:	4632      	mov	r2, r6
 8005442:	463b      	mov	r3, r7
 8005444:	4628      	mov	r0, r5
 8005446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800544a:	f000 b817 	b.w	800547c <_write_r>

0800544e <__sseek>:
 800544e:	b510      	push	{r4, lr}
 8005450:	460c      	mov	r4, r1
 8005452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005456:	f000 f855 	bl	8005504 <_lseek_r>
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	bf15      	itete	ne
 8005460:	6560      	strne	r0, [r4, #84]	; 0x54
 8005462:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005466:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800546a:	81a3      	strheq	r3, [r4, #12]
 800546c:	bf18      	it	ne
 800546e:	81a3      	strhne	r3, [r4, #12]
 8005470:	bd10      	pop	{r4, pc}

08005472 <__sclose>:
 8005472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005476:	f000 b813 	b.w	80054a0 <_close_r>
	...

0800547c <_write_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4d07      	ldr	r5, [pc, #28]	; (800549c <_write_r+0x20>)
 8005480:	4604      	mov	r4, r0
 8005482:	4608      	mov	r0, r1
 8005484:	4611      	mov	r1, r2
 8005486:	2200      	movs	r2, #0
 8005488:	602a      	str	r2, [r5, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	f7fb fb15 	bl	8000aba <_write>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	d102      	bne.n	800549a <_write_r+0x1e>
 8005494:	682b      	ldr	r3, [r5, #0]
 8005496:	b103      	cbz	r3, 800549a <_write_r+0x1e>
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	bd38      	pop	{r3, r4, r5, pc}
 800549c:	2000017c 	.word	0x2000017c

080054a0 <_close_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4d06      	ldr	r5, [pc, #24]	; (80054bc <_close_r+0x1c>)
 80054a4:	2300      	movs	r3, #0
 80054a6:	4604      	mov	r4, r0
 80054a8:	4608      	mov	r0, r1
 80054aa:	602b      	str	r3, [r5, #0]
 80054ac:	f7fb fb21 	bl	8000af2 <_close>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_close_r+0x1a>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_close_r+0x1a>
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	2000017c 	.word	0x2000017c

080054c0 <_fstat_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	4d07      	ldr	r5, [pc, #28]	; (80054e0 <_fstat_r+0x20>)
 80054c4:	2300      	movs	r3, #0
 80054c6:	4604      	mov	r4, r0
 80054c8:	4608      	mov	r0, r1
 80054ca:	4611      	mov	r1, r2
 80054cc:	602b      	str	r3, [r5, #0]
 80054ce:	f7fb fb1c 	bl	8000b0a <_fstat>
 80054d2:	1c43      	adds	r3, r0, #1
 80054d4:	d102      	bne.n	80054dc <_fstat_r+0x1c>
 80054d6:	682b      	ldr	r3, [r5, #0]
 80054d8:	b103      	cbz	r3, 80054dc <_fstat_r+0x1c>
 80054da:	6023      	str	r3, [r4, #0]
 80054dc:	bd38      	pop	{r3, r4, r5, pc}
 80054de:	bf00      	nop
 80054e0:	2000017c 	.word	0x2000017c

080054e4 <_isatty_r>:
 80054e4:	b538      	push	{r3, r4, r5, lr}
 80054e6:	4d06      	ldr	r5, [pc, #24]	; (8005500 <_isatty_r+0x1c>)
 80054e8:	2300      	movs	r3, #0
 80054ea:	4604      	mov	r4, r0
 80054ec:	4608      	mov	r0, r1
 80054ee:	602b      	str	r3, [r5, #0]
 80054f0:	f7fb fb1b 	bl	8000b2a <_isatty>
 80054f4:	1c43      	adds	r3, r0, #1
 80054f6:	d102      	bne.n	80054fe <_isatty_r+0x1a>
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	b103      	cbz	r3, 80054fe <_isatty_r+0x1a>
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	2000017c 	.word	0x2000017c

08005504 <_lseek_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	4d07      	ldr	r5, [pc, #28]	; (8005524 <_lseek_r+0x20>)
 8005508:	4604      	mov	r4, r0
 800550a:	4608      	mov	r0, r1
 800550c:	4611      	mov	r1, r2
 800550e:	2200      	movs	r2, #0
 8005510:	602a      	str	r2, [r5, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	f7fb fb14 	bl	8000b40 <_lseek>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d102      	bne.n	8005522 <_lseek_r+0x1e>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	b103      	cbz	r3, 8005522 <_lseek_r+0x1e>
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	bd38      	pop	{r3, r4, r5, pc}
 8005524:	2000017c 	.word	0x2000017c

08005528 <__malloc_lock>:
 8005528:	4801      	ldr	r0, [pc, #4]	; (8005530 <__malloc_lock+0x8>)
 800552a:	f7ff bb1d 	b.w	8004b68 <__retarget_lock_acquire_recursive>
 800552e:	bf00      	nop
 8005530:	20000170 	.word	0x20000170

08005534 <__malloc_unlock>:
 8005534:	4801      	ldr	r0, [pc, #4]	; (800553c <__malloc_unlock+0x8>)
 8005536:	f7ff bb18 	b.w	8004b6a <__retarget_lock_release_recursive>
 800553a:	bf00      	nop
 800553c:	20000170 	.word	0x20000170

08005540 <_read_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	4d07      	ldr	r5, [pc, #28]	; (8005560 <_read_r+0x20>)
 8005544:	4604      	mov	r4, r0
 8005546:	4608      	mov	r0, r1
 8005548:	4611      	mov	r1, r2
 800554a:	2200      	movs	r2, #0
 800554c:	602a      	str	r2, [r5, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	f7fb fa96 	bl	8000a80 <_read>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d102      	bne.n	800555e <_read_r+0x1e>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	b103      	cbz	r3, 800555e <_read_r+0x1e>
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	bd38      	pop	{r3, r4, r5, pc}
 8005560:	2000017c 	.word	0x2000017c

08005564 <_init>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr

08005570 <_fini>:
 8005570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005572:	bf00      	nop
 8005574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005576:	bc08      	pop	{r3}
 8005578:	469e      	mov	lr, r3
 800557a:	4770      	bx	lr
