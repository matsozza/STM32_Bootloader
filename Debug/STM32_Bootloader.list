
STM32_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058dc  080058dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080058dc  080058dc  000158dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058e4  080058e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080058ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000120  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000012c  2000012c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f527  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b3e  00000000  00000000  0002f563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  000320a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000be8  00000000  00000000  00032d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230ed  00000000  00000000  00033958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b7a  00000000  00000000  00056a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c91db  00000000  00000000  000675bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013079a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003258  00000000  00000000  001307ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800581c 	.word	0x0800581c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800581c 	.word	0x0800581c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <bootloader_init>:

inline static uint8_t _checkPacket(uint8_t* packet, uint8_t expectedPacket[4],  uint8_t significance);

/* Functions implementation --------------------------------------------------*/
void bootloader_init()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0
	uint32_t curr_SW_MAJOR = (uint32_t) *(uint32_t*)(sectorAddr[APP_FLASH_SECINI] + 0x200); // FIXME setup the cfg. mem section
 80004d2:	4b4f      	ldr	r3, [pc, #316]	; (8000610 <bootloader_init+0x144>)
 80004d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t curr_SW_MINOR = (uint32_t) *(uint32_t*)(sectorAddr[APP_FLASH_SECINI] + 0x204); // FIXME setup the cfg. mem section
 80004dc:	4b4c      	ldr	r3, [pc, #304]	; (8000610 <bootloader_init+0x144>)
 80004de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	62bb      	str	r3, [r7, #40]	; 0x28

	// 1_(0x80) Try to open communication with OTA serial interface 
	COMM_UART_SendData((uint8_t[4]) {0x80,0xFF,0xFF,0xFF}, 4, SERIAL_TIMEOUT);
 80004e6:	4b4b      	ldr	r3, [pc, #300]	; (8000614 <bootloader_init+0x148>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	61fb      	str	r3, [r7, #28]
 80004ec:	f107 031c 	add.w	r3, r7, #28
 80004f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004f4:	2104      	movs	r1, #4
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 fa72 	bl	80009e0 <COMM_UART_SendData>
	
	// 2_(0xC0) Check if MCU answered via OTA serial interface 
	if(COMM_UART_ReceiveData(rx, 4, SERIAL_TIMEOUT)!= HAL_OK) goto JUMP_TO_APPLICATION;
 80004fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000500:	2104      	movs	r1, #4
 8000502:	4845      	ldr	r0, [pc, #276]	; (8000618 <bootloader_init+0x14c>)
 8000504:	f000 fa54 	bl	80009b0 <COMM_UART_ReceiveData>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d16a      	bne.n	80005e4 <bootloader_init+0x118>

	if(_checkPacket(rx, (uint8_t[4]){0xC0,0xFF,0xFF,0xFF}, (uint8_t) 0b1000))
 800050e:	4b43      	ldr	r3, [pc, #268]	; (800061c <bootloader_init+0x150>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	2208      	movs	r2, #8
 800051a:	4619      	mov	r1, r3
 800051c:	483e      	ldr	r0, [pc, #248]	; (8000618 <bootloader_init+0x14c>)
 800051e:	f000 f9ef 	bl	8000900 <_checkPacket>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d05e      	beq.n	80005e6 <bootloader_init+0x11a>
	{
		// Check if the SW to be flashed is a different version from current MCU image
		if(!_checkPacket(rx, (uint8_t[4]){0xFF, (uint8_t)curr_SW_MAJOR, (uint8_t)curr_SW_MINOR, 0xFF}, (uint8_t) 0b0110))
 8000528:	23ff      	movs	r3, #255	; 0xff
 800052a:	743b      	strb	r3, [r7, #16]
 800052c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800052e:	b2db      	uxtb	r3, r3
 8000530:	747b      	strb	r3, [r7, #17]
 8000532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000534:	b2db      	uxtb	r3, r3
 8000536:	74bb      	strb	r3, [r7, #18]
 8000538:	23ff      	movs	r3, #255	; 0xff
 800053a:	74fb      	strb	r3, [r7, #19]
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	2206      	movs	r2, #6
 8000542:	4619      	mov	r1, r3
 8000544:	4834      	ldr	r0, [pc, #208]	; (8000618 <bootloader_init+0x14c>)
 8000546:	f000 f9db 	bl	8000900 <_checkPacket>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d13e      	bne.n	80005ce <bootloader_init+0x102>
		{
			// --------------- a_ Unlock memory + clear error flags ---------------
			__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 8000550:	4b33      	ldr	r3, [pc, #204]	; (8000620 <bootloader_init+0x154>)
 8000552:	22b3      	movs	r2, #179	; 0xb3
 8000554:	60da      	str	r2, [r3, #12]
			if(HAL_FLASH_Unlock() != HAL_OK) goto FLASH_ERROR; // Error in step 'a'
 8000556:	f000 ff9d 	bl	8001494 <HAL_FLASH_Unlock>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d121      	bne.n	80005a4 <bootloader_init+0xd8>

			// --------------- b_(0x81) Erase memory dedicated to appl. sw + inform serial interface  ---------------
			if(!_bootloader_eraseApplicationSectors()) goto FLASH_ERROR; // Error in step 'b'
 8000560:	f000 f868 	bl	8000634 <_bootloader_eraseApplicationSectors>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d01e      	beq.n	80005a8 <bootloader_init+0xdc>

			// --------------- c_(0x82) Send to serial interface -> ready to receive 'nOfPackets' of data  ---------------
			uint32_t nOfPackets = _bootloader_acknowledgePackets();
 800056a:	f000 f8a7 	bl	80006bc <_bootloader_acknowledgePackets>
 800056e:	6278      	str	r0, [r7, #36]	; 0x24
			if(nOfPackets == 0) goto FLASH_ERROR; // Error in step 'c'
 8000570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000572:	2b00      	cmp	r3, #0
 8000574:	d01a      	beq.n	80005ac <bootloader_init+0xe0>

			// --------------- d_ Start receiving data + flashing MCU sectors (dummy flashing) ---------------
			uint32_t nOfFlashed = _bootloader_receiveAndFlashPackets(nOfPackets);
 8000576:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000578:	f000 f8ec 	bl	8000754 <_bootloader_receiveAndFlashPackets>
 800057c:	6238      	str	r0, [r7, #32]

			// --------------- e_ Transmit feedback about flash process ---------------
			HAL_Delay(50); // Wait last transmission
 800057e:	2032      	movs	r0, #50	; 0x32
 8000580:	f000 fd52 	bl	8001028 <HAL_Delay>
			if(nOfFlashed == nOfPackets)
 8000584:	6a3a      	ldr	r2, [r7, #32]
 8000586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000588:	429a      	cmp	r2, r3
 800058a:	d111      	bne.n	80005b0 <bootloader_init+0xe4>
			{
				// TODO implement checksum / CRC in command '0x84'
				COMM_UART_SendData((uint8_t[4]) {0x84, 0xFF, 0xFF, 0xFF}, 4, SERIAL_TIMEOUT); // OK
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <bootloader_init+0x158>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800059a:	2104      	movs	r1, #4
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fa1f 	bl	80009e0 <COMM_UART_SendData>
 80005a2:	e011      	b.n	80005c8 <bootloader_init+0xfc>
			if(HAL_FLASH_Unlock() != HAL_OK) goto FLASH_ERROR; // Error in step 'a'
 80005a4:	bf00      	nop
 80005a6:	e004      	b.n	80005b2 <bootloader_init+0xe6>
			if(!_bootloader_eraseApplicationSectors()) goto FLASH_ERROR; // Error in step 'b'
 80005a8:	bf00      	nop
 80005aa:	e002      	b.n	80005b2 <bootloader_init+0xe6>
			if(nOfPackets == 0) goto FLASH_ERROR; // Error in step 'c'
 80005ac:	bf00      	nop
 80005ae:	e000      	b.n	80005b2 <bootloader_init+0xe6>
			}
			else
			{
FLASH_ERROR:
 80005b0:	bf00      	nop
				COMM_UART_SendData((uint8_t[4]) {0x8F, 0xFF, 0xFF, 0xFF}, 4, SERIAL_TIMEOUT); // NOK
 80005b2:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <bootloader_init+0x15c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c0:	2104      	movs	r1, #4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fa0c 	bl	80009e0 <COMM_UART_SendData>
			}
			HAL_FLASH_Lock();
 80005c8:	f000 ff86 	bl	80014d8 <HAL_FLASH_Lock>
 80005cc:	e00b      	b.n	80005e6 <bootloader_init+0x11a>
		}
		else
		{
			// --------------- a_(0x8E) Attempt to re-flash the same SW - Abort
			COMM_UART_SendData((uint8_t[4]) {0x8E,0xFF,0xFF,0xFF}, 4, SERIAL_TIMEOUT);
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <bootloader_init+0x160>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005da:	2104      	movs	r1, #4
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f9ff 	bl	80009e0 <COMM_UART_SendData>
 80005e2:	e000      	b.n	80005e6 <bootloader_init+0x11a>
	if(COMM_UART_ReceiveData(rx, 4, SERIAL_TIMEOUT)!= HAL_OK) goto JUMP_TO_APPLICATION;
 80005e4:	bf00      	nop
		}
	}
	
JUMP_TO_APPLICATION:
	// 3_(0x85) Jump to application
	HAL_Delay(50); // Wait last transmission
 80005e6:	2032      	movs	r0, #50	; 0x32
 80005e8:	f000 fd1e 	bl	8001028 <HAL_Delay>
	COMM_UART_SendData((uint8_t[4]){0x85,0xFF,0xFF,0xFF}, 4, SERIAL_TIMEOUT);
 80005ec:	4b10      	ldr	r3, [pc, #64]	; (8000630 <bootloader_init+0x164>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	61bb      	str	r3, [r7, #24]
 80005f2:	f107 0318 	add.w	r3, r7, #24
 80005f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005fa:	2104      	movs	r1, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f9ef 	bl	80009e0 <COMM_UART_SendData>
	_bootloader_loadApplication(); // Load application file
 8000602:	f000 f933 	bl	800086c <_bootloader_loadApplication>
}
 8000606:	bf00      	nop
 8000608:	3730      	adds	r7, #48	; 0x30
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	08040000 	.word	0x08040000
 8000614:	08005834 	.word	0x08005834
 8000618:	20000028 	.word	0x20000028
 800061c:	08005838 	.word	0x08005838
 8000620:	40023c00 	.word	0x40023c00
 8000624:	0800583c 	.word	0x0800583c
 8000628:	08005840 	.word	0x08005840
 800062c:	08005844 	.word	0x08005844
 8000630:	08005848 	.word	0x08005848

08000634 <_bootloader_eraseApplicationSectors>:

inline static uint8_t _bootloader_eraseApplicationSectors()
{	
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus;
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET); // Turn-off LED0
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000640:	481d      	ldr	r0, [pc, #116]	; (80006b8 <_bootloader_eraseApplicationSectors+0x84>)
 8000642:	f001 fa85 	bl	8001b50 <HAL_GPIO_WritePin>
	for(uint8_t idxS=APP_FLASH_SECINI; idxS <= APP_FLASH_SECFIN; idxS++ )
 8000646:	2306      	movs	r3, #6
 8000648:	71fb      	strb	r3, [r7, #7]
 800064a:	e027      	b.n	800069c <_bootloader_eraseApplicationSectors+0x68>
	{
		FLASH_Erase_Sector(idxS,FLASH_VOLTAGE_RANGE_3);
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	2102      	movs	r1, #2
 8000650:	4618      	mov	r0, r3
 8000652:	f001 f881 	bl	8001758 <FLASH_Erase_Sector>
		halStatus = COMM_UART_SendData((uint8_t[4]){0x81,
 8000656:	2381      	movs	r3, #129	; 0x81
 8000658:	703b      	strb	r3, [r7, #0]
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	707b      	strb	r3, [r7, #1]
										idxS,
										idxS == APP_FLASH_SECFIN,
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b0b      	cmp	r3, #11
 8000662:	bf0c      	ite	eq
 8000664:	2301      	moveq	r3, #1
 8000666:	2300      	movne	r3, #0
 8000668:	b2db      	uxtb	r3, r3
		halStatus = COMM_UART_SendData((uint8_t[4]){0x81,
 800066a:	70bb      	strb	r3, [r7, #2]
 800066c:	23ff      	movs	r3, #255	; 0xff
 800066e:	70fb      	strb	r3, [r7, #3]
 8000670:	463b      	mov	r3, r7
 8000672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000676:	2104      	movs	r1, #4
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f9b1 	bl	80009e0 <COMM_UART_SendData>
 800067e:	4603      	mov	r3, r0
 8000680:	71bb      	strb	r3, [r7, #6]
										0xFF}, 
										4, SERIAL_TIMEOUT); // Send (0x81 + sector no. + isLastSector) to confirm erased sector
		if(halStatus!= HAL_OK) return 0; // Error in TX
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <_bootloader_eraseApplicationSectors+0x58>
 8000688:	2300      	movs	r3, #0
 800068a:	e011      	b.n	80006b0 <_bootloader_eraseApplicationSectors+0x7c>
		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_9); // Toggle LED0
 800068c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <_bootloader_eraseApplicationSectors+0x84>)
 8000692:	f001 fa76 	bl	8001b82 <HAL_GPIO_TogglePin>
	for(uint8_t idxS=APP_FLASH_SECINI; idxS <= APP_FLASH_SECFIN; idxS++ )
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	3301      	adds	r3, #1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b0b      	cmp	r3, #11
 80006a0:	d9d4      	bls.n	800064c <_bootloader_eraseApplicationSectors+0x18>
	}
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET); // Turn-off LED0
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a8:	4803      	ldr	r0, [pc, #12]	; (80006b8 <_bootloader_eraseApplicationSectors+0x84>)
 80006aa:	f001 fa51 	bl	8001b50 <HAL_GPIO_WritePin>
	return 1; // OK
 80006ae:	2301      	movs	r3, #1
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021400 	.word	0x40021400

080006bc <_bootloader_acknowledgePackets>:

inline static uint32_t _bootloader_acknowledgePackets()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus;

	// Receive packets data in RX
	if(COMM_UART_ReceiveData(rx, 4, SERIAL_TIMEOUT) != HAL_OK) return 0; // Error in RX procedure
 80006c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006c6:	2104      	movs	r1, #4
 80006c8:	4820      	ldr	r0, [pc, #128]	; (800074c <_bootloader_acknowledgePackets+0x90>)
 80006ca:	f000 f971 	bl	80009b0 <COMM_UART_ReceiveData>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <_bootloader_acknowledgePackets+0x1c>
 80006d4:	2300      	movs	r3, #0
 80006d6:	e035      	b.n	8000744 <_bootloader_acknowledgePackets+0x88>
	
	// Check if a '0xC1' was received
	if(_checkPacket(rx, (uint8_t[4]){0xC1,0xFF,0xFF,0xFF}, (uint8_t) 0b1000))
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <_bootloader_acknowledgePackets+0x94>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2208      	movs	r2, #8
 80006e2:	4619      	mov	r1, r3
 80006e4:	4819      	ldr	r0, [pc, #100]	; (800074c <_bootloader_acknowledgePackets+0x90>)
 80006e6:	f000 f90b 	bl	8000900 <_checkPacket>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d028      	beq.n	8000742 <_bootloader_acknowledgePackets+0x86>
	{
		uint32_t nOfPackets = (uint32_t) ((rx[3]<<0) + (rx[2]<<8) + (rx[1]<<16)); // Parse packets data
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <_bootloader_acknowledgePackets+0x90>)
 80006f2:	78db      	ldrb	r3, [r3, #3]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <_bootloader_acknowledgePackets+0x90>)
 80006f8:	789b      	ldrb	r3, [r3, #2]
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	441a      	add	r2, r3
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <_bootloader_acknowledgePackets+0x90>)
 8000700:	785b      	ldrb	r3, [r3, #1]
 8000702:	041b      	lsls	r3, r3, #16
 8000704:	4413      	add	r3, r2
 8000706:	60fb      	str	r3, [r7, #12]
		halStatus = COMM_UART_SendData((uint8_t[4]) {0x82,
 8000708:	2382      	movs	r3, #130	; 0x82
 800070a:	703b      	strb	r3, [r7, #0]
			(uint8_t) ((nOfPackets & 0x00FF0000) >> 16),
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	0c1b      	lsrs	r3, r3, #16
 8000710:	b2db      	uxtb	r3, r3
		halStatus = COMM_UART_SendData((uint8_t[4]) {0x82,
 8000712:	707b      	strb	r3, [r7, #1]
			(uint8_t) ((nOfPackets & 0x0000FF00) >> 8),
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	0a1b      	lsrs	r3, r3, #8
 8000718:	b2db      	uxtb	r3, r3
		halStatus = COMM_UART_SendData((uint8_t[4]) {0x82,
 800071a:	70bb      	strb	r3, [r7, #2]
			(uint8_t) ((nOfPackets & 0x000000FF) >> 0)},
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	b2db      	uxtb	r3, r3
		halStatus = COMM_UART_SendData((uint8_t[4]) {0x82,
 8000720:	70fb      	strb	r3, [r7, #3]
 8000722:	463b      	mov	r3, r7
 8000724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000728:	2104      	movs	r1, #4
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f958 	bl	80009e0 <COMM_UART_SendData>
 8000730:	4603      	mov	r3, r0
 8000732:	72fb      	strb	r3, [r7, #11]
			4, SERIAL_TIMEOUT); // Answer back acknowledging the received 'nOfPackets' value
		if(halStatus != HAL_OK) return 0; // Error in TX procedure
 8000734:	7afb      	ldrb	r3, [r7, #11]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <_bootloader_acknowledgePackets+0x82>
 800073a:	2300      	movs	r3, #0
 800073c:	e002      	b.n	8000744 <_bootloader_acknowledgePackets+0x88>
		return nOfPackets;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	e000      	b.n	8000744 <_bootloader_acknowledgePackets+0x88>
	}
	else
	{
		return 0; //Error - Unexpected command from serial interface
 8000742:	2300      	movs	r3, #0
	}
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000028 	.word	0x20000028
 8000750:	0800584c 	.word	0x0800584c

08000754 <_bootloader_receiveAndFlashPackets>:

inline static uint32_t _bootloader_receiveAndFlashPackets(uint32_t nOfPackets)
{
 8000754:	b5b0      	push	{r4, r5, r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef halStatus;
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET); // Turn-off LED1
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000762:	483e      	ldr	r0, [pc, #248]	; (800085c <_bootloader_receiveAndFlashPackets+0x108>)
 8000764:	f001 f9f4 	bl	8001b50 <HAL_GPIO_WritePin>
	uint32_t nOfFlashed = 0; // Counter to track progress of flashed packets
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
	for(uint8_t nSector = APP_FLASH_SECINI; nSector<= APP_FLASH_SECFIN; nSector++)
 800076c:	2306      	movs	r3, #6
 800076e:	76fb      	strb	r3, [r7, #27]
 8000770:	e061      	b.n	8000836 <_bootloader_receiveAndFlashPackets+0xe2>
	{
		// FIXME this command cause all the memory to be shifted by 1 byte - Timing Critical
		//COMM_UART_SendData((uint8_t[4]) {0x83, nSector, 0x00, 0xFF}, 4, SERIAL_TIMEOUT); // Feedback when a sector is starting to be flashed

		// Write all the addresses contained in the current flash sector
		for(uint32_t addr=sectorAddr[nSector]; addr<(sectorAddr[nSector]+sectorSize[nSector]); addr+=0x04)
 8000772:	7efb      	ldrb	r3, [r7, #27]
 8000774:	4a3a      	ldr	r2, [pc, #232]	; (8000860 <_bootloader_receiveAndFlashPackets+0x10c>)
 8000776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	e03c      	b.n	80007f8 <_bootloader_receiveAndFlashPackets+0xa4>
		{
			// Receive a SW packet via serial + parse it (little-endian) + write it to flash memory
			halStatus = COMM_UART_ReceiveData(rx, 4, SERIAL_TIMEOUT);
 800077e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000782:	2104      	movs	r1, #4
 8000784:	4837      	ldr	r0, [pc, #220]	; (8000864 <_bootloader_receiveAndFlashPackets+0x110>)
 8000786:	f000 f913 	bl	80009b0 <COMM_UART_ReceiveData>
 800078a:	4603      	mov	r3, r0
 800078c:	74fb      	strb	r3, [r7, #19]
			if(halStatus != HAL_OK) goto END_PROGRAMMING;
 800078e:	7cfb      	ldrb	r3, [r7, #19]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d154      	bne.n	800083e <_bootloader_receiveAndFlashPackets+0xea>

			uint32_t packetData = (rx[3] << 24) + (rx[2] << 16) + (rx[1] << 8) + (rx[0] << 0);
 8000794:	4b33      	ldr	r3, [pc, #204]	; (8000864 <_bootloader_receiveAndFlashPackets+0x110>)
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	061a      	lsls	r2, r3, #24
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <_bootloader_receiveAndFlashPackets+0x110>)
 800079c:	789b      	ldrb	r3, [r3, #2]
 800079e:	041b      	lsls	r3, r3, #16
 80007a0:	441a      	add	r2, r3
 80007a2:	4b30      	ldr	r3, [pc, #192]	; (8000864 <_bootloader_receiveAndFlashPackets+0x110>)
 80007a4:	785b      	ldrb	r3, [r3, #1]
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	4413      	add	r3, r2
 80007aa:	4a2e      	ldr	r2, [pc, #184]	; (8000864 <_bootloader_receiveAndFlashPackets+0x110>)
 80007ac:	7812      	ldrb	r2, [r2, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	60fb      	str	r3, [r7, #12]
			halStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, (uint64_t) packetData);
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	2200      	movs	r2, #0
 80007b6:	461c      	mov	r4, r3
 80007b8:	4615      	mov	r5, r2
 80007ba:	4622      	mov	r2, r4
 80007bc:	462b      	mov	r3, r5
 80007be:	6979      	ldr	r1, [r7, #20]
 80007c0:	2002      	movs	r0, #2
 80007c2:	f000 fe13 	bl	80013ec <HAL_FLASH_Program>
 80007c6:	4603      	mov	r3, r0
 80007c8:	74fb      	strb	r3, [r7, #19]

			// Check if programmed memory position == received packet OR
			// HAL error during programming OR
			// All packets were flashed / finished
			if(*((uint32_t*)addr) != packetData
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d136      	bne.n	8000842 <_bootloader_receiveAndFlashPackets+0xee>
				|| halStatus != HAL_OK 
 80007d4:	7cfb      	ldrb	r3, [r7, #19]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d133      	bne.n	8000842 <_bootloader_receiveAndFlashPackets+0xee>
				|| ++nOfFlashed == nOfPackets)	goto END_PROGRAMMING;
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	3301      	adds	r3, #1
 80007de:	61fb      	str	r3, [r7, #28]
 80007e0:	69fa      	ldr	r2, [r7, #28]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d02c      	beq.n	8000842 <_bootloader_receiveAndFlashPackets+0xee>
			HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);
 80007e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ec:	481b      	ldr	r0, [pc, #108]	; (800085c <_bootloader_receiveAndFlashPackets+0x108>)
 80007ee:	f001 f9c8 	bl	8001b82 <HAL_GPIO_TogglePin>
		for(uint32_t addr=sectorAddr[nSector]; addr<(sectorAddr[nSector]+sectorSize[nSector]); addr+=0x04)
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	3304      	adds	r3, #4
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	7efb      	ldrb	r3, [r7, #27]
 80007fa:	4a19      	ldr	r2, [pc, #100]	; (8000860 <_bootloader_receiveAndFlashPackets+0x10c>)
 80007fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000800:	7efb      	ldrb	r3, [r7, #27]
 8000802:	4919      	ldr	r1, [pc, #100]	; (8000868 <_bootloader_receiveAndFlashPackets+0x114>)
 8000804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000808:	4413      	add	r3, r2
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	429a      	cmp	r2, r3
 800080e:	d3b6      	bcc.n	800077e <_bootloader_receiveAndFlashPackets+0x2a>
		}
		COMM_UART_SendData((uint8_t[4]) {0x83, nSector, 0x01, 0xFF}, 4, SERIAL_TIMEOUT); // Feedback when a sector is full
 8000810:	2383      	movs	r3, #131	; 0x83
 8000812:	723b      	strb	r3, [r7, #8]
 8000814:	7efb      	ldrb	r3, [r7, #27]
 8000816:	727b      	strb	r3, [r7, #9]
 8000818:	2301      	movs	r3, #1
 800081a:	72bb      	strb	r3, [r7, #10]
 800081c:	23ff      	movs	r3, #255	; 0xff
 800081e:	72fb      	strb	r3, [r7, #11]
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000828:	2104      	movs	r1, #4
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f8d8 	bl	80009e0 <COMM_UART_SendData>
	for(uint8_t nSector = APP_FLASH_SECINI; nSector<= APP_FLASH_SECFIN; nSector++)
 8000830:	7efb      	ldrb	r3, [r7, #27]
 8000832:	3301      	adds	r3, #1
 8000834:	76fb      	strb	r3, [r7, #27]
 8000836:	7efb      	ldrb	r3, [r7, #27]
 8000838:	2b0b      	cmp	r3, #11
 800083a:	d99a      	bls.n	8000772 <_bootloader_receiveAndFlashPackets+0x1e>
	}

END_PROGRAMMING:
 800083c:	e002      	b.n	8000844 <_bootloader_receiveAndFlashPackets+0xf0>
			if(halStatus != HAL_OK) goto END_PROGRAMMING;
 800083e:	bf00      	nop
 8000840:	e000      	b.n	8000844 <_bootloader_receiveAndFlashPackets+0xf0>
				|| ++nOfFlashed == nOfPackets)	goto END_PROGRAMMING;
 8000842:	bf00      	nop
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET); // Turn-off LED1
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <_bootloader_receiveAndFlashPackets+0x108>)
 800084c:	f001 f980 	bl	8001b50 <HAL_GPIO_WritePin>
	return nOfFlashed;
 8000850:	69fb      	ldr	r3, [r7, #28]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3720      	adds	r7, #32
 8000856:	46bd      	mov	sp, r7
 8000858:	bdb0      	pop	{r4, r5, r7, pc}
 800085a:	bf00      	nop
 800085c:	40021400 	.word	0x40021400
 8000860:	08005850 	.word	0x08005850
 8000864:	20000028 	.word	0x20000028
 8000868:	08005880 	.word	0x08005880

0800086c <_bootloader_loadApplication>:

/**
 * @brief This function ensures a 'clean-state' jump to the application code
 */
inline static void _bootloader_loadApplication()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000872:	b672      	cpsid	i
}
 8000874:	bf00      	nop
	// Disable all interrupts to perform all steps before loading application code
	__disable_irq();

	// Function pointer to application's reset handler
	void (*app_Reset_Handler)(void) =	(void*)(*(volatile uint32_t*)(sectorAddr[APP_FLASH_SECINI] + 0x04));
 8000876:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <_bootloader_loadApplication+0x80>)
 8000878:	3304      	adds	r3, #4
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	607b      	str	r3, [r7, #4]

	// Reset SCB parameters
    SCB -> ICSR = 0x00000000;   // reset value;
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <_bootloader_loadApplication+0x84>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
    SCB -> SCR = 0;
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <_bootloader_loadApplication+0x84>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
    SCB -> CCR = 0x00000200;    // reset value
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <_bootloader_loadApplication+0x84>)
 800088c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000890:	615a      	str	r2, [r3, #20]
    SCB -> SHP[0] = 0;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <_bootloader_loadApplication+0x84>)
 8000894:	2200      	movs	r2, #0
 8000896:	761a      	strb	r2, [r3, #24]
    SCB -> SHCSR = 0;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <_bootloader_loadApplication+0x84>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
    SCB -> CFSR = (SCB_CFSR_DIVBYZERO_Msk | SCB_CFSR_UNALIGNED_Msk | SCB_CFSR_UNDEFINSTR_Msk | SCB_CFSR_NOCP_Msk | SCB_CFSR_INVPC_Msk | SCB_CFSR_INVSTATE_Msk);
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <_bootloader_loadApplication+0x84>)
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <_bootloader_loadApplication+0x88>)
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28
    SCB -> HFSR = (SCB_HFSR_DEBUGEVT_Msk | SCB_HFSR_FORCED_Msk | SCB_HFSR_VECTTBL_Msk);
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <_bootloader_loadApplication+0x84>)
 80008a6:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <_bootloader_loadApplication+0x8c>)
 80008a8:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set the Vector Table Offset Register (VTOR) to the application vector table
	SCB -> VTOR = sectorAddr[APP_FLASH_SECINI];
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <_bootloader_loadApplication+0x84>)
 80008ac:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <_bootloader_loadApplication+0x80>)
 80008ae:	609a      	str	r2, [r3, #8]

    // Set the Main Stack Pointer (MSP) to the value at the beginning of the application's flash section
	__set_MSP(*(volatile uint32_t *) sectorAddr[APP_FLASH_SECINI]);
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <_bootloader_loadApplication+0x80>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	f383 8808 	msr	MSP, r3
}
 80008bc:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008be:	f3bf 8f4f 	dsb	sy
}
 80008c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008c4:	f3bf 8f6f 	isb	sy
}
 80008c8:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80008ca:	b662      	cpsie	i
}
 80008cc:	bf00      	nop

	// Re-enable all interrupts
	__enable_irq();

    // Disable / Reset SysTick before jumping to application
    SysTick -> CTRL = 0;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <_bootloader_loadApplication+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
    SysTick -> LOAD = 0;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <_bootloader_loadApplication+0x90>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
    SysTick -> VAL  = 0;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <_bootloader_loadApplication+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]

	// Call application's reset handler (starting point)
	app_Reset_Handler();
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4798      	blx	r3
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	08040000 	.word	0x08040000
 80008f0:	e000ed00 	.word	0xe000ed00
 80008f4:	030f0000 	.word	0x030f0000
 80008f8:	c0000002 	.word	0xc0000002
 80008fc:	e000e010 	.word	0xe000e010

08000900 <_checkPacket>:

/*
 * @brief: Method to check if the contents of a packet meet the required content according to the significance.
 */
inline static uint8_t _checkPacket(uint8_t* packet, uint8_t expectedPacket[4],  uint8_t significance)
{
 8000900:	b480      	push	{r7}
 8000902:	b087      	sub	sp, #28
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	4613      	mov	r3, r2
 800090c:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	75fb      	strb	r3, [r7, #23]

	if(*packet	   == expectedPacket[0] || ((significance & 0b1000) == 0)) result |= (result | 0b1000);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	429a      	cmp	r2, r3
 800091c:	d004      	beq.n	8000928 <_checkPacket+0x28>
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	2b00      	cmp	r3, #0
 8000926:	d103      	bne.n	8000930 <_checkPacket+0x30>
 8000928:	7dfb      	ldrb	r3, [r7, #23]
 800092a:	f043 0308 	orr.w	r3, r3, #8
 800092e:	75fb      	strb	r3, [r7, #23]
	if(*(packet+1) == expectedPacket[1] || ((significance & 0b0100) == 0)) result |= (result | 0b0100);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	3301      	adds	r3, #1
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	3301      	adds	r3, #1
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	429a      	cmp	r2, r3
 800093e:	d004      	beq.n	800094a <_checkPacket+0x4a>
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	2b00      	cmp	r3, #0
 8000948:	d103      	bne.n	8000952 <_checkPacket+0x52>
 800094a:	7dfb      	ldrb	r3, [r7, #23]
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	75fb      	strb	r3, [r7, #23]
	if(*(packet+2) == expectedPacket[2] || ((significance & 0b0010) == 0)) result |= (result | 0b0010);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	3302      	adds	r3, #2
 8000956:	781a      	ldrb	r2, [r3, #0]
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	3302      	adds	r3, #2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	429a      	cmp	r2, r3
 8000960:	d004      	beq.n	800096c <_checkPacket+0x6c>
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 0302 	and.w	r3, r3, #2
 8000968:	2b00      	cmp	r3, #0
 800096a:	d103      	bne.n	8000974 <_checkPacket+0x74>
 800096c:	7dfb      	ldrb	r3, [r7, #23]
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	75fb      	strb	r3, [r7, #23]
	if(*(packet+3) == expectedPacket[3] || ((significance & 0b0001) == 0)) result |= (result | 0b0001);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	3303      	adds	r3, #3
 8000978:	781a      	ldrb	r2, [r3, #0]
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	3303      	adds	r3, #3
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	429a      	cmp	r2, r3
 8000982:	d004      	beq.n	800098e <_checkPacket+0x8e>
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	2b00      	cmp	r3, #0
 800098c:	d103      	bne.n	8000996 <_checkPacket+0x96>
 800098e:	7dfb      	ldrb	r3, [r7, #23]
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	75fb      	strb	r3, [r7, #23]

	return (result == 0b1111);
 8000996:	7dfb      	ldrb	r3, [r7, #23]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	bf0c      	ite	eq
 800099c:	2301      	moveq	r3, #1
 800099e:	2300      	movne	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	371c      	adds	r7, #28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <COMM_UART_ReceiveData>:
static uint32_t _ticToc(void);

/* Functions implementation --------------------------------------------------*/

HAL_StatusTypeDef COMM_UART_ReceiveData(uint8_t* dataPtr, uint8_t size, uint32_t delay)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	460b      	mov	r3, r1
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef halStatus;
  halStatus = HAL_UART_Receive(&UART_DEVICE_HANDLER , dataPtr, size, delay);
 80009be:	7afb      	ldrb	r3, [r7, #11]
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	68f9      	ldr	r1, [r7, #12]
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <COMM_UART_ReceiveData+0x2c>)
 80009c8:	f002 ffb8 	bl	800393c <HAL_UART_Receive>
 80009cc:	4603      	mov	r3, r0
 80009ce:	75fb      	strb	r3, [r7, #23]
  return halStatus;
 80009d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000b0 	.word	0x200000b0

080009e0 <COMM_UART_SendData>:

// Transmit string via UART in blocking mode
HAL_StatusTypeDef COMM_UART_SendData(uint8_t* dataPtr, uint8_t size, uint32_t delay)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	460b      	mov	r3, r1
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	72fb      	strb	r3, [r7, #11]
  // Start data transmission (force transmission)
  HAL_StatusTypeDef halStatus;
  do{
    halStatus = HAL_UART_Transmit(&UART_DEVICE_HANDLER, dataPtr , size, delay);
 80009ee:	7afb      	ldrb	r3, [r7, #11]
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	68f9      	ldr	r1, [r7, #12]
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <COMM_UART_SendData+0x30>)
 80009f8:	f002 ff0e 	bl	8003818 <HAL_UART_Transmit>
 80009fc:	4603      	mov	r3, r0
 80009fe:	75fb      	strb	r3, [r7, #23]
  }
  while(halStatus == HAL_BUSY);
 8000a00:	7dfb      	ldrb	r3, [r7, #23]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d0f3      	beq.n	80009ee <COMM_UART_SendData+0xe>
  return halStatus;
 8000a06:	7dfb      	ldrb	r3, [r7, #23]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200000b0 	.word	0x200000b0

08000a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a18:	f000 fa94 	bl	8000f44 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1c:	f000 f80c 	bl	8000a38 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a20:	f000 f8bc 	bl	8000b9c <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000a24:	f000 f870 	bl	8000b08 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000a28:	f004 fcd2 	bl	80053d0 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8000a2c:	f000 f88c 	bl	8000b48 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  //initialise_monitor_handles(); // Semi-hosting

  bootloader_init(); // Start bootloader
 8000a30:	f7ff fd4c 	bl	80004cc <bootloader_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <main+0x20>
	...

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b094      	sub	sp, #80	; 0x50
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 0320 	add.w	r3, r7, #32
 8000a42:	2230      	movs	r2, #48	; 0x30
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f004 fee0 	bl	800580c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <SystemClock_Config+0xc8>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	4a26      	ldr	r2, [pc, #152]	; (8000b00 <SystemClock_Config+0xc8>)
 8000a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6c:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <SystemClock_Config+0xc8>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <SystemClock_Config+0xcc>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a20      	ldr	r2, [pc, #128]	; (8000b04 <SystemClock_Config+0xcc>)
 8000a82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <SystemClock_Config+0xcc>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a94:	2302      	movs	r3, #2
 8000a96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000aa8:	2310      	movs	r3, #16
 8000aaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000aac:	23c0      	movs	r3, #192	; 0xc0
 8000aae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab8:	f107 0320 	add.w	r3, r7, #32
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 f87b 	bl	8001bb8 <HAL_RCC_OscConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ac8:	f000 f8e4 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000acc:	230f      	movs	r3, #15
 8000ace:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 fade 	bl	80020a8 <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000af2:	f000 f8cf 	bl	8000c94 <Error_Handler>
  }
}
 8000af6:	bf00      	nop
 8000af8:	3750      	adds	r7, #80	; 0x50
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40007000 	.word	0x40007000

08000b08 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_SDIO_SD_Init+0x38>)
 8000b0e:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <MX_SDIO_SD_Init+0x3c>)
 8000b10:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_SDIO_SD_Init+0x38>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_SDIO_SD_Init+0x38>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_SDIO_SD_Init+0x38>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_SDIO_SD_Init+0x38>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <MX_SDIO_SD_Init+0x38>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <MX_SDIO_SD_Init+0x38>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	2000002c 	.word	0x2000002c
 8000b44:	40012c00 	.word	0x40012c00

08000b48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <MX_USART2_UART_Init+0x48>)
 8000b4e:	4a11      	ldr	r2, [pc, #68]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 576000;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_USART2_UART_Init+0x48>)
 8000b54:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <MX_USART2_UART_Init+0x50>)
 8000b56:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <MX_USART2_UART_Init+0x48>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USART2_UART_Init+0x48>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <MX_USART2_UART_Init+0x48>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USART2_UART_Init+0x48>)
 8000b6c:	220c      	movs	r2, #12
 8000b6e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <MX_USART2_UART_Init+0x48>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_USART2_UART_Init+0x48>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_USART2_UART_Init+0x48>)
 8000b7e:	f002 fdfe 	bl	800377e <HAL_UART_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000b88:	f000 f884 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200000b0 	.word	0x200000b0
 8000b94:	40004400 	.word	0x40004400
 8000b98:	0008ca00 	.word	0x0008ca00

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b34      	ldr	r3, [pc, #208]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a33      	ldr	r2, [pc, #204]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bbc:	f043 0310 	orr.w	r3, r3, #16
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b31      	ldr	r3, [pc, #196]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a2c      	ldr	r2, [pc, #176]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bd8:	f043 0320 	orr.w	r3, r3, #32
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0320 	and.w	r3, r3, #32
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a25      	ldr	r2, [pc, #148]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a1e      	ldr	r2, [pc, #120]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000c44:	4811      	ldr	r0, [pc, #68]	; (8000c8c <MX_GPIO_Init+0xf0>)
 8000c46:	f000 ff83 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480c      	ldr	r0, [pc, #48]	; (8000c90 <MX_GPIO_Init+0xf4>)
 8000c5e:	f000 fdc3 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000c62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_GPIO_Init+0xf0>)
 8000c7c:	f000 fdb4 	bl	80017e8 <HAL_GPIO_Init>

}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40021400 	.word	0x40021400
 8000c90:	40021000 	.word	0x40021000

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <Error_Handler+0x8>
	...

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_MspInit+0x4c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a28      	ldr	r2, [pc, #160]	; (8000db0 <HAL_SD_MspInit+0xc0>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d14a      	bne.n	8000da8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <HAL_SD_MspInit+0xc4>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a26      	ldr	r2, [pc, #152]	; (8000db4 <HAL_SD_MspInit+0xc4>)
 8000d1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <HAL_SD_MspInit+0xc4>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <HAL_SD_MspInit+0xc4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <HAL_SD_MspInit+0xc4>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <HAL_SD_MspInit+0xc4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HAL_SD_MspInit+0xc4>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a18      	ldr	r2, [pc, #96]	; (8000db4 <HAL_SD_MspInit+0xc4>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <HAL_SD_MspInit+0xc4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d66:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000d6a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d78:	230c      	movs	r3, #12
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	480d      	ldr	r0, [pc, #52]	; (8000db8 <HAL_SD_MspInit+0xc8>)
 8000d84:	f000 fd30 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d98:	230c      	movs	r3, #12
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <HAL_SD_MspInit+0xcc>)
 8000da4:	f000 fd20 	bl	80017e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	; 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40012c00 	.word	0x40012c00
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020800 	.word	0x40020800
 8000dbc:	40020c00 	.word	0x40020c00

08000dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <HAL_UART_MspInit+0x94>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d133      	bne.n	8000e4a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e1a:	230c      	movs	r3, #12
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <HAL_UART_MspInit+0x9c>)
 8000e36:	f000 fcd7 	bl	80017e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2026      	movs	r0, #38	; 0x26
 8000e40:	f000 fa07 	bl	8001252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e44:	2026      	movs	r0, #38	; 0x26
 8000e46:	f000 fa20 	bl	800128a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40004400 	.word	0x40004400
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8000e6a:	f000 fa1c 	bl	80012a6 <HAL_NVIC_SystemReset>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <HardFault_Handler+0x8>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <MemManage_Handler+0x4>

08000e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb0:	f000 f89a 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <USART2_IRQHandler+0x10>)
 8000ebe:	f002 fddf 	bl	8003a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200000b0 	.word	0x200000b0

08000ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <SystemInit+0x20>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <SystemInit+0x20>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ef6:	490e      	ldr	r1, [pc, #56]	; (8000f30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f0c:	4c0b      	ldr	r4, [pc, #44]	; (8000f3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f1a:	f7ff ffd7 	bl	8000ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f004 fc51 	bl	80057c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff fd77 	bl	8000a14 <main>
  bx  lr    
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f34:	080058ec 	.word	0x080058ec
  ldr r2, =_sbss
 8000f38:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f3c:	2000012c 	.word	0x2000012c

08000f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_Init+0x40>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_Init+0x40>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_Init+0x40>)
 8000f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f965 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	200f      	movs	r0, #15
 8000f74:	f000 f808 	bl	8000f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fe92 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x54>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x58>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f981 	bl	80012ae <HAL_SYSTICK_Config>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00e      	b.n	8000fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d80a      	bhi.n	8000fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f000 f945 	bl	8001252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_InitTick+0x5c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008
 800100c:	200000f4 	.word	0x200000f4

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200000f4 	.word	0x200000f4

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff ffee 	bl	8001010 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_Delay+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffde 	bl	8001010 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008

08001070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db0b      	blt.n	80010fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f003 021f 	and.w	r2, r3, #31
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <__NVIC_EnableIRQ+0x38>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	2001      	movs	r0, #1
 80010f6:	fa00 f202 	lsl.w	r2, r0, r2
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	; (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80011d0:	f3bf 8f4f 	dsb	sy
}
 80011d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <__NVIC_SystemReset+0x24>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80011de:	4904      	ldr	r1, [pc, #16]	; (80011f0 <__NVIC_SystemReset+0x24>)
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_SystemReset+0x28>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80011e6:	f3bf 8f4f 	dsb	sy
}
 80011ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <__NVIC_SystemReset+0x20>
 80011f0:	e000ed00 	.word	0xe000ed00
 80011f4:	05fa0004 	.word	0x05fa0004

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001208:	d301      	bcc.n	800120e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120a:	2301      	movs	r3, #1
 800120c:	e00f      	b.n	800122e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <SysTick_Config+0x40>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001216:	210f      	movs	r1, #15
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f7ff ff78 	bl	8001110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SysTick_Config+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SysTick_Config+0x40>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff13 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001264:	f7ff ff28 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 8001268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff ff78 	bl	8001164 <NVIC_EncodePriority>
 8001274:	4602      	mov	r2, r0
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff47 	bl	8001110 <__NVIC_SetPriority>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff1b 	bl	80010d4 <__NVIC_EnableIRQ>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80012aa:	f7ff ff8f 	bl	80011cc <__NVIC_SystemReset>

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ff9e 	bl	80011f8 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff fe9c 	bl	8001010 <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d008      	beq.n	80012f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e052      	b.n	800139e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0216 	bic.w	r2, r2, #22
 8001306:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001316:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	2b00      	cmp	r3, #0
 800131e:	d103      	bne.n	8001328 <HAL_DMA_Abort+0x62>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001324:	2b00      	cmp	r3, #0
 8001326:	d007      	beq.n	8001338 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0208 	bic.w	r2, r2, #8
 8001336:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 0201 	bic.w	r2, r2, #1
 8001346:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001348:	e013      	b.n	8001372 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800134a:	f7ff fe61 	bl	8001010 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b05      	cmp	r3, #5
 8001356:	d90c      	bls.n	8001372 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2220      	movs	r2, #32
 800135c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2203      	movs	r2, #3
 8001362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e015      	b.n	800139e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1e4      	bne.n	800134a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001384:	223f      	movs	r2, #63	; 0x3f
 8001386:	409a      	lsls	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d004      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2280      	movs	r2, #128	; 0x80
 80013be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e00c      	b.n	80013de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2205      	movs	r2, #5
 80013c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0201 	bic.w	r2, r2, #1
 80013da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80013fe:	4b23      	ldr	r3, [pc, #140]	; (800148c <HAL_FLASH_Program+0xa0>)
 8001400:	7e1b      	ldrb	r3, [r3, #24]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HAL_FLASH_Program+0x1e>
 8001406:	2302      	movs	r3, #2
 8001408:	e03b      	b.n	8001482 <HAL_FLASH_Program+0x96>
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_FLASH_Program+0xa0>)
 800140c:	2201      	movs	r2, #1
 800140e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001410:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001414:	f000 f870 	bl	80014f8 <FLASH_WaitForLastOperation>
 8001418:	4603      	mov	r3, r0
 800141a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800141c:	7dfb      	ldrb	r3, [r7, #23]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d12b      	bne.n	800147a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d105      	bne.n	8001434 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001428:	783b      	ldrb	r3, [r7, #0]
 800142a:	4619      	mov	r1, r3
 800142c:	68b8      	ldr	r0, [r7, #8]
 800142e:	f000 f91b 	bl	8001668 <FLASH_Program_Byte>
 8001432:	e016      	b.n	8001462 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d105      	bne.n	8001446 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800143a:	883b      	ldrh	r3, [r7, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	68b8      	ldr	r0, [r7, #8]
 8001440:	f000 f8ee 	bl	8001620 <FLASH_Program_HalfWord>
 8001444:	e00d      	b.n	8001462 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d105      	bne.n	8001458 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	4619      	mov	r1, r3
 8001450:	68b8      	ldr	r0, [r7, #8]
 8001452:	f000 f8c3 	bl	80015dc <FLASH_Program_Word>
 8001456:	e004      	b.n	8001462 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800145c:	68b8      	ldr	r0, [r7, #8]
 800145e:	f000 f88b 	bl	8001578 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001462:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001466:	f000 f847 	bl	80014f8 <FLASH_WaitForLastOperation>
 800146a:	4603      	mov	r3, r0
 800146c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_FLASH_Program+0xa4>)
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	4a07      	ldr	r2, [pc, #28]	; (8001490 <HAL_FLASH_Program+0xa4>)
 8001474:	f023 0301 	bic.w	r3, r3, #1
 8001478:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <HAL_FLASH_Program+0xa0>)
 800147c:	2200      	movs	r2, #0
 800147e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001480:	7dfb      	ldrb	r3, [r7, #23]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200000f8 	.word	0x200000f8
 8001490:	40023c00 	.word	0x40023c00

08001494 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_FLASH_Unlock+0x38>)
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	da0b      	bge.n	80014be <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_FLASH_Unlock+0x38>)
 80014a8:	4a09      	ldr	r2, [pc, #36]	; (80014d0 <HAL_FLASH_Unlock+0x3c>)
 80014aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <HAL_FLASH_Unlock+0x38>)
 80014ae:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <HAL_FLASH_Unlock+0x40>)
 80014b0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_FLASH_Unlock+0x38>)
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	da01      	bge.n	80014be <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80014be:	79fb      	ldrb	r3, [r7, #7]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	40023c00 	.word	0x40023c00
 80014d0:	45670123 	.word	0x45670123
 80014d4:	cdef89ab 	.word	0xcdef89ab

080014d8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_FLASH_Lock+0x1c>)
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_FLASH_Lock+0x1c>)
 80014e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014e6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40023c00 	.word	0x40023c00

080014f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <FLASH_WaitForLastOperation+0x78>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800150a:	f7ff fd81 	bl	8001010 <HAL_GetTick>
 800150e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001510:	e010      	b.n	8001534 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001518:	d00c      	beq.n	8001534 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d007      	beq.n	8001530 <FLASH_WaitForLastOperation+0x38>
 8001520:	f7ff fd76 	bl	8001010 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	d201      	bcs.n	8001534 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e019      	b.n	8001568 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <FLASH_WaitForLastOperation+0x7c>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1e8      	bne.n	8001512 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <FLASH_WaitForLastOperation+0x7c>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <FLASH_WaitForLastOperation+0x7c>)
 800154e:	2201      	movs	r2, #1
 8001550:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <FLASH_WaitForLastOperation+0x7c>)
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800155e:	f000 f8a5 	bl	80016ac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
  
}  
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200000f8 	.word	0x200000f8
 8001574:	40023c00 	.word	0x40023c00

08001578 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <FLASH_Program_DoubleWord+0x60>)
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <FLASH_Program_DoubleWord+0x60>)
 800158a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800158e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <FLASH_Program_DoubleWord+0x60>)
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <FLASH_Program_DoubleWord+0x60>)
 8001596:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800159a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <FLASH_Program_DoubleWord+0x60>)
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <FLASH_Program_DoubleWord+0x60>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80015ae:	f3bf 8f6f 	isb	sy
}
 80015b2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80015b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	000a      	movs	r2, r1
 80015c2:	2300      	movs	r3, #0
 80015c4:	68f9      	ldr	r1, [r7, #12]
 80015c6:	3104      	adds	r1, #4
 80015c8:	4613      	mov	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	40023c00 	.word	0x40023c00

080015dc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <FLASH_Program_Word+0x40>)
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	4a0c      	ldr	r2, [pc, #48]	; (800161c <FLASH_Program_Word+0x40>)
 80015ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <FLASH_Program_Word+0x40>)
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	4a09      	ldr	r2, [pc, #36]	; (800161c <FLASH_Program_Word+0x40>)
 80015f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <FLASH_Program_Word+0x40>)
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	4a06      	ldr	r2, [pc, #24]	; (800161c <FLASH_Program_Word+0x40>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	601a      	str	r2, [r3, #0]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	40023c00 	.word	0x40023c00

08001620 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800162c:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <FLASH_Program_HalfWord+0x44>)
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	4a0c      	ldr	r2, [pc, #48]	; (8001664 <FLASH_Program_HalfWord+0x44>)
 8001632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001636:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <FLASH_Program_HalfWord+0x44>)
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	4a09      	ldr	r2, [pc, #36]	; (8001664 <FLASH_Program_HalfWord+0x44>)
 800163e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001642:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <FLASH_Program_HalfWord+0x44>)
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <FLASH_Program_HalfWord+0x44>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	801a      	strh	r2, [r3, #0]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40023c00 	.word	0x40023c00

08001668 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <FLASH_Program_Byte+0x40>)
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <FLASH_Program_Byte+0x40>)
 800167a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800167e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <FLASH_Program_Byte+0x40>)
 8001682:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <FLASH_Program_Byte+0x40>)
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <FLASH_Program_Byte+0x40>)
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <FLASH_Program_Byte+0x40>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	701a      	strb	r2, [r3, #0]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023c00 	.word	0x40023c00

080016ac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80016b0:	4b27      	ldr	r3, [pc, #156]	; (8001750 <FLASH_SetErrorCode+0xa4>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <FLASH_SetErrorCode+0xa8>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	f043 0310 	orr.w	r3, r3, #16
 80016c4:	4a23      	ldr	r2, [pc, #140]	; (8001754 <FLASH_SetErrorCode+0xa8>)
 80016c6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80016c8:	4b21      	ldr	r3, [pc, #132]	; (8001750 <FLASH_SetErrorCode+0xa4>)
 80016ca:	2210      	movs	r2, #16
 80016cc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <FLASH_SetErrorCode+0xa4>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f003 0320 	and.w	r3, r3, #32
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d008      	beq.n	80016ec <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80016da:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <FLASH_SetErrorCode+0xa8>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f043 0308 	orr.w	r3, r3, #8
 80016e2:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <FLASH_SetErrorCode+0xa8>)
 80016e4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <FLASH_SetErrorCode+0xa4>)
 80016e8:	2220      	movs	r2, #32
 80016ea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <FLASH_SetErrorCode+0xa4>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <FLASH_SetErrorCode+0xa8>)
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	4a14      	ldr	r2, [pc, #80]	; (8001754 <FLASH_SetErrorCode+0xa8>)
 8001702:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <FLASH_SetErrorCode+0xa4>)
 8001706:	2240      	movs	r2, #64	; 0x40
 8001708:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <FLASH_SetErrorCode+0xa4>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001712:	2b00      	cmp	r3, #0
 8001714:	d008      	beq.n	8001728 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <FLASH_SetErrorCode+0xa8>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f043 0302 	orr.w	r3, r3, #2
 800171e:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <FLASH_SetErrorCode+0xa8>)
 8001720:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <FLASH_SetErrorCode+0xa4>)
 8001724:	2280      	movs	r2, #128	; 0x80
 8001726:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <FLASH_SetErrorCode+0xa4>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <FLASH_SetErrorCode+0xa8>)
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	f043 0320 	orr.w	r3, r3, #32
 800173c:	4a05      	ldr	r2, [pc, #20]	; (8001754 <FLASH_SetErrorCode+0xa8>)
 800173e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <FLASH_SetErrorCode+0xa4>)
 8001742:	2202      	movs	r2, #2
 8001744:	60da      	str	r2, [r3, #12]
  }
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	40023c00 	.word	0x40023c00
 8001754:	200000f8 	.word	0x200000f8

08001758 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e010      	b.n	8001796 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d103      	bne.n	8001782 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800177a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	e009      	b.n	8001796 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d103      	bne.n	8001790 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	e002      	b.n	8001796 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001790:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001794:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <FLASH_Erase_Sector+0x8c>)
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <FLASH_Erase_Sector+0x8c>)
 800179c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <FLASH_Erase_Sector+0x8c>)
 80017a4:	691a      	ldr	r2, [r3, #16]
 80017a6:	490f      	ldr	r1, [pc, #60]	; (80017e4 <FLASH_Erase_Sector+0x8c>)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80017ae:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <FLASH_Erase_Sector+0x8c>)
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	4a0c      	ldr	r2, [pc, #48]	; (80017e4 <FLASH_Erase_Sector+0x8c>)
 80017b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <FLASH_Erase_Sector+0x8c>)
 80017bc:	691a      	ldr	r2, [r3, #16]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4313      	orrs	r3, r2
 80017c4:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <FLASH_Erase_Sector+0x8c>)
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <FLASH_Erase_Sector+0x8c>)
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <FLASH_Erase_Sector+0x8c>)
 80017d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d6:	6113      	str	r3, [r2, #16]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40023c00 	.word	0x40023c00

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
 8001802:	e16b      	b.n	8001adc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001804:	2201      	movs	r2, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	429a      	cmp	r2, r3
 800181e:	f040 815a 	bne.w	8001ad6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d005      	beq.n	800183a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001836:	2b02      	cmp	r3, #2
 8001838:	d130      	bne.n	800189c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	2203      	movs	r2, #3
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001870:	2201      	movs	r2, #1
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 0201 	and.w	r2, r3, #1
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d017      	beq.n	80018d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d123      	bne.n	800192c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	08da      	lsrs	r2, r3, #3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3208      	adds	r2, #8
 80018ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	220f      	movs	r2, #15
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	08da      	lsrs	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3208      	adds	r2, #8
 8001926:	69b9      	ldr	r1, [r7, #24]
 8001928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	2203      	movs	r2, #3
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0203 	and.w	r2, r3, #3
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80b4 	beq.w	8001ad6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b60      	ldr	r3, [pc, #384]	; (8001af4 <HAL_GPIO_Init+0x30c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a5f      	ldr	r2, [pc, #380]	; (8001af4 <HAL_GPIO_Init+0x30c>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b5d      	ldr	r3, [pc, #372]	; (8001af4 <HAL_GPIO_Init+0x30c>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800198a:	4a5b      	ldr	r2, [pc, #364]	; (8001af8 <HAL_GPIO_Init+0x310>)
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	3302      	adds	r3, #2
 8001992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	220f      	movs	r2, #15
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a52      	ldr	r2, [pc, #328]	; (8001afc <HAL_GPIO_Init+0x314>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d02b      	beq.n	8001a0e <HAL_GPIO_Init+0x226>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a51      	ldr	r2, [pc, #324]	; (8001b00 <HAL_GPIO_Init+0x318>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d025      	beq.n	8001a0a <HAL_GPIO_Init+0x222>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a50      	ldr	r2, [pc, #320]	; (8001b04 <HAL_GPIO_Init+0x31c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d01f      	beq.n	8001a06 <HAL_GPIO_Init+0x21e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4f      	ldr	r2, [pc, #316]	; (8001b08 <HAL_GPIO_Init+0x320>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d019      	beq.n	8001a02 <HAL_GPIO_Init+0x21a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4e      	ldr	r2, [pc, #312]	; (8001b0c <HAL_GPIO_Init+0x324>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d013      	beq.n	80019fe <HAL_GPIO_Init+0x216>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4d      	ldr	r2, [pc, #308]	; (8001b10 <HAL_GPIO_Init+0x328>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00d      	beq.n	80019fa <HAL_GPIO_Init+0x212>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4c      	ldr	r2, [pc, #304]	; (8001b14 <HAL_GPIO_Init+0x32c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d007      	beq.n	80019f6 <HAL_GPIO_Init+0x20e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4b      	ldr	r2, [pc, #300]	; (8001b18 <HAL_GPIO_Init+0x330>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d101      	bne.n	80019f2 <HAL_GPIO_Init+0x20a>
 80019ee:	2307      	movs	r3, #7
 80019f0:	e00e      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 80019f2:	2308      	movs	r3, #8
 80019f4:	e00c      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 80019f6:	2306      	movs	r3, #6
 80019f8:	e00a      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 80019fa:	2305      	movs	r3, #5
 80019fc:	e008      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 80019fe:	2304      	movs	r3, #4
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 8001a02:	2303      	movs	r3, #3
 8001a04:	e004      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	f002 0203 	and.w	r2, r2, #3
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	4093      	lsls	r3, r2
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a20:	4935      	ldr	r1, [pc, #212]	; (8001af8 <HAL_GPIO_Init+0x310>)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <HAL_GPIO_Init+0x334>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a52:	4a32      	ldr	r2, [pc, #200]	; (8001b1c <HAL_GPIO_Init+0x334>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a58:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <HAL_GPIO_Init+0x334>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a7c:	4a27      	ldr	r2, [pc, #156]	; (8001b1c <HAL_GPIO_Init+0x334>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <HAL_GPIO_Init+0x334>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa6:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <HAL_GPIO_Init+0x334>)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_GPIO_Init+0x334>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad0:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <HAL_GPIO_Init+0x334>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	f67f ae90 	bls.w	8001804 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40013800 	.word	0x40013800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40021400 	.word	0x40021400
 8001b14:	40021800 	.word	0x40021800
 8001b18:	40021c00 	.word	0x40021c00
 8001b1c:	40013c00 	.word	0x40013c00

08001b20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	887b      	ldrh	r3, [r7, #2]
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	e001      	b.n	8001b42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b60:	787b      	ldrb	r3, [r7, #1]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b6c:	e003      	b.n	8001b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b6e:	887b      	ldrh	r3, [r7, #2]
 8001b70:	041a      	lsls	r2, r3, #16
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	619a      	str	r2, [r3, #24]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b085      	sub	sp, #20
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b94:	887a      	ldrh	r2, [r7, #2]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	041a      	lsls	r2, r3, #16
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	400b      	ands	r3, r1
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	619a      	str	r2, [r3, #24]
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e267      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d075      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bd6:	4b88      	ldr	r3, [pc, #544]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d00c      	beq.n	8001bfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001be2:	4b85      	ldr	r3, [pc, #532]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d112      	bne.n	8001c14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bee:	4b82      	ldr	r3, [pc, #520]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bfa:	d10b      	bne.n	8001c14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfc:	4b7e      	ldr	r3, [pc, #504]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d05b      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x108>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d157      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e242      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1c:	d106      	bne.n	8001c2c <HAL_RCC_OscConfig+0x74>
 8001c1e:	4b76      	ldr	r3, [pc, #472]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a75      	ldr	r2, [pc, #468]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e01d      	b.n	8001c68 <HAL_RCC_OscConfig+0xb0>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x98>
 8001c36:	4b70      	ldr	r3, [pc, #448]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a6f      	ldr	r2, [pc, #444]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b6d      	ldr	r3, [pc, #436]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a6c      	ldr	r2, [pc, #432]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0xb0>
 8001c50:	4b69      	ldr	r3, [pc, #420]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a68      	ldr	r2, [pc, #416]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b66      	ldr	r3, [pc, #408]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a65      	ldr	r2, [pc, #404]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff f9ce 	bl	8001010 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff f9ca 	bl	8001010 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	; 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e207      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	4b5b      	ldr	r3, [pc, #364]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0xc0>
 8001c96:	e014      	b.n	8001cc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff f9ba 	bl	8001010 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff f9b6 	bl	8001010 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1f3      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb2:	4b51      	ldr	r3, [pc, #324]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0xe8>
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d063      	beq.n	8001d96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cce:	4b4a      	ldr	r3, [pc, #296]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00b      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cda:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d11c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce6:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d116      	bne.n	8001d20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf2:	4b41      	ldr	r3, [pc, #260]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d005      	beq.n	8001d0a <HAL_RCC_OscConfig+0x152>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e1c7      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4937      	ldr	r1, [pc, #220]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1e:	e03a      	b.n	8001d96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d020      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d28:	4b34      	ldr	r3, [pc, #208]	; (8001dfc <HAL_RCC_OscConfig+0x244>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2e:	f7ff f96f 	bl	8001010 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d36:	f7ff f96b 	bl	8001010 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e1a8      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d48:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d54:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4925      	ldr	r1, [pc, #148]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]
 8001d68:	e015      	b.n	8001d96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6a:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <HAL_RCC_OscConfig+0x244>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff f94e 	bl	8001010 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d78:	f7ff f94a 	bl	8001010 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e187      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d036      	beq.n	8001e10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d016      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_RCC_OscConfig+0x248>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db0:	f7ff f92e 	bl	8001010 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db8:	f7ff f92a 	bl	8001010 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e167      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x200>
 8001dd6:	e01b      	b.n	8001e10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCC_OscConfig+0x248>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dde:	f7ff f917 	bl	8001010 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de4:	e00e      	b.n	8001e04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de6:	f7ff f913 	bl	8001010 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d907      	bls.n	8001e04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e150      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	42470000 	.word	0x42470000
 8001e00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e04:	4b88      	ldr	r3, [pc, #544]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ea      	bne.n	8001de6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 8097 	beq.w	8001f4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e22:	4b81      	ldr	r3, [pc, #516]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10f      	bne.n	8001e4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	4b7d      	ldr	r3, [pc, #500]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a7c      	ldr	r2, [pc, #496]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b7a      	ldr	r3, [pc, #488]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4e:	4b77      	ldr	r3, [pc, #476]	; (800202c <HAL_RCC_OscConfig+0x474>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d118      	bne.n	8001e8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5a:	4b74      	ldr	r3, [pc, #464]	; (800202c <HAL_RCC_OscConfig+0x474>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a73      	ldr	r2, [pc, #460]	; (800202c <HAL_RCC_OscConfig+0x474>)
 8001e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e66:	f7ff f8d3 	bl	8001010 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6e:	f7ff f8cf 	bl	8001010 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e10c      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	4b6a      	ldr	r3, [pc, #424]	; (800202c <HAL_RCC_OscConfig+0x474>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d106      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x2ea>
 8001e94:	4b64      	ldr	r3, [pc, #400]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e98:	4a63      	ldr	r2, [pc, #396]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea0:	e01c      	b.n	8001edc <HAL_RCC_OscConfig+0x324>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b05      	cmp	r3, #5
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x30c>
 8001eaa:	4b5f      	ldr	r3, [pc, #380]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	4a5e      	ldr	r2, [pc, #376]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb6:	4b5c      	ldr	r3, [pc, #368]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	4a5b      	ldr	r2, [pc, #364]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec2:	e00b      	b.n	8001edc <HAL_RCC_OscConfig+0x324>
 8001ec4:	4b58      	ldr	r3, [pc, #352]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec8:	4a57      	ldr	r2, [pc, #348]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed0:	4b55      	ldr	r3, [pc, #340]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed4:	4a54      	ldr	r2, [pc, #336]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001ed6:	f023 0304 	bic.w	r3, r3, #4
 8001eda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d015      	beq.n	8001f10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7ff f894 	bl	8001010 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eea:	e00a      	b.n	8001f02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eec:	f7ff f890 	bl	8001010 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e0cb      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f02:	4b49      	ldr	r3, [pc, #292]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0ee      	beq.n	8001eec <HAL_RCC_OscConfig+0x334>
 8001f0e:	e014      	b.n	8001f3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f10:	f7ff f87e 	bl	8001010 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f16:	e00a      	b.n	8001f2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f18:	f7ff f87a 	bl	8001010 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e0b5      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2e:	4b3e      	ldr	r3, [pc, #248]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1ee      	bne.n	8001f18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d105      	bne.n	8001f4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f40:	4b39      	ldr	r3, [pc, #228]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	4a38      	ldr	r2, [pc, #224]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80a1 	beq.w	8002098 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f56:	4b34      	ldr	r3, [pc, #208]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d05c      	beq.n	800201c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d141      	bne.n	8001fee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6a:	4b31      	ldr	r3, [pc, #196]	; (8002030 <HAL_RCC_OscConfig+0x478>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff f84e 	bl	8001010 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f78:	f7ff f84a 	bl	8001010 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e087      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8a:	4b27      	ldr	r3, [pc, #156]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69da      	ldr	r2, [r3, #28]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	019b      	lsls	r3, r3, #6
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	085b      	lsrs	r3, r3, #1
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	041b      	lsls	r3, r3, #16
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	061b      	lsls	r3, r3, #24
 8001fba:	491b      	ldr	r1, [pc, #108]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x478>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7ff f823 	bl	8001010 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fce:	f7ff f81f 	bl	8001010 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e05c      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x416>
 8001fec:	e054      	b.n	8002098 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_RCC_OscConfig+0x478>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f80c 	bl	8001010 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7ff f808 	bl	8001010 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e045      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_RCC_OscConfig+0x470>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x444>
 800201a:	e03d      	b.n	8002098 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e038      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
 8002028:	40023800 	.word	0x40023800
 800202c:	40007000 	.word	0x40007000
 8002030:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_RCC_OscConfig+0x4ec>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d028      	beq.n	8002094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d121      	bne.n	8002094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d11a      	bne.n	8002094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002064:	4013      	ands	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800206a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800206c:	4293      	cmp	r3, r2
 800206e:	d111      	bne.n	8002094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	085b      	lsrs	r3, r3, #1
 800207c:	3b01      	subs	r3, #1
 800207e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002080:	429a      	cmp	r2, r3
 8002082:	d107      	bne.n	8002094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800

080020a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0cc      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b68      	ldr	r3, [pc, #416]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d90c      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b65      	ldr	r3, [pc, #404]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b63      	ldr	r3, [pc, #396]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0b8      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020fc:	4b59      	ldr	r3, [pc, #356]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a58      	ldr	r2, [pc, #352]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002106:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002114:	4b53      	ldr	r3, [pc, #332]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4a52      	ldr	r2, [pc, #328]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800211e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002120:	4b50      	ldr	r3, [pc, #320]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	494d      	ldr	r1, [pc, #308]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d044      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b47      	ldr	r3, [pc, #284]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d119      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e07f      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d003      	beq.n	8002166 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002162:	2b03      	cmp	r3, #3
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002166:	4b3f      	ldr	r3, [pc, #252]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d109      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e06f      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002176:	4b3b      	ldr	r3, [pc, #236]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e067      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002186:	4b37      	ldr	r3, [pc, #220]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f023 0203 	bic.w	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4934      	ldr	r1, [pc, #208]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	4313      	orrs	r3, r2
 8002196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002198:	f7fe ff3a 	bl	8001010 <HAL_GetTick>
 800219c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a0:	f7fe ff36 	bl	8001010 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e04f      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	4b2b      	ldr	r3, [pc, #172]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 020c 	and.w	r2, r3, #12
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d1eb      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c8:	4b25      	ldr	r3, [pc, #148]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d20c      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b22      	ldr	r3, [pc, #136]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b20      	ldr	r3, [pc, #128]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e032      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4916      	ldr	r1, [pc, #88]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	490e      	ldr	r1, [pc, #56]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	4313      	orrs	r3, r2
 800222c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800222e:	f000 f821 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002232:	4602      	mov	r2, r0
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	490a      	ldr	r1, [pc, #40]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	5ccb      	ldrb	r3, [r1, r3]
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	4a09      	ldr	r2, [pc, #36]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fe9a 	bl	8000f88 <HAL_InitTick>

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40023c00 	.word	0x40023c00
 8002264:	40023800 	.word	0x40023800
 8002268:	080058b0 	.word	0x080058b0
 800226c:	20000000 	.word	0x20000000
 8002270:	20000004 	.word	0x20000004

08002274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002278:	b090      	sub	sp, #64	; 0x40
 800227a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	637b      	str	r3, [r7, #52]	; 0x34
 8002280:	2300      	movs	r3, #0
 8002282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002284:	2300      	movs	r3, #0
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800228c:	4b59      	ldr	r3, [pc, #356]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b08      	cmp	r3, #8
 8002296:	d00d      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002298:	2b08      	cmp	r3, #8
 800229a:	f200 80a1 	bhi.w	80023e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x34>
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d003      	beq.n	80022ae <HAL_RCC_GetSysClockFreq+0x3a>
 80022a6:	e09b      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022a8:	4b53      	ldr	r3, [pc, #332]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80022aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80022ac:	e09b      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ae:	4b53      	ldr	r3, [pc, #332]	; (80023fc <HAL_RCC_GetSysClockFreq+0x188>)
 80022b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022b2:	e098      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022b4:	4b4f      	ldr	r3, [pc, #316]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022be:	4b4d      	ldr	r3, [pc, #308]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d028      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ca:	4b4a      	ldr	r3, [pc, #296]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	099b      	lsrs	r3, r3, #6
 80022d0:	2200      	movs	r2, #0
 80022d2:	623b      	str	r3, [r7, #32]
 80022d4:	627a      	str	r2, [r7, #36]	; 0x24
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022dc:	2100      	movs	r1, #0
 80022de:	4b47      	ldr	r3, [pc, #284]	; (80023fc <HAL_RCC_GetSysClockFreq+0x188>)
 80022e0:	fb03 f201 	mul.w	r2, r3, r1
 80022e4:	2300      	movs	r3, #0
 80022e6:	fb00 f303 	mul.w	r3, r0, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	4a43      	ldr	r2, [pc, #268]	; (80023fc <HAL_RCC_GetSysClockFreq+0x188>)
 80022ee:	fba0 1202 	umull	r1, r2, r0, r2
 80022f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022f4:	460a      	mov	r2, r1
 80022f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80022f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022fa:	4413      	add	r3, r2
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002300:	2200      	movs	r2, #0
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	61fa      	str	r2, [r7, #28]
 8002306:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800230a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800230e:	f7fd ff5b 	bl	80001c8 <__aeabi_uldivmod>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4613      	mov	r3, r2
 8002318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800231a:	e053      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231c:	4b35      	ldr	r3, [pc, #212]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	099b      	lsrs	r3, r3, #6
 8002322:	2200      	movs	r2, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	617a      	str	r2, [r7, #20]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800232e:	f04f 0b00 	mov.w	fp, #0
 8002332:	4652      	mov	r2, sl
 8002334:	465b      	mov	r3, fp
 8002336:	f04f 0000 	mov.w	r0, #0
 800233a:	f04f 0100 	mov.w	r1, #0
 800233e:	0159      	lsls	r1, r3, #5
 8002340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002344:	0150      	lsls	r0, r2, #5
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	ebb2 080a 	subs.w	r8, r2, sl
 800234e:	eb63 090b 	sbc.w	r9, r3, fp
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800235e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002362:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002366:	ebb2 0408 	subs.w	r4, r2, r8
 800236a:	eb63 0509 	sbc.w	r5, r3, r9
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	00eb      	lsls	r3, r5, #3
 8002378:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800237c:	00e2      	lsls	r2, r4, #3
 800237e:	4614      	mov	r4, r2
 8002380:	461d      	mov	r5, r3
 8002382:	eb14 030a 	adds.w	r3, r4, sl
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	eb45 030b 	adc.w	r3, r5, fp
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800239a:	4629      	mov	r1, r5
 800239c:	028b      	lsls	r3, r1, #10
 800239e:	4621      	mov	r1, r4
 80023a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023a4:	4621      	mov	r1, r4
 80023a6:	028a      	lsls	r2, r1, #10
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ae:	2200      	movs	r2, #0
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	60fa      	str	r2, [r7, #12]
 80023b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023b8:	f7fd ff06 	bl	80001c8 <__aeabi_uldivmod>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4613      	mov	r3, r2
 80023c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	3301      	adds	r3, #1
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80023d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023de:	e002      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80023e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3740      	adds	r7, #64	; 0x40
 80023ec:	46bd      	mov	sp, r7
 80023ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	00f42400 	.word	0x00f42400
 80023fc:	017d7840 	.word	0x017d7840

08002400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_RCC_GetHCLKFreq+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000000 	.word	0x20000000

08002418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800241c:	f7ff fff0 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 8002420:	4602      	mov	r2, r0
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	0a9b      	lsrs	r3, r3, #10
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4903      	ldr	r1, [pc, #12]	; (800243c <HAL_RCC_GetPCLK1Freq+0x24>)
 800242e:	5ccb      	ldrb	r3, [r1, r3]
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40023800 	.word	0x40023800
 800243c:	080058c0 	.word	0x080058c0

08002440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002444:	f7ff ffdc 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	0b5b      	lsrs	r3, r3, #13
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4903      	ldr	r1, [pc, #12]	; (8002464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40023800 	.word	0x40023800
 8002464:	080058c0 	.word	0x080058c0

08002468 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e022      	b.n	80024c0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7fe fc2f 	bl	8000cf0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2203      	movs	r2, #3
 8002496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f814 	bl	80024c8 <HAL_SD_InitCard>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00a      	b.n	80024c0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80024c8:	b5b0      	push	{r4, r5, r7, lr}
 80024ca:	b08e      	sub	sp, #56	; 0x38
 80024cc:	af04      	add	r7, sp, #16
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80024e4:	2376      	movs	r3, #118	; 0x76
 80024e6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681d      	ldr	r5, [r3, #0]
 80024ec:	466c      	mov	r4, sp
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024fa:	f107 0308 	add.w	r3, r7, #8
 80024fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002500:	4628      	mov	r0, r5
 8002502:	f002 f9f1 	bl	80048e8 <SDIO_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800250c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e04f      	b.n	80025b8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002518:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <HAL_SD_InitCard+0xf8>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f002 fa29 	bl	800497a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <HAL_SD_InitCard+0xf8>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800252e:	2002      	movs	r0, #2
 8002530:	f7fe fd7a 	bl	8001028 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 ff03 	bl	8003340 <SD_PowerON>
 800253a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e02e      	b.n	80025b8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fe22 	bl	80031a4 <SD_InitCard>
 8002560:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00b      	beq.n	8002580 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e01b      	b.n	80025b8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002588:	4618      	mov	r0, r3
 800258a:	f002 fa88 	bl	8004a9e <SDMMC_CmdBlockLength>
 800258e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00f      	beq.n	80025b6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <HAL_SD_InitCard+0xfc>)
 800259c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3728      	adds	r7, #40	; 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bdb0      	pop	{r4, r5, r7, pc}
 80025c0:	422580a0 	.word	0x422580a0
 80025c4:	004005ff 	.word	0x004005ff

080025c8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b092      	sub	sp, #72	; 0x48
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80025d6:	f7fe fd1b 	bl	8001010 <HAL_GetTick>
 80025da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d107      	bne.n	80025fa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1bd      	b.n	8002976 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b01      	cmp	r3, #1
 8002604:	f040 81b0 	bne.w	8002968 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800260e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	441a      	add	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002618:	429a      	cmp	r2, r3
 800261a:	d907      	bls.n	800262c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e1a4      	b.n	8002976 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2203      	movs	r2, #3
 8002630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2200      	movs	r2, #0
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002640:	2b01      	cmp	r3, #1
 8002642:	d002      	beq.n	800264a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002646:	025b      	lsls	r3, r3, #9
 8002648:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800264a:	f04f 33ff 	mov.w	r3, #4294967295
 800264e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	025b      	lsls	r3, r3, #9
 8002654:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002656:	2390      	movs	r3, #144	; 0x90
 8002658:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800265a:	2302      	movs	r3, #2
 800265c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002662:	2301      	movs	r3, #1
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f107 0214 	add.w	r2, r7, #20
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f002 f9e8 	bl	8004a46 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d90a      	bls.n	8002692 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2202      	movs	r2, #2
 8002680:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002688:	4618      	mov	r0, r3
 800268a:	f002 fa4c 	bl	8004b26 <SDMMC_CmdReadMultiBlock>
 800268e:	6478      	str	r0, [r7, #68]	; 0x44
 8002690:	e009      	b.n	80026a6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2201      	movs	r2, #1
 8002696:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800269e:	4618      	mov	r0, r3
 80026a0:	f002 fa1f 	bl	8004ae2 <SDMMC_CmdReadSingleBlock>
 80026a4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80026a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d012      	beq.n	80026d2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a7a      	ldr	r2, [pc, #488]	; (800289c <HAL_SD_ReadBlocks+0x2d4>)
 80026b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ba:	431a      	orrs	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e151      	b.n	8002976 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80026d6:	e061      	b.n	800279c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d03c      	beq.n	8002760 <HAL_SD_ReadBlocks+0x198>
 80026e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d039      	beq.n	8002760 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80026ec:	2300      	movs	r3, #0
 80026ee:	643b      	str	r3, [r7, #64]	; 0x40
 80026f0:	e033      	b.n	800275a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f002 f921 	bl	800493e <SDIO_ReadFIFO>
 80026fc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	b2da      	uxtb	r2, r3
 8002702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002704:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002708:	3301      	adds	r3, #1
 800270a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800270c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800270e:	3b01      	subs	r3, #1
 8002710:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002714:	0a1b      	lsrs	r3, r3, #8
 8002716:	b2da      	uxtb	r2, r3
 8002718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800271c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271e:	3301      	adds	r3, #1
 8002720:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002724:	3b01      	subs	r3, #1
 8002726:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272a:	0c1b      	lsrs	r3, r3, #16
 800272c:	b2da      	uxtb	r2, r3
 800272e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002730:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002734:	3301      	adds	r3, #1
 8002736:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800273a:	3b01      	subs	r3, #1
 800273c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	0e1b      	lsrs	r3, r3, #24
 8002742:	b2da      	uxtb	r2, r3
 8002744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002746:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274a:	3301      	adds	r3, #1
 800274c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800274e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002750:	3b01      	subs	r3, #1
 8002752:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002756:	3301      	adds	r3, #1
 8002758:	643b      	str	r3, [r7, #64]	; 0x40
 800275a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800275c:	2b07      	cmp	r3, #7
 800275e:	d9c8      	bls.n	80026f2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002760:	f7fe fc56 	bl	8001010 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800276c:	429a      	cmp	r2, r3
 800276e:	d902      	bls.n	8002776 <HAL_SD_ReadBlocks+0x1ae>
 8002770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002772:	2b00      	cmp	r3, #0
 8002774:	d112      	bne.n	800279c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a48      	ldr	r2, [pc, #288]	; (800289c <HAL_SD_ReadBlocks+0x2d4>)
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002782:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e0ec      	b.n	8002976 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a2:	f240 332a 	movw	r3, #810	; 0x32a
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d095      	beq.n	80026d8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d022      	beq.n	8002800 <HAL_SD_ReadBlocks+0x238>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d91f      	bls.n	8002800 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d01b      	beq.n	8002800 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f002 fa11 	bl	8004bf4 <SDMMC_CmdStopTransfer>
 80027d2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80027d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d012      	beq.n	8002800 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a2f      	ldr	r2, [pc, #188]	; (800289c <HAL_SD_ReadBlocks+0x2d4>)
 80027e0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e8:	431a      	orrs	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0ba      	b.n	8002976 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d012      	beq.n	8002834 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a22      	ldr	r2, [pc, #136]	; (800289c <HAL_SD_ReadBlocks+0x2d4>)
 8002814:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	f043 0208 	orr.w	r2, r3, #8
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0a0      	b.n	8002976 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d012      	beq.n	8002868 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a15      	ldr	r2, [pc, #84]	; (800289c <HAL_SD_ReadBlocks+0x2d4>)
 8002848:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	f043 0202 	orr.w	r2, r3, #2
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e086      	b.n	8002976 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b00      	cmp	r3, #0
 8002874:	d063      	beq.n	800293e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a08      	ldr	r2, [pc, #32]	; (800289c <HAL_SD_ReadBlocks+0x2d4>)
 800287c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	f043 0220 	orr.w	r2, r3, #32
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e06c      	b.n	8002976 <HAL_SD_ReadBlocks+0x3ae>
 800289c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f002 f84a 	bl	800493e <SDIO_ReadFIFO>
 80028aa:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80028b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b6:	3301      	adds	r3, #1
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80028ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028bc:	3b01      	subs	r3, #1
 80028be:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80028c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80028ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028cc:	3301      	adds	r3, #1
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80028d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d2:	3b01      	subs	r3, #1
 80028d4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028de:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80028e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e2:	3301      	adds	r3, #1
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80028e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e8:	3b01      	subs	r3, #1
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80028ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ee:	0e1b      	lsrs	r3, r3, #24
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80028f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f8:	3301      	adds	r3, #1
 80028fa:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80028fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028fe:	3b01      	subs	r3, #1
 8002900:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002902:	f7fe fb85 	bl	8001010 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800290e:	429a      	cmp	r2, r3
 8002910:	d902      	bls.n	8002918 <HAL_SD_ReadBlocks+0x350>
 8002912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002914:	2b00      	cmp	r3, #0
 8002916:	d112      	bne.n	800293e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a18      	ldr	r2, [pc, #96]	; (8002980 <HAL_SD_ReadBlocks+0x3b8>)
 800291e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e01b      	b.n	8002976 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_SD_ReadBlocks+0x38a>
 800294c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1a6      	bne.n	80028a0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f240 523a 	movw	r2, #1338	; 0x53a
 800295a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	e006      	b.n	8002976 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
  }
}
 8002976:	4618      	mov	r0, r3
 8002978:	3748      	adds	r7, #72	; 0x48
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	004005ff 	.word	0x004005ff

08002984 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b092      	sub	sp, #72	; 0x48
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002992:	f7fe fb3d 	bl	8001010 <HAL_GetTick>
 8002996:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d107      	bne.n	80029b6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e166      	b.n	8002c84 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	f040 8159 	bne.w	8002c76 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80029ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	441a      	add	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d907      	bls.n	80029e8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e14d      	b.n	8002c84 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2203      	movs	r2, #3
 80029ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2200      	movs	r2, #0
 80029f6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d002      	beq.n	8002a06 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a02:	025b      	lsls	r3, r3, #9
 8002a04:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	025b      	lsls	r3, r3, #9
 8002a10:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002a12:	2390      	movs	r3, #144	; 0x90
 8002a14:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f107 0218 	add.w	r2, r7, #24
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f002 f80a 	bl	8004a46 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d90a      	bls.n	8002a4e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a44:	4618      	mov	r0, r3
 8002a46:	f002 f8b2 	bl	8004bae <SDMMC_CmdWriteMultiBlock>
 8002a4a:	6478      	str	r0, [r7, #68]	; 0x44
 8002a4c:	e009      	b.n	8002a62 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2210      	movs	r2, #16
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f002 f885 	bl	8004b6a <SDMMC_CmdWriteSingleBlock>
 8002a60:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d012      	beq.n	8002a8e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a87      	ldr	r2, [pc, #540]	; (8002c8c <HAL_SD_WriteBlocks+0x308>)
 8002a6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a76:	431a      	orrs	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e0fa      	b.n	8002c84 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002a92:	e065      	b.n	8002b60 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d040      	beq.n	8002b24 <HAL_SD_WriteBlocks+0x1a0>
 8002aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d03d      	beq.n	8002b24 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	643b      	str	r3, [r7, #64]	; 0x40
 8002aac:	e037      	b.n	8002b1e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002abc:	3b01      	subs	r3, #1
 8002abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	021a      	lsls	r2, r3, #8
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ace:	3301      	adds	r3, #1
 8002ad0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	041a      	lsls	r2, r3, #16
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aec:	3b01      	subs	r3, #1
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	061a      	lsls	r2, r3, #24
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afe:	3301      	adds	r3, #1
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b04:	3b01      	subs	r3, #1
 8002b06:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f107 0214 	add.w	r2, r7, #20
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f001 ff20 	bl	8004958 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8002b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b20:	2b07      	cmp	r3, #7
 8002b22:	d9c4      	bls.n	8002aae <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002b24:	f7fe fa74 	bl	8001010 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d902      	bls.n	8002b3a <HAL_SD_WriteBlocks+0x1b6>
 8002b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d112      	bne.n	8002b60 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a53      	ldr	r2, [pc, #332]	; (8002c8c <HAL_SD_WriteBlocks+0x308>)
 8002b40:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e091      	b.n	8002c84 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b66:	f240 331a 	movw	r3, #794	; 0x31a
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d091      	beq.n	8002a94 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d022      	beq.n	8002bc4 <HAL_SD_WriteBlocks+0x240>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d91f      	bls.n	8002bc4 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d01b      	beq.n	8002bc4 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f002 f82f 	bl	8004bf4 <SDMMC_CmdStopTransfer>
 8002b96:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d012      	beq.n	8002bc4 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a3a      	ldr	r2, [pc, #232]	; (8002c8c <HAL_SD_WriteBlocks+0x308>)
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bac:	431a      	orrs	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e05f      	b.n	8002c84 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d012      	beq.n	8002bf8 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a2d      	ldr	r2, [pc, #180]	; (8002c8c <HAL_SD_WriteBlocks+0x308>)
 8002bd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	f043 0208 	orr.w	r2, r3, #8
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e045      	b.n	8002c84 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d012      	beq.n	8002c2c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a20      	ldr	r2, [pc, #128]	; (8002c8c <HAL_SD_WriteBlocks+0x308>)
 8002c0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	f043 0202 	orr.w	r2, r3, #2
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e02b      	b.n	8002c84 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d012      	beq.n	8002c60 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a13      	ldr	r2, [pc, #76]	; (8002c8c <HAL_SD_WriteBlocks+0x308>)
 8002c40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	f043 0210 	orr.w	r2, r3, #16
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e011      	b.n	8002c84 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f240 523a 	movw	r2, #1338	; 0x53a
 8002c68:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	e006      	b.n	8002c84 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
  }
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3748      	adds	r7, #72	; 0x48
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	004005ff 	.word	0x004005ff

08002c90 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c9e:	0f9b      	lsrs	r3, r3, #30
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002caa:	0e9b      	lsrs	r3, r3, #26
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cbc:	0e1b      	lsrs	r3, r3, #24
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cce:	0c1b      	lsrs	r3, r3, #16
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cf0:	0d1b      	lsrs	r3, r3, #20
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cfc:	0c1b      	lsrs	r3, r3, #16
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d0e:	0bdb      	lsrs	r3, r3, #15
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d20:	0b9b      	lsrs	r3, r3, #14
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d32:	0b5b      	lsrs	r3, r3, #13
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d44:	0b1b      	lsrs	r3, r3, #12
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2200      	movs	r2, #0
 8002d56:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d163      	bne.n	8002e28 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d64:	009a      	lsls	r2, r3, #2
 8002d66:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002d70:	0f92      	lsrs	r2, r2, #30
 8002d72:	431a      	orrs	r2, r3
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d7c:	0edb      	lsrs	r3, r3, #27
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d8e:	0e1b      	lsrs	r3, r3, #24
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da0:	0d5b      	lsrs	r3, r3, #21
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db2:	0c9b      	lsrs	r3, r3, #18
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc4:	0bdb      	lsrs	r3, r3, #15
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	7e1b      	ldrb	r3, [r3, #24]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	3302      	adds	r3, #2
 8002de8:	2201      	movs	r2, #1
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002df2:	fb03 f202 	mul.w	r2, r3, r2
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	7a1b      	ldrb	r3, [r3, #8]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	2201      	movs	r2, #1
 8002e06:	409a      	lsls	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002e14:	0a52      	lsrs	r2, r2, #9
 8002e16:	fb03 f202 	mul.w	r2, r3, r2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e24:	661a      	str	r2, [r3, #96]	; 0x60
 8002e26:	e031      	b.n	8002e8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d11d      	bne.n	8002e6c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e34:	041b      	lsls	r3, r3, #16
 8002e36:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e3e:	0c1b      	lsrs	r3, r3, #16
 8002e40:	431a      	orrs	r2, r3
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	029a      	lsls	r2, r3, #10
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e60:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	661a      	str	r2, [r3, #96]	; 0x60
 8002e6a:	e00f      	b.n	8002e8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a58      	ldr	r2, [pc, #352]	; (8002fd4 <HAL_SD_GetCardCSD+0x344>)
 8002e72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e09d      	b.n	8002fc8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e90:	0b9b      	lsrs	r3, r3, #14
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea2:	09db      	lsrs	r3, r3, #7
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	0fdb      	lsrs	r3, r3, #31
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	0f5b      	lsrs	r3, r3, #29
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	0e9b      	lsrs	r3, r3, #26
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	0d9b      	lsrs	r3, r3, #22
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	0d5b      	lsrs	r3, r3, #21
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	0c1b      	lsrs	r3, r3, #16
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	0bdb      	lsrs	r3, r3, #15
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	0b9b      	lsrs	r3, r3, #14
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	0b5b      	lsrs	r3, r3, #13
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	0b1b      	lsrs	r3, r3, #12
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f86:	0a9b      	lsrs	r3, r3, #10
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	004005ff 	.word	0x004005ff

08002fd8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003030:	b5b0      	push	{r4, r5, r7, lr}
 8003032:	b08e      	sub	sp, #56	; 0x38
 8003034:	af04      	add	r7, sp, #16
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2203      	movs	r2, #3
 8003044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	2b03      	cmp	r3, #3
 800304e:	d02e      	beq.n	80030ae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003056:	d106      	bne.n	8003066 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	639a      	str	r2, [r3, #56]	; 0x38
 8003064:	e029      	b.n	80030ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800306c:	d10a      	bne.n	8003084 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fa1c 	bl	80034ac <SD_WideBus_Enable>
 8003074:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	639a      	str	r2, [r3, #56]	; 0x38
 8003082:	e01a      	b.n	80030ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10a      	bne.n	80030a0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fa59 	bl	8003542 <SD_WideBus_Disable>
 8003090:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	639a      	str	r2, [r3, #56]	; 0x38
 800309e:	e00c      	b.n	80030ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38
 80030ac:	e005      	b.n	80030ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a26      	ldr	r2, [pc, #152]	; (8003160 <HAL_SD_ConfigWideBusOperation+0x130>)
 80030c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030d8:	e01f      	b.n	800311a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681d      	ldr	r5, [r3, #0]
 8003100:	466c      	mov	r4, sp
 8003102:	f107 0314 	add.w	r3, r7, #20
 8003106:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800310a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800310e:	f107 0308 	add.w	r3, r7, #8
 8003112:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003114:	4628      	mov	r0, r5
 8003116:	f001 fbe7 	bl	80048e8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003122:	4618      	mov	r0, r3
 8003124:	f001 fcbb 	bl	8004a9e <SDMMC_CmdBlockLength>
 8003128:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00c      	beq.n	800314a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003156:	4618      	mov	r0, r3
 8003158:	3728      	adds	r7, #40	; 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bdb0      	pop	{r4, r5, r7, pc}
 800315e:	bf00      	nop
 8003160:	004005ff 	.word	0x004005ff

08003164 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003170:	f107 030c 	add.w	r3, r7, #12
 8003174:	4619      	mov	r1, r3
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f970 	bl	800345c <SD_SendStatus>
 800317c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	0a5b      	lsrs	r3, r3, #9
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800319a:	693b      	ldr	r3, [r7, #16]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80031a4:	b5b0      	push	{r4, r5, r7, lr}
 80031a6:	b094      	sub	sp, #80	; 0x50
 80031a8:	af04      	add	r7, sp, #16
 80031aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80031ac:	2301      	movs	r3, #1
 80031ae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f001 fbee 	bl	8004996 <SDIO_GetPowerState>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d102      	bne.n	80031c6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80031c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80031c4:	e0b8      	b.n	8003338 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d02f      	beq.n	800322e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f001 fe18 	bl	8004e08 <SDMMC_CmdSendCID>
 80031d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80031da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <SD_InitCard+0x40>
    {
      return errorstate;
 80031e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e2:	e0a9      	b.n	8003338 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2100      	movs	r1, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f001 fc18 	bl	8004a20 <SDIO_GetResponse>
 80031f0:	4602      	mov	r2, r0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2104      	movs	r1, #4
 80031fc:	4618      	mov	r0, r3
 80031fe:	f001 fc0f 	bl	8004a20 <SDIO_GetResponse>
 8003202:	4602      	mov	r2, r0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2108      	movs	r1, #8
 800320e:	4618      	mov	r0, r3
 8003210:	f001 fc06 	bl	8004a20 <SDIO_GetResponse>
 8003214:	4602      	mov	r2, r0
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	210c      	movs	r1, #12
 8003220:	4618      	mov	r0, r3
 8003222:	f001 fbfd 	bl	8004a20 <SDIO_GetResponse>
 8003226:	4602      	mov	r2, r0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	2b03      	cmp	r3, #3
 8003234:	d00d      	beq.n	8003252 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f107 020e 	add.w	r2, r7, #14
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f001 fe1e 	bl	8004e82 <SDMMC_CmdSetRelAdd>
 8003246:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <SD_InitCard+0xae>
    {
      return errorstate;
 800324e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003250:	e072      	b.n	8003338 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	2b03      	cmp	r3, #3
 8003258:	d036      	beq.n	80032c8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800325a:	89fb      	ldrh	r3, [r7, #14]
 800325c:	461a      	mov	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326a:	041b      	lsls	r3, r3, #16
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f001 fde8 	bl	8004e44 <SDMMC_CmdSendCSD>
 8003274:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <SD_InitCard+0xdc>
    {
      return errorstate;
 800327c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327e:	e05b      	b.n	8003338 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f001 fbca 	bl	8004a20 <SDIO_GetResponse>
 800328c:	4602      	mov	r2, r0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2104      	movs	r1, #4
 8003298:	4618      	mov	r0, r3
 800329a:	f001 fbc1 	bl	8004a20 <SDIO_GetResponse>
 800329e:	4602      	mov	r2, r0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2108      	movs	r1, #8
 80032aa:	4618      	mov	r0, r3
 80032ac:	f001 fbb8 	bl	8004a20 <SDIO_GetResponse>
 80032b0:	4602      	mov	r2, r0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	210c      	movs	r1, #12
 80032bc:	4618      	mov	r0, r3
 80032be:	f001 fbaf 	bl	8004a20 <SDIO_GetResponse>
 80032c2:	4602      	mov	r2, r0
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2104      	movs	r1, #4
 80032ce:	4618      	mov	r0, r3
 80032d0:	f001 fba6 	bl	8004a20 <SDIO_GetResponse>
 80032d4:	4603      	mov	r3, r0
 80032d6:	0d1a      	lsrs	r2, r3, #20
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80032dc:	f107 0310 	add.w	r3, r7, #16
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff fcd4 	bl	8002c90 <HAL_SD_GetCardCSD>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80032ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80032f2:	e021      	b.n	8003338 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6819      	ldr	r1, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fc:	041b      	lsls	r3, r3, #16
 80032fe:	2200      	movs	r2, #0
 8003300:	461c      	mov	r4, r3
 8003302:	4615      	mov	r5, r2
 8003304:	4622      	mov	r2, r4
 8003306:	462b      	mov	r3, r5
 8003308:	4608      	mov	r0, r1
 800330a:	f001 fc95 	bl	8004c38 <SDMMC_CmdSelDesel>
 800330e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <SD_InitCard+0x176>
  {
    return errorstate;
 8003316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003318:	e00e      	b.n	8003338 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681d      	ldr	r5, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	466c      	mov	r4, sp
 8003322:	f103 0210 	add.w	r2, r3, #16
 8003326:	ca07      	ldmia	r2, {r0, r1, r2}
 8003328:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800332c:	3304      	adds	r3, #4
 800332e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003330:	4628      	mov	r0, r5
 8003332:	f001 fad9 	bl	80048e8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3740      	adds	r7, #64	; 0x40
 800333c:	46bd      	mov	sp, r7
 800333e:	bdb0      	pop	{r4, r5, r7, pc}

08003340 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	2300      	movs	r3, #0
 8003352:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f001 fc90 	bl	8004c7e <SDMMC_CmdGoIdleState>
 800335e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <SD_PowerON+0x2a>
  {
    return errorstate;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	e072      	b.n	8003450 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f001 fca3 	bl	8004cba <SDMMC_CmdOperCond>
 8003374:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00d      	beq.n	8003398 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f001 fc79 	bl	8004c7e <SDMMC_CmdGoIdleState>
 800338c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d004      	beq.n	800339e <SD_PowerON+0x5e>
    {
      return errorstate;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	e05b      	b.n	8003450 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d137      	bne.n	8003416 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f001 fca3 	bl	8004cf8 <SDMMC_CmdAppCommand>
 80033b2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d02d      	beq.n	8003416 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80033ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80033be:	e047      	b.n	8003450 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2100      	movs	r1, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f001 fc96 	bl	8004cf8 <SDMMC_CmdAppCommand>
 80033cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <SD_PowerON+0x98>
    {
      return errorstate;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	e03b      	b.n	8003450 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	491e      	ldr	r1, [pc, #120]	; (8003458 <SD_PowerON+0x118>)
 80033de:	4618      	mov	r0, r3
 80033e0:	f001 fcac 	bl	8004d3c <SDMMC_CmdAppOperCommand>
 80033e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80033ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80033f0:	e02e      	b.n	8003450 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2100      	movs	r1, #0
 80033f8:	4618      	mov	r0, r3
 80033fa:	f001 fb11 	bl	8004a20 <SDIO_GetResponse>
 80033fe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	0fdb      	lsrs	r3, r3, #31
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <SD_PowerON+0xcc>
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <SD_PowerON+0xce>
 800340c:	2300      	movs	r3, #0
 800340e:	613b      	str	r3, [r7, #16]

    count++;
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	3301      	adds	r3, #1
 8003414:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800341c:	4293      	cmp	r3, r2
 800341e:	d802      	bhi.n	8003426 <SD_PowerON+0xe6>
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0cc      	beq.n	80033c0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800342c:	4293      	cmp	r3, r2
 800342e:	d902      	bls.n	8003436 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003434:	e00c      	b.n	8003450 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	645a      	str	r2, [r3, #68]	; 0x44
 8003446:	e002      	b.n	800344e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	c1100000 	.word	0xc1100000

0800345c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800346c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003470:	e018      	b.n	80034a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347a:	041b      	lsls	r3, r3, #16
 800347c:	4619      	mov	r1, r3
 800347e:	4610      	mov	r0, r2
 8003480:	f001 fd20 	bl	8004ec4 <SDMMC_CmdSendStatus>
 8003484:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <SD_SendStatus+0x34>
  {
    return errorstate;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	e009      	b.n	80034a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f001 fac2 	bl	8004a20 <SDIO_GetResponse>
 800349c:	4602      	mov	r2, r0
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	2300      	movs	r3, #0
 80034ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2100      	movs	r1, #0
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 faac 	bl	8004a20 <SDIO_GetResponse>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034d2:	d102      	bne.n	80034da <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80034d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034d8:	e02f      	b.n	800353a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80034da:	f107 030c 	add.w	r3, r7, #12
 80034de:	4619      	mov	r1, r3
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f879 	bl	80035d8 <SD_FindSCR>
 80034e6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	e023      	b.n	800353a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01c      	beq.n	8003536 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003504:	041b      	lsls	r3, r3, #16
 8003506:	4619      	mov	r1, r3
 8003508:	4610      	mov	r0, r2
 800350a:	f001 fbf5 	bl	8004cf8 <SDMMC_CmdAppCommand>
 800350e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	e00f      	b.n	800353a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2102      	movs	r1, #2
 8003520:	4618      	mov	r0, r3
 8003522:	f001 fc2e 	bl	8004d82 <SDMMC_CmdBusWidth>
 8003526:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	e003      	b.n	800353a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003532:	2300      	movs	r3, #0
 8003534:	e001      	b.n	800353a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003536:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	2300      	movs	r3, #0
 8003550:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f001 fa61 	bl	8004a20 <SDIO_GetResponse>
 800355e:	4603      	mov	r3, r0
 8003560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003568:	d102      	bne.n	8003570 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800356a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800356e:	e02f      	b.n	80035d0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003570:	f107 030c 	add.w	r3, r7, #12
 8003574:	4619      	mov	r1, r3
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f82e 	bl	80035d8 <SD_FindSCR>
 800357c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	e023      	b.n	80035d0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01c      	beq.n	80035cc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359a:	041b      	lsls	r3, r3, #16
 800359c:	4619      	mov	r1, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	f001 fbaa 	bl	8004cf8 <SDMMC_CmdAppCommand>
 80035a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	e00f      	b.n	80035d0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2100      	movs	r1, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	f001 fbe3 	bl	8004d82 <SDMMC_CmdBusWidth>
 80035bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	e003      	b.n	80035d0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	e001      	b.n	80035d0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80035cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80035d8:	b590      	push	{r4, r7, lr}
 80035da:	b08f      	sub	sp, #60	; 0x3c
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80035e2:	f7fd fd15 	bl	8001010 <HAL_GetTick>
 80035e6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80035ec:	2300      	movs	r3, #0
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2108      	movs	r1, #8
 80035fe:	4618      	mov	r0, r3
 8003600:	f001 fa4d 	bl	8004a9e <SDMMC_CmdBlockLength>
 8003604:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <SD_FindSCR+0x38>
  {
    return errorstate;
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	e0b2      	b.n	8003776 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003618:	041b      	lsls	r3, r3, #16
 800361a:	4619      	mov	r1, r3
 800361c:	4610      	mov	r0, r2
 800361e:	f001 fb6b 	bl	8004cf8 <SDMMC_CmdAppCommand>
 8003622:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <SD_FindSCR+0x56>
  {
    return errorstate;
 800362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362c:	e0a3      	b.n	8003776 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800362e:	f04f 33ff 	mov.w	r3, #4294967295
 8003632:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003634:	2308      	movs	r3, #8
 8003636:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003638:	2330      	movs	r3, #48	; 0x30
 800363a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800363c:	2302      	movs	r3, #2
 800363e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003640:	2300      	movs	r3, #0
 8003642:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003644:	2301      	movs	r3, #1
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f107 0210 	add.w	r2, r7, #16
 8003650:	4611      	mov	r1, r2
 8003652:	4618      	mov	r0, r3
 8003654:	f001 f9f7 	bl	8004a46 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f001 fbb2 	bl	8004dc6 <SDMMC_CmdSendSCR>
 8003662:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003666:	2b00      	cmp	r3, #0
 8003668:	d02a      	beq.n	80036c0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366c:	e083      	b.n	8003776 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00f      	beq.n	800369c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6819      	ldr	r1, [r3, #0]
 8003680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	f107 0208 	add.w	r2, r7, #8
 8003688:	18d4      	adds	r4, r2, r3
 800368a:	4608      	mov	r0, r1
 800368c:	f001 f957 	bl	800493e <SDIO_ReadFIFO>
 8003690:	4603      	mov	r3, r0
 8003692:	6023      	str	r3, [r4, #0]
      index++;
 8003694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003696:	3301      	adds	r3, #1
 8003698:	637b      	str	r3, [r7, #52]	; 0x34
 800369a:	e006      	b.n	80036aa <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d012      	beq.n	80036d0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80036aa:	f7fd fcb1 	bl	8001010 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d102      	bne.n	80036c0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80036ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80036be:	e05a      	b.n	8003776 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0cf      	beq.n	800366e <SD_FindSCR+0x96>
 80036ce:	e000      	b.n	80036d2 <SD_FindSCR+0xfa>
      break;
 80036d0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2208      	movs	r2, #8
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80036e8:	2308      	movs	r3, #8
 80036ea:	e044      	b.n	8003776 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2202      	movs	r2, #2
 8003700:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003702:	2302      	movs	r3, #2
 8003704:	e037      	b.n	8003776 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2220      	movs	r2, #32
 800371a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800371c:	2320      	movs	r3, #32
 800371e:	e02a      	b.n	8003776 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f240 523a 	movw	r2, #1338	; 0x53a
 8003728:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	061a      	lsls	r2, r3, #24
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003736:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	0a1b      	lsrs	r3, r3, #8
 800373c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003740:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	0e1b      	lsrs	r3, r3, #24
 8003746:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374a:	601a      	str	r2, [r3, #0]
    scr++;
 800374c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374e:	3304      	adds	r3, #4
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	061a      	lsls	r2, r3, #24
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800375e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	0a1b      	lsrs	r3, r3, #8
 8003764:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003768:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	0e1b      	lsrs	r3, r3, #24
 800376e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003772:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	373c      	adds	r7, #60	; 0x3c
 800377a:	46bd      	mov	sp, r7
 800377c:	bd90      	pop	{r4, r7, pc}

0800377e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e03f      	b.n	8003810 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d106      	bne.n	80037aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7fd fb0b 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2224      	movs	r2, #36	; 0x24
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fe1c 	bl	8004400 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695a      	ldr	r2, [r3, #20]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b20      	cmp	r3, #32
 8003836:	d17c      	bne.n	8003932 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_UART_Transmit+0x2c>
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e075      	b.n	8003934 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_UART_Transmit+0x3e>
 8003852:	2302      	movs	r3, #2
 8003854:	e06e      	b.n	8003934 <HAL_UART_Transmit+0x11c>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2221      	movs	r2, #33	; 0x21
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800386c:	f7fd fbd0 	bl	8001010 <HAL_GetTick>
 8003870:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	88fa      	ldrh	r2, [r7, #6]
 8003876:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	88fa      	ldrh	r2, [r7, #6]
 800387c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003886:	d108      	bne.n	800389a <HAL_UART_Transmit+0x82>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d104      	bne.n	800389a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003890:	2300      	movs	r3, #0
 8003892:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	61bb      	str	r3, [r7, #24]
 8003898:	e003      	b.n	80038a2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038aa:	e02a      	b.n	8003902 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2200      	movs	r2, #0
 80038b4:	2180      	movs	r1, #128	; 0x80
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 fb9a 	bl	8003ff0 <UART_WaitOnFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e036      	b.n	8003934 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10b      	bne.n	80038e4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038da:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	3302      	adds	r3, #2
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	e007      	b.n	80038f4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	781a      	ldrb	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3301      	adds	r3, #1
 80038f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1cf      	bne.n	80038ac <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2200      	movs	r2, #0
 8003914:	2140      	movs	r1, #64	; 0x40
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fb6a 	bl	8003ff0 <UART_WaitOnFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e006      	b.n	8003934 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e000      	b.n	8003934 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003932:	2302      	movs	r3, #2
  }
}
 8003934:	4618      	mov	r0, r3
 8003936:	3720      	adds	r7, #32
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	; 0x28
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b20      	cmp	r3, #32
 800395a:	f040 808c 	bne.w	8003a76 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <HAL_UART_Receive+0x2e>
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e084      	b.n	8003a78 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_UART_Receive+0x40>
 8003978:	2302      	movs	r3, #2
 800397a:	e07d      	b.n	8003a78 <HAL_UART_Receive+0x13c>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2222      	movs	r2, #34	; 0x22
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003998:	f7fd fb3a 	bl	8001010 <HAL_GetTick>
 800399c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	88fa      	ldrh	r2, [r7, #6]
 80039a2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	88fa      	ldrh	r2, [r7, #6]
 80039a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b2:	d108      	bne.n	80039c6 <HAL_UART_Receive+0x8a>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d104      	bne.n	80039c6 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	61bb      	str	r3, [r7, #24]
 80039c4:	e003      	b.n	80039ce <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80039d6:	e043      	b.n	8003a60 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2200      	movs	r2, #0
 80039e0:	2120      	movs	r1, #32
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 fb04 	bl	8003ff0 <UART_WaitOnFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e042      	b.n	8003a78 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10c      	bne.n	8003a12 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	3302      	adds	r3, #2
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	e01f      	b.n	8003a52 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1a:	d007      	beq.n	8003a2c <HAL_UART_Receive+0xf0>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <HAL_UART_Receive+0xfe>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d106      	bne.n	8003a3a <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	e008      	b.n	8003a4c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1b6      	bne.n	80039d8 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e000      	b.n	8003a78 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003a76:	2302      	movs	r3, #2
  }
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3720      	adds	r7, #32
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b0ba      	sub	sp, #232	; 0xe8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003abe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10f      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d009      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x66>
 8003ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fbd3 	bl	800428a <UART_Receive_IT>
      return;
 8003ae4:	e256      	b.n	8003f94 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80de 	beq.w	8003cac <HAL_UART_IRQHandler+0x22c>
 8003af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80d1 	beq.w	8003cac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <HAL_UART_IRQHandler+0xae>
 8003b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f043 0201 	orr.w	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <HAL_UART_IRQHandler+0xd2>
 8003b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f043 0202 	orr.w	r2, r3, #2
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_UART_IRQHandler+0xf6>
 8003b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f043 0204 	orr.w	r2, r3, #4
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d011      	beq.n	8003ba6 <HAL_UART_IRQHandler+0x126>
 8003b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d105      	bne.n	8003b9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f043 0208 	orr.w	r2, r3, #8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 81ed 	beq.w	8003f8a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_UART_IRQHandler+0x14e>
 8003bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fb5e 	bl	800428a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd8:	2b40      	cmp	r3, #64	; 0x40
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d103      	bne.n	8003bfa <HAL_UART_IRQHandler+0x17a>
 8003bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d04f      	beq.n	8003c9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fa66 	bl	80040cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0a:	2b40      	cmp	r3, #64	; 0x40
 8003c0c:	d141      	bne.n	8003c92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3314      	adds	r3, #20
 8003c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3314      	adds	r3, #20
 8003c36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1d9      	bne.n	8003c0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d013      	beq.n	8003c8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	4a7d      	ldr	r2, [pc, #500]	; (8003e5c <HAL_UART_IRQHandler+0x3dc>)
 8003c68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd fb99 	bl	80013a6 <HAL_DMA_Abort_IT>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d016      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c84:	4610      	mov	r0, r2
 8003c86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c88:	e00e      	b.n	8003ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f99a 	bl	8003fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c90:	e00a      	b.n	8003ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f996 	bl	8003fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c98:	e006      	b.n	8003ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f992 	bl	8003fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ca6:	e170      	b.n	8003f8a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca8:	bf00      	nop
    return;
 8003caa:	e16e      	b.n	8003f8a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	f040 814a 	bne.w	8003f4a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 8143 	beq.w	8003f4a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 813c 	beq.w	8003f4a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf2:	2b40      	cmp	r3, #64	; 0x40
 8003cf4:	f040 80b4 	bne.w	8003e60 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8140 	beq.w	8003f8e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d16:	429a      	cmp	r2, r3
 8003d18:	f080 8139 	bcs.w	8003f8e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2e:	f000 8088 	beq.w	8003e42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	330c      	adds	r3, #12
 8003d38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1d9      	bne.n	8003d32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3314      	adds	r3, #20
 8003d84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d88:	e853 3f00 	ldrex	r3, [r3]
 8003d8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3314      	adds	r3, #20
 8003d9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003da2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003da6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003daa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e1      	bne.n	8003d7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3314      	adds	r3, #20
 8003dc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dc4:	e853 3f00 	ldrex	r3, [r3]
 8003dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3314      	adds	r3, #20
 8003dda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003de0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003de4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003de6:	e841 2300 	strex	r3, r2, [r1]
 8003dea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1e3      	bne.n	8003dba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	330c      	adds	r3, #12
 8003e06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e0a:	e853 3f00 	ldrex	r3, [r3]
 8003e0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e12:	f023 0310 	bic.w	r3, r3, #16
 8003e16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	330c      	adds	r3, #12
 8003e20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e24:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e2c:	e841 2300 	strex	r3, r2, [r1]
 8003e30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e3      	bne.n	8003e00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fd fa42 	bl	80012c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	4619      	mov	r1, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f8c0 	bl	8003fd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e58:	e099      	b.n	8003f8e <HAL_UART_IRQHandler+0x50e>
 8003e5a:	bf00      	nop
 8003e5c:	08004193 	.word	0x08004193
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 808b 	beq.w	8003f92 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 8086 	beq.w	8003f92 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	330c      	adds	r3, #12
 8003e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003eaa:	647a      	str	r2, [r7, #68]	; 0x44
 8003eac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003eb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e3      	bne.n	8003e86 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3314      	adds	r3, #20
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3314      	adds	r3, #20
 8003ede:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ee2:	633a      	str	r2, [r7, #48]	; 0x30
 8003ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e3      	bne.n	8003ebe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	e853 3f00 	ldrex	r3, [r3]
 8003f12:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0310 	bic.w	r3, r3, #16
 8003f1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	330c      	adds	r3, #12
 8003f24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f28:	61fa      	str	r2, [r7, #28]
 8003f2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	69b9      	ldr	r1, [r7, #24]
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	617b      	str	r3, [r7, #20]
   return(result);
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e3      	bne.n	8003f04 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f40:	4619      	mov	r1, r3
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f848 	bl	8003fd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f48:	e023      	b.n	8003f92 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <HAL_UART_IRQHandler+0x4ea>
 8003f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f929 	bl	80041ba <UART_Transmit_IT>
    return;
 8003f68:	e014      	b.n	8003f94 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00e      	beq.n	8003f94 <HAL_UART_IRQHandler+0x514>
 8003f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d008      	beq.n	8003f94 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f969 	bl	800425a <UART_EndTransmit_IT>
    return;
 8003f88:	e004      	b.n	8003f94 <HAL_UART_IRQHandler+0x514>
    return;
 8003f8a:	bf00      	nop
 8003f8c:	e002      	b.n	8003f94 <HAL_UART_IRQHandler+0x514>
      return;
 8003f8e:	bf00      	nop
 8003f90:	e000      	b.n	8003f94 <HAL_UART_IRQHandler+0x514>
      return;
 8003f92:	bf00      	nop
  }
}
 8003f94:	37e8      	adds	r7, #232	; 0xe8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop

08003f9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b090      	sub	sp, #64	; 0x40
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004000:	e050      	b.n	80040a4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d04c      	beq.n	80040a4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800400a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <UART_WaitOnFlagUntilTimeout+0x30>
 8004010:	f7fc fffe 	bl	8001010 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800401c:	429a      	cmp	r2, r3
 800401e:	d241      	bcs.n	80040a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	330c      	adds	r3, #12
 8004026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	330c      	adds	r3, #12
 800403e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004040:	637a      	str	r2, [r7, #52]	; 0x34
 8004042:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e5      	bne.n	8004020 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3314      	adds	r3, #20
 800405a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	613b      	str	r3, [r7, #16]
   return(result);
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	63bb      	str	r3, [r7, #56]	; 0x38
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3314      	adds	r3, #20
 8004072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004074:	623a      	str	r2, [r7, #32]
 8004076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	69f9      	ldr	r1, [r7, #28]
 800407a:	6a3a      	ldr	r2, [r7, #32]
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	61bb      	str	r3, [r7, #24]
   return(result);
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e5      	bne.n	8004054 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e00f      	b.n	80040c4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	4013      	ands	r3, r2
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	461a      	mov	r2, r3
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d09f      	beq.n	8004002 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3740      	adds	r7, #64	; 0x40
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b095      	sub	sp, #84	; 0x54
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	330c      	adds	r3, #12
 80040da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	330c      	adds	r3, #12
 80040f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040f4:	643a      	str	r2, [r7, #64]	; 0x40
 80040f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e5      	bne.n	80040d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3314      	adds	r3, #20
 800410e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	61fb      	str	r3, [r7, #28]
   return(result);
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f023 0301 	bic.w	r3, r3, #1
 800411e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3314      	adds	r3, #20
 8004126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004128:	62fa      	str	r2, [r7, #44]	; 0x2c
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800412e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e5      	bne.n	8004108 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	2b01      	cmp	r3, #1
 8004142:	d119      	bne.n	8004178 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	330c      	adds	r3, #12
 800414a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	e853 3f00 	ldrex	r3, [r3]
 8004152:	60bb      	str	r3, [r7, #8]
   return(result);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f023 0310 	bic.w	r3, r3, #16
 800415a:	647b      	str	r3, [r7, #68]	; 0x44
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004164:	61ba      	str	r2, [r7, #24]
 8004166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	6979      	ldr	r1, [r7, #20]
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	e841 2300 	strex	r3, r2, [r1]
 8004170:	613b      	str	r3, [r7, #16]
   return(result);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e5      	bne.n	8004144 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004186:	bf00      	nop
 8004188:	3754      	adds	r7, #84	; 0x54
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7ff ff09 	bl	8003fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b085      	sub	sp, #20
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b21      	cmp	r3, #33	; 0x21
 80041cc:	d13e      	bne.n	800424c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d6:	d114      	bne.n	8004202 <UART_Transmit_IT+0x48>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d110      	bne.n	8004202 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	1c9a      	adds	r2, r3, #2
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	621a      	str	r2, [r3, #32]
 8004200:	e008      	b.n	8004214 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	1c59      	adds	r1, r3, #1
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6211      	str	r1, [r2, #32]
 800420c:	781a      	ldrb	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29b      	uxth	r3, r3
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	4619      	mov	r1, r3
 8004222:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10f      	bne.n	8004248 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004236:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004246:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	e000      	b.n	800424e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800424c:	2302      	movs	r3, #2
  }
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004270:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff fe8e 	bl	8003f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b08c      	sub	sp, #48	; 0x30
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b22      	cmp	r3, #34	; 0x22
 800429c:	f040 80ab 	bne.w	80043f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a8:	d117      	bne.n	80042da <UART_Receive_IT+0x50>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d113      	bne.n	80042da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	1c9a      	adds	r2, r3, #2
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28
 80042d8:	e026      	b.n	8004328 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ec:	d007      	beq.n	80042fe <UART_Receive_IT+0x74>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10a      	bne.n	800430c <UART_Receive_IT+0x82>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004308:	701a      	strb	r2, [r3, #0]
 800430a:	e008      	b.n	800431e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004318:	b2da      	uxtb	r2, r3
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29b      	uxth	r3, r3
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	4619      	mov	r1, r3
 8004336:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004338:	2b00      	cmp	r3, #0
 800433a:	d15a      	bne.n	80043f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0220 	bic.w	r2, r2, #32
 800434a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800435a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0201 	bic.w	r2, r2, #1
 800436a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	2b01      	cmp	r3, #1
 800437a:	d135      	bne.n	80043e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	330c      	adds	r3, #12
 8004388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	613b      	str	r3, [r7, #16]
   return(result);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f023 0310 	bic.w	r3, r3, #16
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	330c      	adds	r3, #12
 80043a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a2:	623a      	str	r2, [r7, #32]
 80043a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	69f9      	ldr	r1, [r7, #28]
 80043a8:	6a3a      	ldr	r2, [r7, #32]
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e5      	bne.n	8004382 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b10      	cmp	r3, #16
 80043c2:	d10a      	bne.n	80043da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043de:	4619      	mov	r1, r3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff fdf9 	bl	8003fd8 <HAL_UARTEx_RxEventCallback>
 80043e6:	e002      	b.n	80043ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff fde1 	bl	8003fb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e002      	b.n	80043f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e000      	b.n	80043f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80043f6:	2302      	movs	r3, #2
  }
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3730      	adds	r7, #48	; 0x30
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004404:	b0c0      	sub	sp, #256	; 0x100
 8004406:	af00      	add	r7, sp, #0
 8004408:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441c:	68d9      	ldr	r1, [r3, #12]
 800441e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	ea40 0301 	orr.w	r3, r0, r1
 8004428:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800442a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	431a      	orrs	r2, r3
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	431a      	orrs	r2, r3
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004458:	f021 010c 	bic.w	r1, r1, #12
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004466:	430b      	orrs	r3, r1
 8004468:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800446a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447a:	6999      	ldr	r1, [r3, #24]
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	ea40 0301 	orr.w	r3, r0, r1
 8004486:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	4b8f      	ldr	r3, [pc, #572]	; (80046cc <UART_SetConfig+0x2cc>)
 8004490:	429a      	cmp	r2, r3
 8004492:	d005      	beq.n	80044a0 <UART_SetConfig+0xa0>
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	4b8d      	ldr	r3, [pc, #564]	; (80046d0 <UART_SetConfig+0x2d0>)
 800449c:	429a      	cmp	r2, r3
 800449e:	d104      	bne.n	80044aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044a0:	f7fd ffce 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 80044a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044a8:	e003      	b.n	80044b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044aa:	f7fd ffb5 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 80044ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044bc:	f040 810c 	bne.w	80046d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044c4:	2200      	movs	r2, #0
 80044c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044d2:	4622      	mov	r2, r4
 80044d4:	462b      	mov	r3, r5
 80044d6:	1891      	adds	r1, r2, r2
 80044d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80044da:	415b      	adcs	r3, r3
 80044dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044e2:	4621      	mov	r1, r4
 80044e4:	eb12 0801 	adds.w	r8, r2, r1
 80044e8:	4629      	mov	r1, r5
 80044ea:	eb43 0901 	adc.w	r9, r3, r1
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004502:	4690      	mov	r8, r2
 8004504:	4699      	mov	r9, r3
 8004506:	4623      	mov	r3, r4
 8004508:	eb18 0303 	adds.w	r3, r8, r3
 800450c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004510:	462b      	mov	r3, r5
 8004512:	eb49 0303 	adc.w	r3, r9, r3
 8004516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800451a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004526:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800452a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800452e:	460b      	mov	r3, r1
 8004530:	18db      	adds	r3, r3, r3
 8004532:	653b      	str	r3, [r7, #80]	; 0x50
 8004534:	4613      	mov	r3, r2
 8004536:	eb42 0303 	adc.w	r3, r2, r3
 800453a:	657b      	str	r3, [r7, #84]	; 0x54
 800453c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004540:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004544:	f7fb fe40 	bl	80001c8 <__aeabi_uldivmod>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4b61      	ldr	r3, [pc, #388]	; (80046d4 <UART_SetConfig+0x2d4>)
 800454e:	fba3 2302 	umull	r2, r3, r3, r2
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	011c      	lsls	r4, r3, #4
 8004556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800455a:	2200      	movs	r2, #0
 800455c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004560:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004564:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004568:	4642      	mov	r2, r8
 800456a:	464b      	mov	r3, r9
 800456c:	1891      	adds	r1, r2, r2
 800456e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004570:	415b      	adcs	r3, r3
 8004572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004574:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004578:	4641      	mov	r1, r8
 800457a:	eb12 0a01 	adds.w	sl, r2, r1
 800457e:	4649      	mov	r1, r9
 8004580:	eb43 0b01 	adc.w	fp, r3, r1
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004590:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004594:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004598:	4692      	mov	sl, r2
 800459a:	469b      	mov	fp, r3
 800459c:	4643      	mov	r3, r8
 800459e:	eb1a 0303 	adds.w	r3, sl, r3
 80045a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045a6:	464b      	mov	r3, r9
 80045a8:	eb4b 0303 	adc.w	r3, fp, r3
 80045ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045c4:	460b      	mov	r3, r1
 80045c6:	18db      	adds	r3, r3, r3
 80045c8:	643b      	str	r3, [r7, #64]	; 0x40
 80045ca:	4613      	mov	r3, r2
 80045cc:	eb42 0303 	adc.w	r3, r2, r3
 80045d0:	647b      	str	r3, [r7, #68]	; 0x44
 80045d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045da:	f7fb fdf5 	bl	80001c8 <__aeabi_uldivmod>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4611      	mov	r1, r2
 80045e4:	4b3b      	ldr	r3, [pc, #236]	; (80046d4 <UART_SetConfig+0x2d4>)
 80045e6:	fba3 2301 	umull	r2, r3, r3, r1
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	2264      	movs	r2, #100	; 0x64
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	1acb      	subs	r3, r1, r3
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045fa:	4b36      	ldr	r3, [pc, #216]	; (80046d4 <UART_SetConfig+0x2d4>)
 80045fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004608:	441c      	add	r4, r3
 800460a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800460e:	2200      	movs	r2, #0
 8004610:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004614:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004618:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800461c:	4642      	mov	r2, r8
 800461e:	464b      	mov	r3, r9
 8004620:	1891      	adds	r1, r2, r2
 8004622:	63b9      	str	r1, [r7, #56]	; 0x38
 8004624:	415b      	adcs	r3, r3
 8004626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004628:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800462c:	4641      	mov	r1, r8
 800462e:	1851      	adds	r1, r2, r1
 8004630:	6339      	str	r1, [r7, #48]	; 0x30
 8004632:	4649      	mov	r1, r9
 8004634:	414b      	adcs	r3, r1
 8004636:	637b      	str	r3, [r7, #52]	; 0x34
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004644:	4659      	mov	r1, fp
 8004646:	00cb      	lsls	r3, r1, #3
 8004648:	4651      	mov	r1, sl
 800464a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800464e:	4651      	mov	r1, sl
 8004650:	00ca      	lsls	r2, r1, #3
 8004652:	4610      	mov	r0, r2
 8004654:	4619      	mov	r1, r3
 8004656:	4603      	mov	r3, r0
 8004658:	4642      	mov	r2, r8
 800465a:	189b      	adds	r3, r3, r2
 800465c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004660:	464b      	mov	r3, r9
 8004662:	460a      	mov	r2, r1
 8004664:	eb42 0303 	adc.w	r3, r2, r3
 8004668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800466c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004678:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800467c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004680:	460b      	mov	r3, r1
 8004682:	18db      	adds	r3, r3, r3
 8004684:	62bb      	str	r3, [r7, #40]	; 0x28
 8004686:	4613      	mov	r3, r2
 8004688:	eb42 0303 	adc.w	r3, r2, r3
 800468c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800468e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004692:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004696:	f7fb fd97 	bl	80001c8 <__aeabi_uldivmod>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <UART_SetConfig+0x2d4>)
 80046a0:	fba3 1302 	umull	r1, r3, r3, r2
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	2164      	movs	r1, #100	; 0x64
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	3332      	adds	r3, #50	; 0x32
 80046b2:	4a08      	ldr	r2, [pc, #32]	; (80046d4 <UART_SetConfig+0x2d4>)
 80046b4:	fba2 2303 	umull	r2, r3, r2, r3
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	f003 0207 	and.w	r2, r3, #7
 80046be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4422      	add	r2, r4
 80046c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046c8:	e105      	b.n	80048d6 <UART_SetConfig+0x4d6>
 80046ca:	bf00      	nop
 80046cc:	40011000 	.word	0x40011000
 80046d0:	40011400 	.word	0x40011400
 80046d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046dc:	2200      	movs	r2, #0
 80046de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046ea:	4642      	mov	r2, r8
 80046ec:	464b      	mov	r3, r9
 80046ee:	1891      	adds	r1, r2, r2
 80046f0:	6239      	str	r1, [r7, #32]
 80046f2:	415b      	adcs	r3, r3
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
 80046f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046fa:	4641      	mov	r1, r8
 80046fc:	1854      	adds	r4, r2, r1
 80046fe:	4649      	mov	r1, r9
 8004700:	eb43 0501 	adc.w	r5, r3, r1
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	00eb      	lsls	r3, r5, #3
 800470e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004712:	00e2      	lsls	r2, r4, #3
 8004714:	4614      	mov	r4, r2
 8004716:	461d      	mov	r5, r3
 8004718:	4643      	mov	r3, r8
 800471a:	18e3      	adds	r3, r4, r3
 800471c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004720:	464b      	mov	r3, r9
 8004722:	eb45 0303 	adc.w	r3, r5, r3
 8004726:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800472a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004736:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004746:	4629      	mov	r1, r5
 8004748:	008b      	lsls	r3, r1, #2
 800474a:	4621      	mov	r1, r4
 800474c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004750:	4621      	mov	r1, r4
 8004752:	008a      	lsls	r2, r1, #2
 8004754:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004758:	f7fb fd36 	bl	80001c8 <__aeabi_uldivmod>
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	4b60      	ldr	r3, [pc, #384]	; (80048e4 <UART_SetConfig+0x4e4>)
 8004762:	fba3 2302 	umull	r2, r3, r3, r2
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	011c      	lsls	r4, r3, #4
 800476a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800476e:	2200      	movs	r2, #0
 8004770:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004774:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004778:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800477c:	4642      	mov	r2, r8
 800477e:	464b      	mov	r3, r9
 8004780:	1891      	adds	r1, r2, r2
 8004782:	61b9      	str	r1, [r7, #24]
 8004784:	415b      	adcs	r3, r3
 8004786:	61fb      	str	r3, [r7, #28]
 8004788:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800478c:	4641      	mov	r1, r8
 800478e:	1851      	adds	r1, r2, r1
 8004790:	6139      	str	r1, [r7, #16]
 8004792:	4649      	mov	r1, r9
 8004794:	414b      	adcs	r3, r1
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047a4:	4659      	mov	r1, fp
 80047a6:	00cb      	lsls	r3, r1, #3
 80047a8:	4651      	mov	r1, sl
 80047aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ae:	4651      	mov	r1, sl
 80047b0:	00ca      	lsls	r2, r1, #3
 80047b2:	4610      	mov	r0, r2
 80047b4:	4619      	mov	r1, r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	4642      	mov	r2, r8
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047c0:	464b      	mov	r3, r9
 80047c2:	460a      	mov	r2, r1
 80047c4:	eb42 0303 	adc.w	r3, r2, r3
 80047c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80047d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047e4:	4649      	mov	r1, r9
 80047e6:	008b      	lsls	r3, r1, #2
 80047e8:	4641      	mov	r1, r8
 80047ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ee:	4641      	mov	r1, r8
 80047f0:	008a      	lsls	r2, r1, #2
 80047f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047f6:	f7fb fce7 	bl	80001c8 <__aeabi_uldivmod>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	4b39      	ldr	r3, [pc, #228]	; (80048e4 <UART_SetConfig+0x4e4>)
 8004800:	fba3 1302 	umull	r1, r3, r3, r2
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	2164      	movs	r1, #100	; 0x64
 8004808:	fb01 f303 	mul.w	r3, r1, r3
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	3332      	adds	r3, #50	; 0x32
 8004812:	4a34      	ldr	r2, [pc, #208]	; (80048e4 <UART_SetConfig+0x4e4>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800481e:	441c      	add	r4, r3
 8004820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004824:	2200      	movs	r2, #0
 8004826:	673b      	str	r3, [r7, #112]	; 0x70
 8004828:	677a      	str	r2, [r7, #116]	; 0x74
 800482a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800482e:	4642      	mov	r2, r8
 8004830:	464b      	mov	r3, r9
 8004832:	1891      	adds	r1, r2, r2
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	415b      	adcs	r3, r3
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800483e:	4641      	mov	r1, r8
 8004840:	1851      	adds	r1, r2, r1
 8004842:	6039      	str	r1, [r7, #0]
 8004844:	4649      	mov	r1, r9
 8004846:	414b      	adcs	r3, r1
 8004848:	607b      	str	r3, [r7, #4]
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004856:	4659      	mov	r1, fp
 8004858:	00cb      	lsls	r3, r1, #3
 800485a:	4651      	mov	r1, sl
 800485c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004860:	4651      	mov	r1, sl
 8004862:	00ca      	lsls	r2, r1, #3
 8004864:	4610      	mov	r0, r2
 8004866:	4619      	mov	r1, r3
 8004868:	4603      	mov	r3, r0
 800486a:	4642      	mov	r2, r8
 800486c:	189b      	adds	r3, r3, r2
 800486e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004870:	464b      	mov	r3, r9
 8004872:	460a      	mov	r2, r1
 8004874:	eb42 0303 	adc.w	r3, r2, r3
 8004878:	66fb      	str	r3, [r7, #108]	; 0x6c
 800487a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	663b      	str	r3, [r7, #96]	; 0x60
 8004884:	667a      	str	r2, [r7, #100]	; 0x64
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004892:	4649      	mov	r1, r9
 8004894:	008b      	lsls	r3, r1, #2
 8004896:	4641      	mov	r1, r8
 8004898:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800489c:	4641      	mov	r1, r8
 800489e:	008a      	lsls	r2, r1, #2
 80048a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048a4:	f7fb fc90 	bl	80001c8 <__aeabi_uldivmod>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4b0d      	ldr	r3, [pc, #52]	; (80048e4 <UART_SetConfig+0x4e4>)
 80048ae:	fba3 1302 	umull	r1, r3, r3, r2
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	2164      	movs	r1, #100	; 0x64
 80048b6:	fb01 f303 	mul.w	r3, r1, r3
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	3332      	adds	r3, #50	; 0x32
 80048c0:	4a08      	ldr	r2, [pc, #32]	; (80048e4 <UART_SetConfig+0x4e4>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	f003 020f 	and.w	r2, r3, #15
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4422      	add	r2, r4
 80048d4:	609a      	str	r2, [r3, #8]
}
 80048d6:	bf00      	nop
 80048d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048dc:	46bd      	mov	sp, r7
 80048de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048e2:	bf00      	nop
 80048e4:	51eb851f 	.word	0x51eb851f

080048e8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80048e8:	b084      	sub	sp, #16
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	f107 001c 	add.w	r0, r7, #28
 80048f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80048fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004900:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004902:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004906:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800490a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800490c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800490e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004912:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004922:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	b004      	add	sp, #16
 800493c:	4770      	bx	lr

0800493e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800494c:	4618      	mov	r0, r3
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2203      	movs	r2, #3
 8004986:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0303 	and.w	r3, r3, #3
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80049d0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80049d6:	431a      	orrs	r2, r3
                       Command->CPSM);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80049dc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80049ec:	f023 030f 	bic.w	r3, r3, #15
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	b2db      	uxtb	r3, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3314      	adds	r3, #20
 8004a2e:	461a      	mov	r2, r3
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	4413      	add	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
}  
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004a6c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004a72:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004a78:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0

}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b088      	sub	sp, #32
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004aac:	2310      	movs	r3, #16
 8004aae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ab0:	2340      	movs	r3, #64	; 0x40
 8004ab2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004abc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004abe:	f107 0308 	add.w	r3, r7, #8
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff ff74 	bl	80049b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ace:	2110      	movs	r1, #16
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fa19 	bl	8004f08 <SDMMC_GetCmdResp1>
 8004ad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b088      	sub	sp, #32
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004af0:	2311      	movs	r3, #17
 8004af2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004af4:	2340      	movs	r3, #64	; 0x40
 8004af6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b02:	f107 0308 	add.w	r3, r7, #8
 8004b06:	4619      	mov	r1, r3
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff ff52 	bl	80049b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b12:	2111      	movs	r1, #17
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f9f7 	bl	8004f08 <SDMMC_GetCmdResp1>
 8004b1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3720      	adds	r7, #32
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b088      	sub	sp, #32
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004b34:	2312      	movs	r3, #18
 8004b36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b38:	2340      	movs	r3, #64	; 0x40
 8004b3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b46:	f107 0308 	add.w	r3, r7, #8
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff ff30 	bl	80049b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b56:	2112      	movs	r1, #18
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f9d5 	bl	8004f08 <SDMMC_GetCmdResp1>
 8004b5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b60:	69fb      	ldr	r3, [r7, #28]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3720      	adds	r7, #32
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b088      	sub	sp, #32
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004b78:	2318      	movs	r3, #24
 8004b7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b7c:	2340      	movs	r3, #64	; 0x40
 8004b7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b80:	2300      	movs	r3, #0
 8004b82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b8a:	f107 0308 	add.w	r3, r7, #8
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff ff0e 	bl	80049b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9a:	2118      	movs	r1, #24
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f9b3 	bl	8004f08 <SDMMC_GetCmdResp1>
 8004ba2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ba4:	69fb      	ldr	r3, [r7, #28]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b088      	sub	sp, #32
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004bbc:	2319      	movs	r3, #25
 8004bbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bc0:	2340      	movs	r3, #64	; 0x40
 8004bc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bcc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bce:	f107 0308 	add.w	r3, r7, #8
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff feec 	bl	80049b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bde:	2119      	movs	r1, #25
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f991 	bl	8004f08 <SDMMC_GetCmdResp1>
 8004be6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004be8:	69fb      	ldr	r3, [r7, #28]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3720      	adds	r7, #32
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004c00:	230c      	movs	r3, #12
 8004c02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c04:	2340      	movs	r3, #64	; 0x40
 8004c06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c12:	f107 0308 	add.w	r3, r7, #8
 8004c16:	4619      	mov	r1, r3
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff feca 	bl	80049b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004c1e:	4a05      	ldr	r2, [pc, #20]	; (8004c34 <SDMMC_CmdStopTransfer+0x40>)
 8004c20:	210c      	movs	r1, #12
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f970 	bl	8004f08 <SDMMC_GetCmdResp1>
 8004c28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3720      	adds	r7, #32
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	05f5e100 	.word	0x05f5e100

08004c38 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004c48:	2307      	movs	r3, #7
 8004c4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c4c:	2340      	movs	r3, #64	; 0x40
 8004c4e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c58:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c5a:	f107 0310 	add.w	r3, r7, #16
 8004c5e:	4619      	mov	r1, r3
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f7ff fea6 	bl	80049b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6a:	2107      	movs	r1, #7
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f94b 	bl	8004f08 <SDMMC_GetCmdResp1>
 8004c72:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3728      	adds	r7, #40	; 0x28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b088      	sub	sp, #32
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c9c:	f107 0308 	add.w	r3, r7, #8
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff fe85 	bl	80049b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fb65 	bl	8005378 <SDMMC_GetCmdError>
 8004cae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b088      	sub	sp, #32
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004cc2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004cc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004cc8:	2308      	movs	r3, #8
 8004cca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ccc:	2340      	movs	r3, #64	; 0x40
 8004cce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cda:	f107 0308 	add.w	r3, r7, #8
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff fe66 	bl	80049b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 faf8 	bl	80052dc <SDMMC_GetCmdResp7>
 8004cec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cee:	69fb      	ldr	r3, [r7, #28]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3720      	adds	r7, #32
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004d06:	2337      	movs	r3, #55	; 0x37
 8004d08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d0a:	2340      	movs	r3, #64	; 0x40
 8004d0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d18:	f107 0308 	add.w	r3, r7, #8
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff fe47 	bl	80049b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d28:	2137      	movs	r1, #55	; 0x37
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f8ec 	bl	8004f08 <SDMMC_GetCmdResp1>
 8004d30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d32:	69fb      	ldr	r3, [r7, #28]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3720      	adds	r7, #32
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004d52:	2329      	movs	r3, #41	; 0x29
 8004d54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d56:	2340      	movs	r3, #64	; 0x40
 8004d58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d64:	f107 0308 	add.w	r3, r7, #8
 8004d68:	4619      	mov	r1, r3
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff fe21 	bl	80049b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f9ff 	bl	8005174 <SDMMC_GetCmdResp3>
 8004d76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d78:	69fb      	ldr	r3, [r7, #28]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b088      	sub	sp, #32
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004d90:	2306      	movs	r3, #6
 8004d92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d94:	2340      	movs	r3, #64	; 0x40
 8004d96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004da0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004da2:	f107 0308 	add.w	r3, r7, #8
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7ff fe02 	bl	80049b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db2:	2106      	movs	r1, #6
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f8a7 	bl	8004f08 <SDMMC_GetCmdResp1>
 8004dba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dbc:	69fb      	ldr	r3, [r7, #28]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3720      	adds	r7, #32
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b088      	sub	sp, #32
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004dd2:	2333      	movs	r3, #51	; 0x33
 8004dd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dd6:	2340      	movs	r3, #64	; 0x40
 8004dd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004de2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004de4:	f107 0308 	add.w	r3, r7, #8
 8004de8:	4619      	mov	r1, r3
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff fde1 	bl	80049b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df4:	2133      	movs	r1, #51	; 0x33
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f886 	bl	8004f08 <SDMMC_GetCmdResp1>
 8004dfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3720      	adds	r7, #32
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004e14:	2302      	movs	r3, #2
 8004e16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004e18:	23c0      	movs	r3, #192	; 0xc0
 8004e1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e26:	f107 0308 	add.w	r3, r7, #8
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff fdc0 	bl	80049b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f956 	bl	80050e4 <SDMMC_GetCmdResp2>
 8004e38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e3a:	69fb      	ldr	r3, [r7, #28]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3720      	adds	r7, #32
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004e52:	2309      	movs	r3, #9
 8004e54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004e56:	23c0      	movs	r3, #192	; 0xc0
 8004e58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e64:	f107 0308 	add.w	r3, r7, #8
 8004e68:	4619      	mov	r1, r3
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff fda1 	bl	80049b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f937 	bl	80050e4 <SDMMC_GetCmdResp2>
 8004e76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e78:	69fb      	ldr	r3, [r7, #28]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b088      	sub	sp, #32
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004e90:	2303      	movs	r3, #3
 8004e92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e94:	2340      	movs	r3, #64	; 0x40
 8004e96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ea0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ea2:	f107 0308 	add.w	r3, r7, #8
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff fd82 	bl	80049b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	2103      	movs	r1, #3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f99c 	bl	80051f0 <SDMMC_GetCmdResp6>
 8004eb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004eba:	69fb      	ldr	r3, [r7, #28]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004ed2:	230d      	movs	r3, #13
 8004ed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ed6:	2340      	movs	r3, #64	; 0x40
 8004ed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ee2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ee4:	f107 0308 	add.w	r3, r7, #8
 8004ee8:	4619      	mov	r1, r3
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff fd61 	bl	80049b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef4:	210d      	movs	r1, #13
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f806 	bl	8004f08 <SDMMC_GetCmdResp1>
 8004efc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004efe:	69fb      	ldr	r3, [r7, #28]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3720      	adds	r7, #32
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	460b      	mov	r3, r1
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004f16:	4b70      	ldr	r3, [pc, #448]	; (80050d8 <SDMMC_GetCmdResp1+0x1d0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a70      	ldr	r2, [pc, #448]	; (80050dc <SDMMC_GetCmdResp1+0x1d4>)
 8004f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f20:	0a5a      	lsrs	r2, r3, #9
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	fb02 f303 	mul.w	r3, r2, r3
 8004f28:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	1e5a      	subs	r2, r3, #1
 8004f2e:	61fa      	str	r2, [r7, #28]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d102      	bne.n	8004f3a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f38:	e0c9      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0ef      	beq.n	8004f2a <SDMMC_GetCmdResp1+0x22>
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1ea      	bne.n	8004f2a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d004      	beq.n	8004f6a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2204      	movs	r2, #4
 8004f64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f66:	2304      	movs	r3, #4
 8004f68:	e0b1      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d004      	beq.n	8004f80 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e0a6      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	22c5      	movs	r2, #197	; 0xc5
 8004f84:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f7ff fd3d 	bl	8004a06 <SDIO_GetCommandResponse>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	461a      	mov	r2, r3
 8004f90:	7afb      	ldrb	r3, [r7, #11]
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d001      	beq.n	8004f9a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e099      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f7ff fd3f 	bl	8004a20 <SDIO_GetResponse>
 8004fa2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4b4e      	ldr	r3, [pc, #312]	; (80050e0 <SDMMC_GetCmdResp1+0x1d8>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e08d      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	da02      	bge.n	8004fbe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004fb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fbc:	e087      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004fc8:	2340      	movs	r3, #64	; 0x40
 8004fca:	e080      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004fd6:	2380      	movs	r3, #128	; 0x80
 8004fd8:	e079      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fe8:	e071      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ff8:	e069      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005008:	e061      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005014:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005018:	e059      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005028:	e051      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005038:	e049      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005044:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005048:	e041      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005054:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005058:	e039      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005068:	e031      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005074:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005078:	e029      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005084:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005088:	e021      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005094:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005098:	e019      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80050a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80050a8:	e011      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80050b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050b8:	e009      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80050c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80050c8:	e001      	b.n	80050ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80050ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3720      	adds	r7, #32
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000000 	.word	0x20000000
 80050dc:	10624dd3 	.word	0x10624dd3
 80050e0:	fdffe008 	.word	0xfdffe008

080050e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050ec:	4b1f      	ldr	r3, [pc, #124]	; (800516c <SDMMC_GetCmdResp2+0x88>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1f      	ldr	r2, [pc, #124]	; (8005170 <SDMMC_GetCmdResp2+0x8c>)
 80050f2:	fba2 2303 	umull	r2, r3, r2, r3
 80050f6:	0a5b      	lsrs	r3, r3, #9
 80050f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fc:	fb02 f303 	mul.w	r3, r2, r3
 8005100:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1e5a      	subs	r2, r3, #1
 8005106:	60fa      	str	r2, [r7, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d102      	bne.n	8005112 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800510c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005110:	e026      	b.n	8005160 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005116:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0ef      	beq.n	8005102 <SDMMC_GetCmdResp2+0x1e>
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1ea      	bne.n	8005102 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d004      	beq.n	8005142 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2204      	movs	r2, #4
 800513c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800513e:	2304      	movs	r3, #4
 8005140:	e00e      	b.n	8005160 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d004      	beq.n	8005158 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005154:	2301      	movs	r3, #1
 8005156:	e003      	b.n	8005160 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	22c5      	movs	r2, #197	; 0xc5
 800515c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	20000000 	.word	0x20000000
 8005170:	10624dd3 	.word	0x10624dd3

08005174 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800517c:	4b1a      	ldr	r3, [pc, #104]	; (80051e8 <SDMMC_GetCmdResp3+0x74>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a1a      	ldr	r2, [pc, #104]	; (80051ec <SDMMC_GetCmdResp3+0x78>)
 8005182:	fba2 2303 	umull	r2, r3, r2, r3
 8005186:	0a5b      	lsrs	r3, r3, #9
 8005188:	f241 3288 	movw	r2, #5000	; 0x1388
 800518c:	fb02 f303 	mul.w	r3, r2, r3
 8005190:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	1e5a      	subs	r2, r3, #1
 8005196:	60fa      	str	r2, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d102      	bne.n	80051a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800519c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80051a0:	e01b      	b.n	80051da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0ef      	beq.n	8005192 <SDMMC_GetCmdResp3+0x1e>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1ea      	bne.n	8005192 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d004      	beq.n	80051d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2204      	movs	r2, #4
 80051cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80051ce:	2304      	movs	r3, #4
 80051d0:	e003      	b.n	80051da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	22c5      	movs	r2, #197	; 0xc5
 80051d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	20000000 	.word	0x20000000
 80051ec:	10624dd3 	.word	0x10624dd3

080051f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b088      	sub	sp, #32
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	460b      	mov	r3, r1
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051fe:	4b35      	ldr	r3, [pc, #212]	; (80052d4 <SDMMC_GetCmdResp6+0xe4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a35      	ldr	r2, [pc, #212]	; (80052d8 <SDMMC_GetCmdResp6+0xe8>)
 8005204:	fba2 2303 	umull	r2, r3, r2, r3
 8005208:	0a5b      	lsrs	r3, r3, #9
 800520a:	f241 3288 	movw	r2, #5000	; 0x1388
 800520e:	fb02 f303 	mul.w	r3, r2, r3
 8005212:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	1e5a      	subs	r2, r3, #1
 8005218:	61fa      	str	r2, [r7, #28]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d102      	bne.n	8005224 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800521e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005222:	e052      	b.n	80052ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005228:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0ef      	beq.n	8005214 <SDMMC_GetCmdResp6+0x24>
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1ea      	bne.n	8005214 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d004      	beq.n	8005254 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2204      	movs	r2, #4
 800524e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005250:	2304      	movs	r3, #4
 8005252:	e03a      	b.n	80052ca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d004      	beq.n	800526a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2201      	movs	r2, #1
 8005264:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005266:	2301      	movs	r3, #1
 8005268:	e02f      	b.n	80052ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f7ff fbcb 	bl	8004a06 <SDIO_GetCommandResponse>
 8005270:	4603      	mov	r3, r0
 8005272:	461a      	mov	r2, r3
 8005274:	7afb      	ldrb	r3, [r7, #11]
 8005276:	4293      	cmp	r3, r2
 8005278:	d001      	beq.n	800527e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800527a:	2301      	movs	r3, #1
 800527c:	e025      	b.n	80052ca <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	22c5      	movs	r2, #197	; 0xc5
 8005282:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005284:	2100      	movs	r1, #0
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f7ff fbca 	bl	8004a20 <SDIO_GetResponse>
 800528c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d106      	bne.n	80052a6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	0c1b      	lsrs	r3, r3, #16
 800529c:	b29a      	uxth	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	e011      	b.n	80052ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80052b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052b4:	e009      	b.n	80052ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80052c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052c4:	e001      	b.n	80052ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80052c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3720      	adds	r7, #32
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20000000 	.word	0x20000000
 80052d8:	10624dd3 	.word	0x10624dd3

080052dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80052e4:	4b22      	ldr	r3, [pc, #136]	; (8005370 <SDMMC_GetCmdResp7+0x94>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a22      	ldr	r2, [pc, #136]	; (8005374 <SDMMC_GetCmdResp7+0x98>)
 80052ea:	fba2 2303 	umull	r2, r3, r2, r3
 80052ee:	0a5b      	lsrs	r3, r3, #9
 80052f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f4:	fb02 f303 	mul.w	r3, r2, r3
 80052f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	1e5a      	subs	r2, r3, #1
 80052fe:	60fa      	str	r2, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005304:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005308:	e02c      	b.n	8005364 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0ef      	beq.n	80052fa <SDMMC_GetCmdResp7+0x1e>
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1ea      	bne.n	80052fa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d004      	beq.n	800533a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2204      	movs	r2, #4
 8005334:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005336:	2304      	movs	r3, #4
 8005338:	e014      	b.n	8005364 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800534c:	2301      	movs	r3, #1
 800534e:	e009      	b.n	8005364 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2240      	movs	r2, #64	; 0x40
 8005360:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005362:	2300      	movs	r3, #0
  
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	20000000 	.word	0x20000000
 8005374:	10624dd3 	.word	0x10624dd3

08005378 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005380:	4b11      	ldr	r3, [pc, #68]	; (80053c8 <SDMMC_GetCmdError+0x50>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a11      	ldr	r2, [pc, #68]	; (80053cc <SDMMC_GetCmdError+0x54>)
 8005386:	fba2 2303 	umull	r2, r3, r2, r3
 800538a:	0a5b      	lsrs	r3, r3, #9
 800538c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005390:	fb02 f303 	mul.w	r3, r2, r3
 8005394:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	1e5a      	subs	r2, r3, #1
 800539a:	60fa      	str	r2, [r7, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d102      	bne.n	80053a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053a4:	e009      	b.n	80053ba <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f1      	beq.n	8005396 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	22c5      	movs	r2, #197	; 0xc5
 80053b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	20000000 	.word	0x20000000
 80053cc:	10624dd3 	.word	0x10624dd3

080053d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80053d4:	4904      	ldr	r1, [pc, #16]	; (80053e8 <MX_FATFS_Init+0x18>)
 80053d6:	4805      	ldr	r0, [pc, #20]	; (80053ec <MX_FATFS_Init+0x1c>)
 80053d8:	f000 f9e4 	bl	80057a4 <FATFS_LinkDriver>
 80053dc:	4603      	mov	r3, r0
 80053de:	461a      	mov	r2, r3
 80053e0:	4b03      	ldr	r3, [pc, #12]	; (80053f0 <MX_FATFS_Init+0x20>)
 80053e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80053e4:	bf00      	nop
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	2000011c 	.word	0x2000011c
 80053ec:	080058c8 	.word	0x080058c8
 80053f0:	20000118 	.word	0x20000118

080053f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80053fe:	f000 f879 	bl	80054f4 <BSP_SD_IsDetected>
 8005402:	4603      	mov	r3, r0
 8005404:	2b01      	cmp	r3, #1
 8005406:	d001      	beq.n	800540c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e012      	b.n	8005432 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800540c:	480b      	ldr	r0, [pc, #44]	; (800543c <BSP_SD_Init+0x48>)
 800540e:	f7fd f82b 	bl	8002468 <HAL_SD_Init>
 8005412:	4603      	mov	r3, r0
 8005414:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d109      	bne.n	8005430 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800541c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005420:	4806      	ldr	r0, [pc, #24]	; (800543c <BSP_SD_Init+0x48>)
 8005422:	f7fd fe05 	bl	8003030 <HAL_SD_ConfigWideBusOperation>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005430:	79fb      	ldrb	r3, [r7, #7]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	2000002c 	.word	0x2000002c

08005440 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af02      	add	r7, sp, #8
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	68f9      	ldr	r1, [r7, #12]
 800545c:	4806      	ldr	r0, [pc, #24]	; (8005478 <BSP_SD_ReadBlocks+0x38>)
 800545e:	f7fd f8b3 	bl	80025c8 <HAL_SD_ReadBlocks>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800546c:	7dfb      	ldrb	r3, [r7, #23]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	2000002c 	.word	0x2000002c

0800547c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af02      	add	r7, sp, #8
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	68f9      	ldr	r1, [r7, #12]
 8005498:	4806      	ldr	r0, [pc, #24]	; (80054b4 <BSP_SD_WriteBlocks+0x38>)
 800549a:	f7fd fa73 	bl	8002984 <HAL_SD_WriteBlocks>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80054a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	2000002c 	.word	0x2000002c

080054b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80054bc:	4805      	ldr	r0, [pc, #20]	; (80054d4 <BSP_SD_GetCardState+0x1c>)
 80054be:	f7fd fe51 	bl	8003164 <HAL_SD_GetCardState>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	bf14      	ite	ne
 80054c8:	2301      	movne	r3, #1
 80054ca:	2300      	moveq	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	2000002c 	.word	0x2000002c

080054d8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	4803      	ldr	r0, [pc, #12]	; (80054f0 <BSP_SD_GetCardInfo+0x18>)
 80054e4:	f7fd fd78 	bl	8002fd8 <HAL_SD_GetCardInfo>
}
 80054e8:	bf00      	nop
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	2000002c 	.word	0x2000002c

080054f4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80054fa:	2301      	movs	r3, #1
 80054fc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80054fe:	f000 f80b 	bl	8005518 <BSP_PlatformIsDetected>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005508:	2300      	movs	r3, #0
 800550a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	b2db      	uxtb	r3, r3
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800551e:	2301      	movs	r3, #1
 8005520:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005522:	2110      	movs	r1, #16
 8005524:	4806      	ldr	r0, [pc, #24]	; (8005540 <BSP_PlatformIsDetected+0x28>)
 8005526:	f7fc fafb 	bl	8001b20 <HAL_GPIO_ReadPin>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8005530:	2300      	movs	r3, #0
 8005532:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005534:	79fb      	ldrb	r3, [r7, #7]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40021000 	.word	0x40021000

08005544 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	4603      	mov	r3, r0
 800554c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800554e:	4b0b      	ldr	r3, [pc, #44]	; (800557c <SD_CheckStatus+0x38>)
 8005550:	2201      	movs	r2, #1
 8005552:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005554:	f7ff ffb0 	bl	80054b8 <BSP_SD_GetCardState>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d107      	bne.n	800556e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800555e:	4b07      	ldr	r3, [pc, #28]	; (800557c <SD_CheckStatus+0x38>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	f023 0301 	bic.w	r3, r3, #1
 8005568:	b2da      	uxtb	r2, r3
 800556a:	4b04      	ldr	r3, [pc, #16]	; (800557c <SD_CheckStatus+0x38>)
 800556c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800556e:	4b03      	ldr	r3, [pc, #12]	; (800557c <SD_CheckStatus+0x38>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	b2db      	uxtb	r3, r3
}
 8005574:	4618      	mov	r0, r3
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	20000009 	.word	0x20000009

08005580 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800558a:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <SD_initialize+0x38>)
 800558c:	2201      	movs	r2, #1
 800558e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005590:	f7ff ff30 	bl	80053f4 <BSP_SD_Init>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d107      	bne.n	80055aa <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff ffd1 	bl	8005544 <SD_CheckStatus>
 80055a2:	4603      	mov	r3, r0
 80055a4:	461a      	mov	r2, r3
 80055a6:	4b04      	ldr	r3, [pc, #16]	; (80055b8 <SD_initialize+0x38>)
 80055a8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80055aa:	4b03      	ldr	r3, [pc, #12]	; (80055b8 <SD_initialize+0x38>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	b2db      	uxtb	r3, r3
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20000009 	.word	0x20000009

080055bc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4603      	mov	r3, r0
 80055c4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff ffbb 	bl	8005544 <SD_CheckStatus>
 80055ce:	4603      	mov	r3, r0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4603      	mov	r3, r0
 80055e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80055ec:	f04f 33ff 	mov.w	r3, #4294967295
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	68b8      	ldr	r0, [r7, #8]
 80055f6:	f7ff ff23 	bl	8005440 <BSP_SD_ReadBlocks>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d107      	bne.n	8005610 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005600:	bf00      	nop
 8005602:	f7ff ff59 	bl	80054b8 <BSP_SD_GetCardState>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1fa      	bne.n	8005602 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005610:	7dfb      	ldrb	r3, [r7, #23]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b086      	sub	sp, #24
 800561e:	af00      	add	r7, sp, #0
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
 8005626:	4603      	mov	r3, r0
 8005628:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800562e:	f04f 33ff 	mov.w	r3, #4294967295
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	68b8      	ldr	r0, [r7, #8]
 8005638:	f7ff ff20 	bl	800547c <BSP_SD_WriteBlocks>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d107      	bne.n	8005652 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005642:	bf00      	nop
 8005644:	f7ff ff38 	bl	80054b8 <BSP_SD_GetCardState>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1fa      	bne.n	8005644 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005652:	7dfb      	ldrb	r3, [r7, #23]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08c      	sub	sp, #48	; 0x30
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	603a      	str	r2, [r7, #0]
 8005666:	71fb      	strb	r3, [r7, #7]
 8005668:	460b      	mov	r3, r1
 800566a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005672:	4b25      	ldr	r3, [pc, #148]	; (8005708 <SD_ioctl+0xac>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <SD_ioctl+0x28>
 8005680:	2303      	movs	r3, #3
 8005682:	e03c      	b.n	80056fe <SD_ioctl+0xa2>

  switch (cmd)
 8005684:	79bb      	ldrb	r3, [r7, #6]
 8005686:	2b03      	cmp	r3, #3
 8005688:	d834      	bhi.n	80056f4 <SD_ioctl+0x98>
 800568a:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <SD_ioctl+0x34>)
 800568c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005690:	080056a1 	.word	0x080056a1
 8005694:	080056a9 	.word	0x080056a9
 8005698:	080056c1 	.word	0x080056c1
 800569c:	080056db 	.word	0x080056db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80056a6:	e028      	b.n	80056fa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80056a8:	f107 030c 	add.w	r3, r7, #12
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff ff13 	bl	80054d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80056b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80056b8:	2300      	movs	r3, #0
 80056ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80056be:	e01c      	b.n	80056fa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80056c0:	f107 030c 	add.w	r3, r7, #12
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff ff07 	bl	80054d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80056d8:	e00f      	b.n	80056fa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80056da:	f107 030c 	add.w	r3, r7, #12
 80056de:	4618      	mov	r0, r3
 80056e0:	f7ff fefa 	bl	80054d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	0a5a      	lsrs	r2, r3, #9
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80056f2:	e002      	b.n	80056fa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80056f4:	2304      	movs	r3, #4
 80056f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80056fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3730      	adds	r7, #48	; 0x30
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000009 	.word	0x20000009

0800570c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	4613      	mov	r3, r2
 8005718:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800571a:	2301      	movs	r3, #1
 800571c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005722:	4b1f      	ldr	r3, [pc, #124]	; (80057a0 <FATFS_LinkDriverEx+0x94>)
 8005724:	7a5b      	ldrb	r3, [r3, #9]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d131      	bne.n	8005790 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800572c:	4b1c      	ldr	r3, [pc, #112]	; (80057a0 <FATFS_LinkDriverEx+0x94>)
 800572e:	7a5b      	ldrb	r3, [r3, #9]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	461a      	mov	r2, r3
 8005734:	4b1a      	ldr	r3, [pc, #104]	; (80057a0 <FATFS_LinkDriverEx+0x94>)
 8005736:	2100      	movs	r1, #0
 8005738:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800573a:	4b19      	ldr	r3, [pc, #100]	; (80057a0 <FATFS_LinkDriverEx+0x94>)
 800573c:	7a5b      	ldrb	r3, [r3, #9]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	4a17      	ldr	r2, [pc, #92]	; (80057a0 <FATFS_LinkDriverEx+0x94>)
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800574a:	4b15      	ldr	r3, [pc, #84]	; (80057a0 <FATFS_LinkDriverEx+0x94>)
 800574c:	7a5b      	ldrb	r3, [r3, #9]
 800574e:	b2db      	uxtb	r3, r3
 8005750:	461a      	mov	r2, r3
 8005752:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <FATFS_LinkDriverEx+0x94>)
 8005754:	4413      	add	r3, r2
 8005756:	79fa      	ldrb	r2, [r7, #7]
 8005758:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800575a:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <FATFS_LinkDriverEx+0x94>)
 800575c:	7a5b      	ldrb	r3, [r3, #9]
 800575e:	b2db      	uxtb	r3, r3
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	b2d1      	uxtb	r1, r2
 8005764:	4a0e      	ldr	r2, [pc, #56]	; (80057a0 <FATFS_LinkDriverEx+0x94>)
 8005766:	7251      	strb	r1, [r2, #9]
 8005768:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800576a:	7dbb      	ldrb	r3, [r7, #22]
 800576c:	3330      	adds	r3, #48	; 0x30
 800576e:	b2da      	uxtb	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	3301      	adds	r3, #1
 8005778:	223a      	movs	r2, #58	; 0x3a
 800577a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	3302      	adds	r3, #2
 8005780:	222f      	movs	r2, #47	; 0x2f
 8005782:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	3303      	adds	r3, #3
 8005788:	2200      	movs	r2, #0
 800578a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005790:	7dfb      	ldrb	r3, [r7, #23]
}
 8005792:	4618      	mov	r0, r3
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	20000120 	.word	0x20000120

080057a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80057ae:	2200      	movs	r2, #0
 80057b0:	6839      	ldr	r1, [r7, #0]
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff ffaa 	bl	800570c <FATFS_LinkDriverEx>
 80057b8:	4603      	mov	r3, r0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <__libc_init_array>:
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	4d0d      	ldr	r5, [pc, #52]	; (80057fc <__libc_init_array+0x38>)
 80057c8:	4c0d      	ldr	r4, [pc, #52]	; (8005800 <__libc_init_array+0x3c>)
 80057ca:	1b64      	subs	r4, r4, r5
 80057cc:	10a4      	asrs	r4, r4, #2
 80057ce:	2600      	movs	r6, #0
 80057d0:	42a6      	cmp	r6, r4
 80057d2:	d109      	bne.n	80057e8 <__libc_init_array+0x24>
 80057d4:	4d0b      	ldr	r5, [pc, #44]	; (8005804 <__libc_init_array+0x40>)
 80057d6:	4c0c      	ldr	r4, [pc, #48]	; (8005808 <__libc_init_array+0x44>)
 80057d8:	f000 f820 	bl	800581c <_init>
 80057dc:	1b64      	subs	r4, r4, r5
 80057de:	10a4      	asrs	r4, r4, #2
 80057e0:	2600      	movs	r6, #0
 80057e2:	42a6      	cmp	r6, r4
 80057e4:	d105      	bne.n	80057f2 <__libc_init_array+0x2e>
 80057e6:	bd70      	pop	{r4, r5, r6, pc}
 80057e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ec:	4798      	blx	r3
 80057ee:	3601      	adds	r6, #1
 80057f0:	e7ee      	b.n	80057d0 <__libc_init_array+0xc>
 80057f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f6:	4798      	blx	r3
 80057f8:	3601      	adds	r6, #1
 80057fa:	e7f2      	b.n	80057e2 <__libc_init_array+0x1e>
 80057fc:	080058e4 	.word	0x080058e4
 8005800:	080058e4 	.word	0x080058e4
 8005804:	080058e4 	.word	0x080058e4
 8005808:	080058e8 	.word	0x080058e8

0800580c <memset>:
 800580c:	4402      	add	r2, r0
 800580e:	4603      	mov	r3, r0
 8005810:	4293      	cmp	r3, r2
 8005812:	d100      	bne.n	8005816 <memset+0xa>
 8005814:	4770      	bx	lr
 8005816:	f803 1b01 	strb.w	r1, [r3], #1
 800581a:	e7f9      	b.n	8005810 <memset+0x4>

0800581c <_init>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	bf00      	nop
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr

08005828 <_fini>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	bf00      	nop
 800582c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582e:	bc08      	pop	{r3}
 8005830:	469e      	mov	lr, r3
 8005832:	4770      	bx	lr
